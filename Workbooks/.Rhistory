# remove residuals
aov_df <- aov_df[aov_df$Contrast != "Residuals", ]
# now the posthoc test
tukey <- TukeyHSD(two_way)
tuk.l <- tukey
print("ANOVA results for all celltypes and markers combined")
# get the Tukey outputs
for(J in 1:length(tuk.l)){
rownames <- row.names(tuk.l[[J]])
tuk_df <- data.frame(
Contrast = names(tuk.l[J]),
Subgroups = rownames,
tuk.l[[J]], row.names = NULL)
# put the dataframe in a list
tuk_summary.l[[as.character(names(tuk.l)[J])]] <- tuk_df
dft <- tuk_summary.l[[3]]
filtered_df <- dft %>%
filter(sapply(strsplit(Subgroups, "[:-]"), "[", c(2, 4)) %>%
apply(2, function(x) all(x == x[1])))
# add the filtered dataframe for only id2 pairs
tuk_summary.l[[paste("Interactions_",id1)]] <- filtered_df
# filter the interaction dataframe
filtered_df2 <- dft %>%
filter(sapply(strsplit(Subgroups, "[:-]"), "[", c(1, 3)) %>%
apply(2, function(x) all(x == x[1])))
# add the filtered dataframe to have matching id1 or id2 contrasts
tuk_summary.l[[paste("Interactions_",id2)]] <- filtered_df2
}
output_list <- list(ANOVA = aov_df,TukeyHSD = tuk_summary.l)
}
return(output_list)
}
}
#
# original get means function
get_means <- function(df, group_cols, value_col) {
df_means <- df %>%
group_by(across(all_of(group_cols))) %>%
mutate(expression = mean(value)) %>%
distinct(across(all_of(group_cols)), expression, .keep_all = TRUE) %>%
select(-value)
return(df_means)
}
test.stats5 <- run_stats(input_df= df.for.stats, group_cols = c("Sample", "CellType","Marker","Genotype","Batch"),
value_col = "value",
stat_type = "ANOVA2", id1 = 'Genotype',
id2 = "Marker", use_means = TRUE,
loop_by = "CellType")
# see the relevant interactions Tukey's results
df <- as.data.frame(test.stats1[["TukeyHSD"]][["Interactions_ Genotype"]])
head(df)
# now filter for significant differences
df_sig <- df %>% filter(p.adj < 0.05)
View(test.stats5)
df <- as.data.frame(test.stats1[["TukeyHSD"]][["Interactions_ Genotype"]])
head(df)
df <- as.data.frame(test.stats5[["TukeyHSD"]][["Interactions_ Genotype"]])
head(df)
# now filter for significant differences
df_sig <- df %>% filter(p.adj < 0.05)
df_sig
test.stats6 <- run_stats(input_df= df.for.stats, group_cols = c("Sample", "CellType","Marker","Genotype","Batch"),
value_col = "value",
stat_type = "ANOVA2", id1 = 'Genotype',
id2 = "CellType", use_means = TRUE,
loop_by = "Marker")
# see the interactions Tukey's results where id1 or id2 match
df <- as.data.frame(test.stats6[["TukeyHSD"]][["Interactions_ Genotype"]])
head(df)
# now filter for significant differences
df_sig <- df %>% filter(p.adj < 0.05)
df_sig
df <- as.data.frame(test.stats2[["TukeyHSD"]][["Interactions_ CellType"]])
head(df)
# now filter for significant differences
df_sig <- df %>% filter(p.adj < 0.05)
head(df)
df <- as.data.frame(test.stats6[["TukeyHSD"]][["Interactions_ Genotype"]])
head(df)
# now filter for significant differences
df_sig <- df %>% filter(p.adj < 0.05)
df_sig
df <- as.data.frame(test.stats6[["TukeyHSD"]][["Interactions_ CellType"]])
head(df)
# now filter for significant differences
df_sig <- df %>% filter(p.adj < 0.05)
df_sig
5+6
rf <- RFM_train(seurate_object = seu,
AB_list = AB, annotations = seu$CellType,
split = c(0.8,0.2),
downsample = NULL,
seed = 222,
mytry = c(1:10),
maxnodes = c(12: 25),
trees = c(250, 500, 1000,2000),
start_node = 15)
rf <- RFM_train(seurate_object = seu,
AB_list = AB, annotations = seu$CellType,
split = c(0.8,0.2),
downsample = "none",
seed = 222,
mytry = c(1:10),
maxnodes = c(12: 25),
trees = c(250, 500, 1000,2000),
start_node = 15)
#save(rf, output_path,"trainedRFM.Rds")
40000/80
2000/24
2000*24
48000/2000
1000000/96
100000/48
2000*43.1
17000/13
library(Seurat)
library(tidyverse)
seu8 <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/Darkgenome/6weeks/step8/objs/seu_step8.rds")
FeaturePlot(seu8, features = c("SOX2", "CALB1"), label = TRUE)
FeaturePlot(seu8, features = c("NGN1", "NGN2"), label = TRUE)
FeaturePlot(seu8, features = c("NEUROG1", "NEUROG2"), label = TRUE)
FeaturePlot(seu8, features = c("MKI67","PCNA","NES"), label = TRUE)
FeaturePlot(seu8, features = c("MKI67","PCNA","NES"), label = FALSE)
FeaturePlot(seu8, features = c("S100B","SLC1A3","ALDH1L1")) # none
FeaturePlot(seu8, features = c("LMX1A","LMX1B","EN1","PITX3","NR4A1"), label = FALSE)
FeaturePlot(seu8, features = c("LMX1A","LMX1B","EN1","PITX3","NR4A2"), label = FALSE)
Idents(seu8) <- 'integrated_snn_res.0.7'
FeaturePlot(seu8, features = c("VIM","GFAP","AQP4")) # none
FeaturePlot(seu8, features = c("S100B","SLC1A3","ALDH1L1"))
FeaturePlot(seu8, features = c("RBFOX3","MAP2","SNAP25")) # Neuron
# we see maturen on the left
FeaturePlot(seu8, features = c("MOG","MBP","OLIG1")) # none
FeaturePlot(seu8, features = c("SLC32A1","GAD1","GAD2")) # GABA cluster 5
FeaturePlot(seu8, features = c("DDC","TH","SLC6A3","SLC18A2")) # DA cluster 13
FeaturePlot(seu8, features = c("TPH1","TPH2","SLC6A4"))
FeaturePlot(seu8, features = c("SLC17A6", "SLC17A7"), label = TRUE)
FeaturePlot(seu8, features = c("SOX2", "CALB1"), label = TRUE)
FeaturePlot(seu8, features = c("NEUROG1", "NEUROG2"), label = TRUE)
FeaturePlot(seu8, features = c("MKI67","PCNA","NES"), label = FALSE)
FeaturePlot(seu8, features = c("LMX1A","LMX1B","EN1","PITX3","NR4A2"), label = FALSE)
View(seu8)
DimPlot(seu8, group.by = "integrated_snn_res.0.1")
View(seu8)
DimPlot(seu8, group.by = "integrated_snn_res.0.2")
# level for broad annotations
Sys.time()
library(Seurat)
library(tidyverse)
library(DoubletFinder)
wd <- "/Users/rhalenathomas/Documents/scRNAclubMcGill/workshop2023/data/"
setwd(wd)
adolescent_data <- Read10X("Adolescent_14_YO_raw_feature_bc_matrix/",
strip.suffix = TRUE )
# load data
# insert the pathway to the location of the data
# Windows
setwd("C:/Users/Home/Documents/GitHub/SingleCell_Workshop/") # run in terminal directly
# load data
# insert the pathway to the location of the data
# Windows
#setwd("C:/Users/Home/Documents/GitHub/SingleCell_Workshop/") # run in terminal directly
# MAC/Linux
wd <- "/Users/rhalenathomas/Documents/scRNAclubMcGill/workshop2023/data/"
setwd(wd)
adolescent_data <- Read10X("Adolescent_14_YO_raw_feature_bc_matrix/",
strip.suffix = TRUE )
#Look at the dimensions of the matrix
dim(adolescent_data)
#Look at a small part of the data
adolescent_data[1:5, 1:5]
#Look at the distribution of the number of UMIs per cell
colSums(adolescent_data) %>% summary
#Look at the distribution of the number of genes per cell
colSums(adolescent_data > 0) %>% summary
input_path <- "/Users/rhalenathomas/Documents/Data/scRNAseq/PublicData/"
CO <- readRDS(paste(input_path,"org_exp_UCSC.rds",sep = ""))
class(CO)
# load libraries
library(tidyverse)
library(ggplot2)
library(Seurat)
desired_cells = 50000
sampled_cols <- sample(ncol(CO), size = desired_cells, replace = FALSE)
# Subset the data.table using the sampled column indices
COsub <- CO[, sampled_cols, with = FALSE]
memory.limit()
ulimit -a | grep "max memory size"
mem_used()
# load libraries
library(tidyverse)
library(ggplot2)
library(Seurat)
library(pryr) # for memory check
mem_used()
input_path <- "/Users/rhalenathomas/Documents/Data/scRNAseq/PublicData/"
CO <- readRDS(paste(input_path,"orgUCSCexp50000cells.csv",sep = ""))
CO <- read.csv(paste(input_path,"orgUCSCexp50000cells.csv",sep = ""))
class(CO)
dim(CO)
mem_used()
col_names <- as.character(colnames(CO))
row_names <- as.character(rownames(CO))
# Create Seurat object directly from the data.table
so <- CreateSeuratObject(counts = CO, barcodes = col_names, genes = row_names)
meta <- read.table(paste(input_path,"meta_USCSorganoids.tsv",sep=""),header=T, sep="\t", as.is=T, row.names=1)
View(so)
CO[1:5,1:3]
input_path <- "/Users/rhalenathomas/Documents/Data/scRNAseq/PublicData/"
CO <- readRDS(paste(input_path,"org_exp_UCSC.rds",sep = ""))
class(CO)
desired_cells = 50000
sampled_cols <- sample(ncol(CO), size = desired_cells, replace = FALSE)
COsub <- CO %>%
select(all_of(sampled_cols))
dim(COsub)
COsub[1:5,1:3]
genes = CO[,1][[1]]
genes = gsub(".+[|]", "", genes)
mat = data.frame(CO[,-1], row.names=genes)
COsub <- CO[, -1, with = FALSE]
# Set the "gene" column as row names
setrownames(COsub, CO$gene)
COsub <- COsub[, -"gene", with = FALSE]
mem_used()
rm(COsub)
mem_used()
gc() # try to free memory
mem_used()
rm(genes,input_path,sampled_cols)
mem_used()
input_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/TimeCourseAIW/LiveCells"
output_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/TimeCourseAIW/Analysis/"
# 1.a Read in FlowJo Files
# down sample to take cells from each of 4 time points and 4 replicates
flowset <- fsc_to_fs(input_path)
devtools::install_github("RhalenaThomas/CelltypeR/CelltypeR")
# load necessary libraries
library(Seurat)
library(Seurat)
library(tidyverse)
NPCex1 <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/NPCex1.RDS")
NPCex2 <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/NPCex2.RDS")
seu <- merge(NPCex1, NPCex2)
unique(seu$orig.ident)
seurat_list <- SplitObject(seu, split.by = "orig.ident")
saveRDS(seurat_list,"/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/NPCex1_ex2_list.RDS")
int.anchors <- FindIntegrationAnchors(object.list = seurat_list, dims = 1:25,
anchor.features = 1000)
?library()
?install.packages()
require(Seurat)
require(tidyverse)
require(CelltypeR)
AB <- c("CD24","CD56","CD29","CD15","CD184","CD133","CD71","CD44","GLAST","AQP4","HepaCAM", "CD140a","O4")
seu.new <- readRDS("/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/NatMethodJuneSubmission/Figure5/SeuNewAIW_labelled.RDS")
colnames(seu.new)
colnames(seu.new@meta.data)
rfm.pred.top5 <- read.csv("/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/NatMethodJuneSubmission/Figure5/RFMtop5pred.csv")
View(seu.new)
View(seu.new)
rfm.ann <- get_annotation(seu, seu.cluster = seu$seurat_clusters,
seu.label = seu$rfm.pred2, top_n = 3,
filter_out = c("Unknown","unknown","Mixed",
"unassigned","Unassigned"),
Label = "RFM")
seu <- seu.new
rm(seu.new)
rfm.ann <- get_annotation(seu, seu.cluster = seu$seurat_clusters,
seu.label = seu$rfm.pred2, top_n = 3,
filter_out = c("Unknown","unknown","Mixed",
"unassigned","Unassigned"),
Label = "RFM")
cor.ann <- get_annotation(seu, seu.cluster = seu$seurat_clusters,
seu.label = seu$cor.labels, top_n = 3,
filter_out = c("Unknown","unknown","Mixed",
"unassigned","Unassigned"),
Label = "CAM")
cor.pred.top5 <- read.csv("/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/NatMethodJuneSubmission/Figure5/Cor035top5pred.csv")
t.lables <- as.data.frame(table(seu$seurat_clusters, seu$cor.labels))
t.lables$Freq <- as.double(t.lables$Freq)
colnames(t.lables) <- c("Cluster", "Label","Freq")
top.labs <- t.lables  %>% group_by(Cluster) %>% top_n(5, Freq)
sort.tops <- top.labs %>% as.data.frame() %>% arrange(desc(Freq))  %>% arrange(Cluster)
print(sort.tops)
seu.r<- readRDS("/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/NatMethodJuneSubmission/Figure4/All9MOannaoteAug.RDS")
Idents(seu.r) <- 'Celltypes'
seu.r <- subset(seu.r, downsample = 5000)
table(seu.r$Celltypes)
AB <- c("CD24","CD56","CD29","CD15","CD184","CD133","CD71","CD44","GLAST","AQP4","HepaCAM", "CD140a","O4")
seu <- seurat_predict(seu, seu.r, ref_id = 'Celltypes',
refdata = seu.r$Celltypes,
down.sample = "none",
markers = AB)
AB <- c("CD24","CD56","CD29","CD15","CD184","CD133","CD71","CD44","GLAST","AQP4","HepaCAM", "CD140a","O4")
seu.r <- ScaleData(seu.r, features = AB)
seu.r <- RunPCA(seu.r, features = AB, verbose = FALSE, approx = FALSE)
Idents(seu) <- "seurat_clusters"
AB <- c("CD24","CD56","CD29","CD15","CD184","CD133","CD71","CD44","GLAST","AQP4","HepaCAM", "CD140a","O4")
seu <- seurat_predict(seu, seu.r, ref_id = 'Celltypes',
refdata = seu.r$Celltypes,
down.sample = "none",
markers = AB)
Idents(seu) <- "seurat_clusters"
seu.new.sub <- subset(seu, downsample = 500)
table(seu.new.sub$seurat_clusters)
seu.new.sub <- ScaleData(seu.new.sub, features = AB)
seu.new.sub <- RunPCA(seu.new.sub, features = AB, verbose = FALSE, approx = FALSE)
seu.new.sub <- ScaleData(seu.new.sub, features = AB)
seu.new.sub <- RunPCA(seu.new.sub, features = AB, verbose = FALSE, approx = FALSE)
seu.new.sub <- RunPCA(seu.new.sub, features = AB, npcs = 1:12)
seu.new.sub <- RunPCA(seu.new.sub, features = AB, npcs = 12)
?RunPCA
seu.new.sub <- RunPCA(seu.new.sub, features = AB, npcs = 12, assay = "RNA")
DimPlot(seu.new.sub)
seu <- seurat_predict(seu.new.sub, seu.r, ref_id = 'Celltypes',
refdata = seu.r$Celltypes,
down.sample = "none",
markers = AB)
View(seu.new.sub)
FeaturePlot(seu.new.sub, features = AB, ncol = 4)
DoHeatmap(seu.new.sub, features = AB)
# input path is the pathway to the folder with the data
input_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/GatingPlanExperiment/May10June10_livegating/"
flowset <- fsc_to_fs(input_path, downsample = 20000)
sampleNames(flowset)
?sampleNames
library(flowWorkspace)
sampleNames(flowset)
# rename samples
sampleNames(flowset) <- c("M10_A","M10_B","M10_C","M10_D",
"J10_A", "J10_B", "J10_C")
sampleNames(flowset)
#### need to change this function to detect peaks or at least have the user add the column number
### check the density plots above to see which have peaks
plotdensity_flowset(flowset)
#### need to change this function to detect peaks or at least have the user add the column number
### check the density plots above to see which have peaks check in plots above
flowset_align <- harmonize(flowset, processing = 'align',
two_peaks = c(1:3,9:length(colnames(transformed_flowset)),
one_peak = c(4:8), threshold = 0.001))
flowset_biexp <- harmonize(flowset, processing = 'biexp')
plotdensity_flowset(flowset_biexp)
#### need to change this function to detect peaks or at least have the user add the column number
### check the density plots above to see which have peaks
plotdensity_flowset(flowset)
flowset_align <- harmonize(flowset, processing = 'align',
two_peaks = c(1:3,9:length(colnames(transformed_flowset)),
one_peak = c(4:8), threshold = 0.01))
flowset_align <- harmonize(flowset, processing = 'align',
two_peaks = c(1:3,9:20),
one_peak = c(4:8), threshold = 0.01)
#### need to change this function to detect peaks or at least have the user add the column number
### check the density plots above to see which have peaks check in plots above
flowset_align <- harmonize(flowset, processing = 'align',
two_peaks = c(1:3,9:21),
one_peak = c(4:8), threshold = 0.01)
#### need to change this function to detect peaks or at least have the user add the column number
### check the density plots above to see which have peaks
plotdensity_flowset(flowset)
plotdensity_flowset(flowset_biexp)
flowset_align <- harmonize(flowset, processing = 'align',
two_peaks = c(1:3,19),
one_peak = c(4:18,20), threshold = 0.01)
flowset_align <- harmonize(flowset, processing = 'align',
two_peaks = c(1:3,19),
one_peak = c(4:18), threshold = 0.01)
#### need to change this function to detect peaks or at least have the user add the column number
### check the density plots above to see which have peaks check in plots above
flowset_align <- harmonize(flowset, processing = 'align',
two_peaks = c(3,19),
one_peak = c(1:2,4:18), threshold = 0.01)
flowset_align <- harmonize(flowset, processing = 'align',
two_peaks = c(1),
one_peak = c(2:20), threshold = 0.01)
flowset_retro <- harmonize(flowset, processing = 'retro',
two_peaks = c(1),
one_peak = c(2:20), threshold = 0.01)
df <- flowset_to_csv(flowset_retro)
head(df)
head(df)
write.csv(df, "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/NatMethodJuneSubmission/Figure5/FlowsetAug29.csv")
AB <- c("CD24","CD56","CD29","CD15","CD184","CD133","CD71","CD44","GLAST","AQP4","HepaCAM", "CD140a","O4")
df_select <- df %>% select(c(AB,"Sample"))
seu <- make_seu(df_select, AB_vector = AB)
seu <- get_clusters(seu, method = "louvain",
df_input = df,
k = 60,
resolution = c(0.6,0.8,1.2),
plots = TRUE,
save_plots = FALSE)
View(seu)
levels(seu)
unique(seu$Sample)
Idents(seu) <- "orig.ident"
DimPlot(seu, group.by = "Sample")
seu <- make_seu(df_select, AB_vector = AB, raster = FALSE)
DimPlot(seu, raster = FALSE)
seu <- get_clusters(seu, method = "louvain",
df_input = df,
k = 60,
resolution = c(0.6,0.8,1.2),
plots = TRUE,
save_plots = FALSE)
get_clusters <- function(seu, method = "louvain",
df_input = NULL, #needed  if input "flowsom"
k = 60, #k for flowsom or kn for Phenograph and Seurat Louvain
resolution = 0.8,
pcdim = 1:10,
plots = TRUE,
save_plots = FALSE) {
if(method == "louvain"){
seu <- FindNeighbors(seu, dims = pcdim, k.param = k, reduction = "pca")
# must take one less than the number of antibodies
seu <- FindClusters(seu, resolution = resolution)
group_name <- "seurat_clusters"
print("method is Louvain")
}
else if(method == "phenograph"){
# phenograph clustering
m <- t(as.matrix(GetAssayData(object = input, slot = "counts")))
Rphenograph_out_flow <- Rphenograph(m, k = k)
phenocluster <- factor(membership(Rphenograph_out_flow[[2]]))
clust_name = paste('Pheno.kn.',k,sep="")
# add the cluster ID into seurat object
seu <- AddMetaData(object = seu, phenocluster, col.name = clust_name)
print("method is phenograph")
}
else if(method == "flowsom"){
# cluster flowsom
print("method is flowsom")
frame <- new("flowFrame", exprs = as.matrix(df_input[, sapply(df_input, is.numeric)])) #convert input to flowframe, remove non-numerical col
fs <- ReadInput(frame) #convert flowframe to flowsom object
fs <- BuildSOM(fs) # build flowSOM object, no need for -1 because X column is removed
fs <- BuildMST(fs)
# get the meta data
flowSOMcluster <- metaClustering_consensus(fs$map$codes, k = k, seed=42)
# add the cluster ID into seurat object to visualize
seu <- AddMetaData(object = seu,
metadata = flowSOMcluster[fs$map$mapping[, 1]],
col.name = paste('FlowSom.k.', k, sep=""))
group_name <- paste('FlowSom.k.', k, sep="")
}
else{
print("select a valid clustering method: 'louvain','phenograph','flowsom' ")
}
# make the UMAP for all object
seu <- RunUMAP(seu, dims = pcdim, n.neighbors = k, min.dist = 0.4,
spread = 1.5)
if(plots){
p <- DimPlot(seu, group.by = group_name)
print(p)
p1 <- FeaturePlot(seu, features = rownames(seu),
slot = 'scale.data',
min.cutoff = 'q1',
max.cutoff ='99',
label.size = 1)
}
if(save_plots){
png(paste(save_plots, "UMAPfeatureplots.png", sep = ""))
p1
dev.off()
png(paste(save_plots, "UMAPclusters.png", sep = ""))
p
dev.off()
}
return(seu)
}
seu <- get_clusters(seu, method = "louvain",
df_input = df,
k = 60,
resolution = 0.8,
plots = TRUE,
save_plots = FALSE)
seu <- FindNeighbors(seu, dims = 1:12, k.param = 60, reduction = "pca")
seu <- NormalizeData(seu)
seu <- FindNeighbors(seu, dims = 1:12, k.param = 60, reduction = "pca")
seu <- ScaleData(seu)
?FindNeighbors
seu <- FindNeighbors(seu, dims = 1:12, k.param = 60, reduction = "pca")
seu <- RunUMAP(seu, dims = 1:12, n.neighbors = k, min.dist = 0.4,
spread = 1.5)
seu <- RunUMAP(seu, dims = 1:12, n.neighbors = 60, min.dist = 0.4,
spread = 1.5)
seu <- FindNeighbors(seu, dims = 1:12, k.param = 60, reduction = "pca")
DimPlot(seu, raster = FALSE)
DimPlot(seu, raster = FALSE, group.by = "Sample")
for (i in AB) {
print(FeaturePlot(seu, features = i, min.cutoff = 'q1', max.cutoff = 'q97', label = TRUE, raster = FALSE))
}
seu <- make_seu(df, AB_vector = AB)
DimPlot(seu, raster = FALSE, group.by = "Sample")
seu <- get_clusters(seu, method = "louvain",
df_input = df,
k = 60,
resolution = 0.8,
plots = FALSE,
save_plots = FALSE)
seu <- RunUMAP(seu, dims = 1:12, n.neighbors = 60, min.dist = 0.4,
spread = 1.5)
View(seu.r)
seu.r
seu
DimPlot(seu, raster = FALSE, group.by = "Sample", reduction = "pca")
DimPlot(seu, raster = FALSE, group.by = "Sample", reduction = "umap")
for (i in AB) {
print(FeaturePlot(seu, features = i, min.cutoff = 'q1', max.cutoff = 'q97', label = TRUE, raster = FALSE))
}
seu <- FindNeighbors(seu, dims = 1:12, k.param = 60, reduction = "pca")
seu <- NormalizeData(seu)
seu <- FindClusters(seu, resolution = 0.8)
library(Seurat)
seu <- FindNeighbors(seu, dims = 1:12, k.param = 60, reduction = "pca")
