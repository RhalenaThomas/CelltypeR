cluster.ids <- c("AJG-3450","AJG-3450","AJG-3450","AIW002","AIW002","AIW002",
"AJG-3450","AJG-3450","AJG-3450")
names(cluster.ids) <- levels(seu)
seu <- RenameIdents(seu, cluster.ids)
seu$ipsc <- Idents(seu)
DimPlot(seu, group.by = 'ipsc')
prop_test <- permutation_test(
prop_test, cluster_identity = "cell.types",
sample_1 = "AIW002", sample_2 = "AJG-3450",
sample_identity = "ipsc")
seu$ipsc <- Idents(seu)
seu$ipsc <- Idents(seu)
saveRDS(seu, paste(outpath,"seuAllcells.15072022.Rds"))
# set up the environment
library(Seurat)
library(dplyr)
library(ggplot2)
library(reshape2)
# Figure 2 B
# heatmap
# figure 2 B - heatmap of 5 cell lines with colours adjusted
seu <- readRDS("/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/2Dcells_surface/Figure2/FigureStuff/Flowset_SelectSeuratlabels.Rds")
AB <- c("CD24","CD56","CD29","CD15","CD184","CD133","CD71","CD44","GLAST","AQP4","HepaCAM", "CD140a","O4")
# read in the data
# see the heatmap
DoHeatmap(seu, group.by = "Batch", features = AB, size= 6,slot = "scale.data", group.colors = c("cadetblue","bisque3","darkolivegreen3","darkgoldenrod3","cyan4"), disp.max = 2, disp.min = -1.5) + scale_fill_gradientn(colors = c("#154c79", "#eeeee4", "#e28743")) +
theme(axis.text.y = element_text(size = 15))
# save the heatmap
outpath = "/Users/rhalenathomas/Documents/Projects_Papers/PhenoID/ForFigures/"
pdf(paste(outpath,"HM_2Dcell_F2B.pdf",sep=""),width =6, height = 4)
print(DoHeatmap(seu, group.by = "Batch", features = AB, size= 6,slot = "scale.data", group.colors = c("cadetblue","bisque3","darkolivegreen3","darkgoldenrod3","cyan4"), disp.max = 2, disp.min = -1.5) + scale_fill_gradientn(colors = c("#154c79", "#eeeee4", "#e28743")) +
theme(axis.text.y = element_text(size = 12)))
dev.off()
#Figure 2C
# UMAP with labels
outpath
reference_path <- "/Users/rhalenathomas/GITHUB/PhenoID_single_cell_flow_cytometry_analysis/old/correlation/ReferenceMatrix9celltypesOrdered.csv"
output_path <- "/Users/rhalenathomas/Documents/Projects_Papers/PhenoID/ForFigures/Corr2D/"
test_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/2Dcells_surface/preprocessing/select/"
# install.packages("kit")
# install.packages("tidyr")
# clear the environment
rm(list=ls())
library(kit) # for finding max and second max (function topn)
library(ggplot2)  # for plotting
library(reshape2) # for plotting (function melt)
library(tidyr) #for the last plot in the function
library(magrittr)
library(dplyr) # for df formating (function select)
#function: find_correlation
#compare pre-processed expression matrix with the expected value for each cell
#type, return the best and second best correlated cell types for each sample in
#the expression matrix1
find_correlation <- function(test_path, reference_path, output_path, min_corr=0.45, min_diff=0.05) {
#input type: test_path and reference_path as strings, min_corr and min_diff as numbers
test <- read.csv(test_path)
reference <- read.csv(reference_path)
#replace NA in epithelial,04 with the avg expression of 04 in other cell types
reference[9,"O4"] <- mean(reference[1:8,"O4"])
#1. process and scale test and reference matrix =============================
#select_col takes the markers that exist both in reference and expression matrix
#in reference's order
select_col <- list()
for (i in colnames(reference)) {
for (j in colnames(test)) {
if (tolower(i) == tolower(j)) {select_col <- c(select_col, j)}
}
}
#change reference's spelling to match the test's spelling
colnames(reference) <- select_col
#select 13 markers + X in test
test <- test %>% dplyr::select(colnames(reference))
#a list of markers (without X)
markers <- unlist(select_col[-1])
#z score markers expression in test (without X)
test[,markers] <- scale(test[,markers])
# z score the reference matrix
reference[,markers] <- scale(reference[,markers])
# test <- test[sample(1:nrow(test), 5),] #testing with 5 samples
#2. find best and second correlation and cell type ==========================
#df will be the output df
df <- data.frame(matrix(ncol = 6, nrow = length(test)))
colnames(df) <- list("X", "cor.1", "best.cell.type",
"cor.2", "second.cell.type","cell.label")
#the loop that will find the best and second best correlation and cell types
for (i in 1:nrow(test)) {
corr_ls <- vector() #list of correlation between the reference cell types and each sample
ct_ls <- vector() #cell type list
for (j in 1:nrow(reference)) {
corr <- cor(as.numeric(test[i,markers]),as.numeric(reference[j,markers])) # pearson by default and we use default
corr_ls <- c(corr_ls, corr)
ct_ls <- c(ct_ls, reference[j,1])
}
top <- topn(corr_ls, 2L, decreasing = TRUE) #return the index of the best 2
df[i,"X"] <- test[i,1]
df[i,"cor.1"] <- corr_ls[top[1]]
df[i,"best.cell.type"] <- ct_ls[top[1]]
df[i,"cor.2"] <- corr_ls[top[2]]
df[i,"second.cell.type"] <- ct_ls[top[2]]
# add variables for cutoffs
# min_corr - cells are labelled unknown if best corr is less than this threshold
# min_diff - best - second corr is less than this value then the cells are double labelled
df[i,"cell.label"] <- ifelse(corr_ls[top[1]] < min_corr, "unknown",
ifelse(corr_ls[top[1]] - corr_ls[top[2]] < min_diff, paste(ct_ls[top[1]],ct_ls[top[2]],sep = "-"), ct_ls[top[1]]))
}
#3. saving plots and csv===================================================
# save best and second best correlation and cell types as csv
write.csv(df, paste(output_path, "corr_celltypes.csv",sep=""), row.names = FALSE)
# filter to get frequency table and save as csv
df.f <- df %>% dplyr::select(cell.label)
freq.table <- as.data.frame(table(df.f))
write.csv(freq.table, paste(output_path, "Frequencytabletypes.csv",sep=""), row.names = FALSE)
#
# # plot the frequencies and save as pdf
# #plotting after filtering for cell types with more than 100 cells
# # filter
df.filter <- df %>% group_by(cell.label) %>% dplyr::filter(n()> 100)
# # plot
pdf(paste(output_path,"FreqCellTypes.pdf",sep=""),width =12, height = 6)
plot1 <- ggplot(df.filter, aes(x=reorder(cell.label,cell.label,function(x)-length(x)), fill = cell.label))+ geom_bar()+theme_classic() +
theme(axis.text.x=element_text(angle=90))+ xlab('Assigned cell type') + ylab('number of cell')
print(plot1)
dev.off()
#
df.melt <- melt(df) #reformat to long df
#
# # violin plot of best correlation/cell type
pdf(paste(output_path,"vlnPlotbestcells.pdf",sep=""))
plot2 <- ggplot(df, aes(x=best.cell.type, y=cor.1 ))+ geom_violin()+ ylim(-0.1,1)+theme_classic()+
theme(axis.text.x=element_text(angle=90)) + ylab("correlation coefficient") + xlab("Cell type with max correlation coefficient")
print(plot2)
dev.off()
#
# # plot the best and second best correlation together
pdf(paste(output_path,"boxPlotdoublecelltypes.pdf",sep=""))
plot3 <- ggplot(df.melt, aes(x=cell.label, y=value ))+ geom_boxplot()+ ylim(-0.1,1)+theme_classic()+
theme(axis.text.x=element_text(angle=90))+ ylab("correlation coefficient") + xlab("Cell type label")
print(plot3)
dev.off()
#
# # plot the best and second best correlation separated on the same graph
pdf(paste(output_path,"boxPlot2corr.pdf",sep=""))
plot4 <- ggplot(df.melt, aes(x=best.cell.type, y=value, fill= variable))+ geom_boxplot()+ ylim(-0.25,1)+theme_classic()+
theme(axis.text.x=element_text(angle=90)) + scale_fill_manual(values = c("#4E84C4", "#52854C")) + ylab("correlation coefficient") + xlab("Cell type")
print(plot4)
dev.off()
#
# # the second best correlation is so low it was removed from STEM with axis limit -0.1 and even -1
#
#
# # down sample
set.seed(64)
df.downsample <- sample_n(df, 1000)
df.melt.down <- melt(df.downsample)
#
# # reformat the table to work with the before after plot
# # y is the measurement in df.melt = value
# # x is before after in df.melt = variable
# # class another variable - in the example this is different shapes - for us this is best cell type
# # might use facet to split the cell type - needs to be a factor
# # id is the individual id this is the X column
pdf(paste(output_path,"pairedPlotBestcelltype.pdf",sep=""))
plot5 <- ggplot(df.melt.down, aes(x = variable, y = value,colour= variable, group= X)) +
geom_line(show.legend = F, size = 0.1, color = "black") + geom_point()+ scale_color_manual(values = c("#4E84C4", "#52854C")) + ylim(-0.25,0.95) +
facet_wrap(~(as.factor(best.cell.type))) +
theme(legend.position = "none") +
ylab("Correlation Coefficient") +
xlab("")
print(plot5)
dev.off()
#
#
# # this will be an excellent visualization but I need to subset only the double labels, then I can plot more cells and see more clearly.
double.cells <- df[grep("-", df$cell.label),]
#
df.melt.double <- melt(double.cells)
#
pdf(paste(output_path,"pairedPlotdoubletypes.pdf",sep=""))
plot6 <- ggplot(df.melt.double, aes(x = variable, y = value,colour= variable, group= X)) +
geom_line(show.legend = F, size = 0.1, color = "black") + geom_point()+ scale_color_manual(values = c("#4E84C4", "#52854C")) + ylim(-0.15,0.8) +
facet_wrap(~(as.factor(cell.label))) +
ylab("Correlation Coefficient") +
xlab("")
print(plot6)
dev.off()
}
## input
#test_path <- "/Users/shumingli/Documents/GitHub/PhenoID_single_cell_flow_cytometry_analysis/preprocessing/outputs/prepro_outsaligned_transformed_flowset.csv"
#reference_path <- "/Users/shumingli/Documents/GitHub/PhenoID_single_cell_flow_cytometry_analysis/correlation/ReferenceMatrix9celltypesOrdered.csv"
#output_path <- "/Users/shumingli/Desktop/"
#test_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outsjan20-9000cells/prepro_outsretrotransformed_flowset.csv"
#reference_path <- "/Users/rhalenathomas/GITHUB/PhenoID_single_cell_flow_cytometry_analysis/correlation/ReferenceMatrix9celltypesOrdered.csv"
#output_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outsjan20-9000cells/Figure3/correlation/retro/9celltypes/"
#find_correlation(test_path, reference_path, output_path)
# run for full 9MBO set
#reference_path <- "/Users/rhalenathomas/GITHUB/PhenoID_single_cell_flow_cytometry_analysis/correlation/ReferenceMatrix9celltypesOrdered.csv"
#output_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outs/correlations/"
#test_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outs/retrotransformed_flowset.csv"
#find_correlation(test_path, reference_path, output_path)
# NOTE - It would be good if this function sent the two output csv as df to the global enviroment
# return corr_celltypes
# Frequencytabletypes
find_correlation(test_path, reference_path, output_path)
test_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/2Dcells_surface/preprocessing/select/2DcellsSelectflowset.csv"
find_correlation(test_path, reference_path, output_path)
reference_path <- "/Users/rhalenathomas/GITHUB/PhenoID_single_cell_flow_cytometry_analysis/old/correlation/ReferenceMatrix9celltypesOrdered.csv"
output_path <- "/Users/rhalenathomas/Documents/Projects_Papers/PhenoID/ForFigures/Corr2D/"
test_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/2Dcells_surface/preprocessing/select/2DcellsSelectflowset.csv"
find_correlation(test_path, reference_path, output_path)
output_path <- "/Users/rhalenathomas/Documents/Projects_Papers/PhenoID/ForFigures/Corr2D/"
test_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/2Dcells_surface/preprocessing/select/2DcellsSelectflowset.csv"
find_correlation(test_path, reference_path, output_path)
corr_cell.df <- read.csv("/Users/rhalenathomas/Documents/Projects_Papers/PhenoID/ForFigures/Corr2D/corr_celltypes.csv")
freq.df <- read.csv("/Users/rhalenathomas/Documents/Projects_Papers/PhenoID/ForFigures/Corr2D/Frequencytabletypes.csv")
View(corr_cell.df)
df <- corr_cell.df %>% filter(!grepl('-',cell.label))
View(df)
ggplot(df, aes(x=cell.label, y=cor.1 ))+ geom_violin()+ ylim(-0.1,1)+theme_classic()+
theme(axis.text.x=element_text(angle=90)) + ylab("correlation coefficient") + xlab("Cell type with max correlation coefficient")
thresh1 <- 0.45
ggplot(df, aes(x=best.cell.type, y=cor.1, fill = best.cell.type))+ geom_violin(trim = FALSE)+ ylim(0,1)+theme_classic()+
theme(text = element_text(size = 18), axis.text.x=element_text(angle=90, size = 15)) + ylab("correlation coefficient") + xlab("Cell type with max correlation coefficient") +
geom_hline(yintercept = thresh1) +
guides(fill = guide_legend(title = "Cell Phenotype"))
pdf(paste(output_path,"Vln.max.cor.2Dcells.cells.pdf"),height = 4, width = 6)
ggplot(df, aes(x=best.cell.type, y=cor.1, fill = best.cell.type))+ geom_violin(trim = FALSE)+ ylim(0,1)+theme_classic()+
theme(text = element_text(size = 15), axis.text.x=element_text(angle=90, size = 12)) + ylab("correlation coefficient") + xlab("Cell type with max correlation coefficient") +
geom_hline(yintercept = thresh1) +
guides(fill = guide_legend(title = "Cell Phenotype"))
dev.off()
seu <- readRDS("/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/2Dcells_surface/Figure2/FigureStuff/Flowset_SelectSeuratlabels.Rds")
View(seu)
corr_cell.df <- read.csv("/Users/rhalenathomas/Documents/Projects_Papers/PhenoID/ForFigures/Corr2D/corr_celltypes.csv")
freq.df <- read.csv("/Users/rhalenathomas/Documents/Projects_Papers/PhenoID/ForFigures/Corr2D/Frequencytabletypes.csv")
df <- corr_cell.df %>% filter(!grepl('-',cell.label))
ggplot(df, aes(x=cell.label, y=cor.1 ))+ geom_violin()+ ylim(-0.1,1)+theme_classic()+
theme(axis.text.x=element_text(angle=90)) + ylab("correlation coefficient") + xlab("Cell type with max correlation coefficient")
thresh1 <- 0.45
ggplot(df, aes(x=best.cell.type, y=cor.1, fill = best.cell.type))+ geom_violin(trim = FALSE)+ ylim(0,1)+theme_classic()+
theme(text = element_text(size = 18), axis.text.x=element_text(angle=90, size = 15)) + ylab("correlation coefficient") + xlab("Cell type with max correlation coefficient") +
geom_hline(yintercept = thresh1) +
guides(fill = guide_legend(title = "Cell Phenotype"))
View(corr_cell.df)
seu <- AddMetaData(object=seu, metadata=corr_cell.df$cell.label, col.name = 'cor.labels')
DimPlot(seu)
unique(seu.q$cor.labels)
View(seu)
unique(seu$cor.labels)
DimPlot(seu, group.by = 'cor.labels')
### save with the correlation labels
png(paste(output_path,"UMAPcor.lables.png"), width = 800, height = 300)
DimPlot(seu, group.by = 'cor.labels')
dev.off()
DimPlot(seu, group.by = 'Batch')
View(seu)
DimPlot(seu, group.by = 'Labels')
DimPlot(seu, group.by = 'Lables')
t.lables <- as.data.frame(table(seu$Batch, seu$cor.labels))
pr.t.lables <- as.data.frame(prop.table(table(seu$Batch, seu$cor.labels)))
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 15), axis.text.x=element_text(hjust = 1)) +
xlab('Cluster Number') + ylab('Number of cells') +
guides(fill = guide_legend(title = "RFM Predicted Cell Type"))
dev.off()
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 15), axis.text.x=element_text(hjust = 1)) +
xlab('Cluster Number') + ylab('Number of cells') +
guides(fill = guide_legend(title = "RFM Predicted Cell Type"))
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 15), axis.text.x=element_text(hjust = 1)) +
xlab('2D cell culture') + ylab('Number of cells') +
guides(fill = guide_legend(title = "Correltation Predicted Cell Type"))
dev.off()
top.labs <- t.lables  %>% group_by(Var1)  %>% top_n(3, Freq)
top.labs
# find the top cell in each cluster
top.lab <- t.lables  %>% group_by(Var1)  %>% top_n(1, Freq)
top.lab
top.labs <- t.lables  %>% group_by(Var1)  %>% top_n(3, Freq)
top.labs
View(top.labs)
View(corr_cell.df)
seu <- AddMetaData(object=seu, metadata=corr_cell.df$best.cell.type, col.name = 'main.cor.labels')
png(paste(output_path,"Bar.cor.lables.input.pdf"), width = 1000, height = 400)
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 15), axis.text.x=element_text(hjust = 1)) +
xlab('2D cell culture') + ylab('Number of cells') +
guides(fill = guide_legend(title = "Correltation Predicted Cell Type"))
dev.off()
t.lables <- as.data.frame(table(seu$Batch, seu$main.cor.labels))
pr.t.lables <- as.data.frame(prop.table(table(seu$Batch, seu$main.cor.labels)))
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 15), axis.text.x=element_text(hjust = 1)) +
xlab('2D cell culture') + ylab('Number of cells') +
guides(fill = guide_legend(title = "Correltation Predicted Cell Type"))
png(paste(output_path,"Bar.cor.best.cell.input.pdf"), width = 1000, height = 400)
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 15), axis.text.x=element_text(hjust = 1, angle =90)) +
xlab('2D cell culture') + ylab('Number of cells') +
guides(fill = guide_legend(title = "Correltation Predicted Cell Type"))
dev.off()
top.labs <- t.lables  %>% group_by(Var1)  %>% top_n(3, Freq)
top.labs
# find the top cell in each cluster
top.lab <- t.lables  %>% group_by(Var1)  %>% top_n(1, Freq)
top.lab
png(paste(output_path,"Bar.cor.lables.input.png"), width = 1000, height = 400)
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 15), axis.text.x=element_text(hjust = 1)) +
xlab('2D cell culture') + ylab('Number of cells') +
guides(fill = guide_legend(title = "Correltation Predicted Cell Type"))
dev.off()
# with only the main cell types
t.lables <- as.data.frame(table(seu$Batch, seu$main.cor.labels))
pr.t.lables <- as.data.frame(prop.table(table(seu$Batch, seu$main.cor.labels)))
# try bar chart
png(paste(output_path,"Bar.cor.best.cell.input.png"), width = 600, height = 400)
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 15), axis.text.x=element_text(hjust = 1, angle =90)) +
xlab('2D cell culture') + ylab('Number of cells') +
guides(fill = guide_legend(title = "Correltation Predicted Cell Type"))
dev.off()
t.lables <- as.data.frame(table(seu$Batch, seu$cor.labels))
pr.t.lables <- as.data.frame(prop.table(table(seu$Batch, seu$cor.labels)))
# try bar chart
png(paste(output_path,"Bar.cor.lables.input.png"), width = 1000, height = 400)
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 15), axis.text.x=element_text(hjust = 1)) +
xlab('2D cell culture') + ylab('Number of cells') +
guides(fill = guide_legend(title = "Correltation Predicted Cell Type"))
dev.off()
# with only the main cell types
t.lables <- as.data.frame(table(seu$Batch, seu$main.cor.labels))
pr.t.lables <- as.data.frame(prop.table(table(seu$Batch, seu$main.cor.labels)))
# try bar chart
png(paste(output_path,"Bar.cor.best.cell.input.png"), width = 600, height = 400)
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 15), axis.text.x=element_text(hjust = 1, angle =90)) +
xlab('2D cell culture') + ylab('Number of cells') +
guides(fill = guide_legend(title = "Correltation Predicted Cell Type"))
dev.off()
t.lables <- as.data.frame(table(seu$Batch, seu$cor.labels))
pr.t.lables <- as.data.frame(prop.table(table(seu$Batch, seu$cor.labels)))
# try bar chart
png(paste(output_path,"Bar.cor.lables.input.png"), width = 500, height = 200)
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 15), axis.text.x=element_text(hjust = 1)) +
xlab('2D cell culture') + ylab('Number of cells') +
guides(fill = guide_legend(title = "Correltation Predicted Cell Type"))
dev.off()
# with only the main cell types
t.lables <- as.data.frame(table(seu$Batch, seu$main.cor.labels))
pr.t.lables <- as.data.frame(prop.table(table(seu$Batch, seu$main.cor.labels)))
# try bar chart
png(paste(output_path,"Bar.cor.best.cell.input.png"), width = 300, height = 200)
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 15), axis.text.x=element_text(hjust = 1, angle =90)) +
xlab('2D cell culture') + ylab('Number of cells') +
guides(fill = guide_legend(title = "Correltation Predicted Cell Type"))
dev.off()
t.lables <- as.data.frame(table(seu$Batch, seu$cor.labels))
pr.t.lables <- as.data.frame(prop.table(table(seu$Batch, seu$cor.labels)))
# try bar chart
png(paste(output_path,"Bar.cor.lables.input.png"), width = 500, height = 200)
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 15), axis.text.x=element_text(hjust = 1, size = 15),axis.text.y=element_text(size = 15) ) +
xlab('2D cell culture') + ylab('Number of cells') +
guides(fill = guide_legend(title = "Correltation Predicted Cell Type"))
dev.off()
t.lables <- as.data.frame(table(seu$Batch, seu$main.cor.labels))
pr.t.lables <- as.data.frame(prop.table(table(seu$Batch, seu$main.cor.labels)))
# try bar chart
png(paste(output_path,"Bar.cor.best.cell.input.png"), width = 300, height = 200)
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 15), axis.text.x=element_text(hjust = 1, size = 15),axis.text.y=element_text(size = 15)) +
xlab('2D cell culture') + ylab('Number of cells') +
guides(fill = guide_legend(title = "Correltation Predicted Cell Type"))
dev.off()
t.lables <- as.data.frame(table(seu$Batch, seu$cor.labels))
pr.t.lables <- as.data.frame(prop.table(table(seu$Batch, seu$cor.labels)))
# try bar chart
png(paste(output_path,"Bar.cor.lables.input.png"), width = 1000, height = 200)
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 15), axis.text.x=element_text(hjust = 1, size = 15),axis.text.y=element_text(size = 15) ) +
xlab('2D cell culture') + ylab('Number of cells') +
guides(fill = guide_legend(title = "Correltation Predicted Cell Type"))
dev.off()
t.lables <- as.data.frame(table(seu$Batch, seu$cor.labels))
pr.t.lables <- as.data.frame(prop.table(table(seu$Batch, seu$cor.labels)))
# try bar chart
png(paste(output_path,"Bar.cor.lables.input.png"), width = 900, height = 300)
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 15), axis.text.x=element_text(hjust = 1, size = 15),axis.text.y=element_text(size = 15) ) +
xlab('2D cell culture') + ylab('Number of cells') +
guides(fill = guide_legend(title = "Correltation Predicted Cell Type"))
dev.off()
t.lables <- as.data.frame(table(seu$Batch, seu$main.cor.labels))
pr.t.lables <- as.data.frame(prop.table(table(seu$Batch, seu$main.cor.labels)))
# try bar chart
png(paste(output_path,"Bar.cor.best.cell.input.png"), width = 600, height = 300)
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 15), axis.text.x=element_text(hjust = 1, size = 15),axis.text.y=element_text(size = 15)) +
xlab('2D cell culture') + ylab('Number of cells') +
guides(fill = guide_legend(title = "Correltation Predicted Cell Type"))
dev.off()
png(paste(output_path,"Bar.cor.best.cell.input.png"), width = 600, height = 300)
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 18), axis.text.x=element_text(hjust = 1, size = 18),axis.text.y=element_text(size = 18)) +
xlab('2D cell culture') + ylab('Number of cells') +
guides(fill = guide_legend(title = "Correltation Predicted Cell Type"))
dev.off()
png(paste(output_path,"Bar.cor.best.cell.input.png"), width = 600, height = 300)
ggplot(t.lables, aes(y = Freq, x = Var1, fill = Var2)) + geom_bar(position = "stack", stat= "identity") +
theme_classic() + theme(text = element_text(size = 18), axis.text.x=element_text(hjust = 1, size = 18, angle = 90),axis.text.y=element_text(size = 18), legend.text = element_text(size=18)) +
xlab('2D cell culture') + ylab('Number of cells') +
guides(fill = guide_legend(title = "Correltation Predicted Cell Type"))
dev.off()
seu
View(seu)
library(Seurat)
seu <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/Macosko_Data/PD_da.Rds")
seu <- NormalizeData(seu, normalization.method = "LogNormalize", scale.factor = 10000)
seu <- FindVariableFeatures(seu, selection.method = "vst", nfeatures = 2000)
seu <- ScaleData(seu)
seu <- RunPCA(seu)
seu <- RunUMAP(seu, reduction = "pca", n.neighbors = 159, dims = 1:30)
DimPlot(seu, reduction = "umap", group.by = "Cell_Subtype")
saveRDS(seu, "/Users/rhalenathomas/Documents/Data/scRNAseq/Macosko_Data/DAsubgroups_processed.Rds")
DAsubtypes <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/Macosko_Data/DAsubgroups_processed.Rds")
library(seurat-data)
library("seurat-data")
library(SeuratData)
AvailableData()
require(Seurat)
require(data.table)
setwd("adultPancreas")
require(Seurat)
require(data.table)
#setwd("adultPancreas")
mat <- fread("https://cells.ucsc.edu/adultPancreas/exprMatrix.tsv.gz")
install.packages('R.utils')
mat <- fread("https://cells.ucsc.edu/adultPancreas/exprMatrix.tsv.gz")
meta <- data.frame(fread("https://cells.ucsc.edu/adultPancreas/meta.tsv"), row.names=1)
genes = mat[,1][[1]]
genes = gsub(".+[|]", "", genes)
mat = data.frame(mat[,-1], row.names=genes)
so <- CreateSeuratObject(counts = mat, project = "adultPancreas", meta.data=meta)
DimPlot(so)
View(so)
table(so$cluster)
DimPlot(so) # doesn't have UMAPs
mat <- fread("https://cells.ucsc.edu/cortex-dev/exprMatrix.tsv.gz")
meta <- data.frame(fread("https://cells.ucsc.edu/cortex-dev/meta.tsv"))
genes = mat[,1][[1]]
genes = gsub(".+[|]", "", genes)
mat = data.frame(mat[,-1], row.names=genes)
so <- CreateSeuratObject(counts = mat, project = "cortex", meta.data=meta)
View(so)
table(so$Cell)
mat <- fread("https://cells.ucsc.edu/ms-cross-regional/integrated/exprMatrix.tsv.gz")
rm(so)
rm(genes)
genes
require(Seurat)
require(data.table)
mat <- fread("https://cells.ucsc.edu/allen-celltypes/human-cortex/various-cortical-areas/exprMatrix.tsv.gz")
?fread
mat <- fread("https://cells.ucsc.edu/allen-celltypes/human-cortex/various-cortical-areas/exprMatrix.tsv.gz", nrows = 1000)
meta <- data.frame(fread("https://cells.ucsc.edu/allen-celltypes/human-cortex/various-cortical-areas/meta.tsv", nrows = 1000))
genes = mat[,1][[1]]
genes = gsub(".+[|]", "", genes)
mat = data.frame(mat[,-1], row.names=genes)
so <- CreateSeuratObject(counts = mat, project = "cortex", meta.data=meta)
View(so)
meta <- data.frame(fread("https://cells.ucsc.edu/allen-celltypes/human-cortex/various-cortical-areas/meta.tsv"))
genes = mat[,1][[1]]
genes = gsub(".+[|]", "", genes)
mat = data.frame(mat[,-1], row.names=genes)
# I need to find a small dataset
# 25K
mat <- fread("https://cells.ucsc.edu/human-forebraindev/sc-rna-seq/exprMatrix.tsv.gz")
meta <- data.frame(fread("https://cells.ucsc.edu/human-forebraindev/sc-rna-seq/meta.tsv"))
genes = mat[,1][[1]]
genes = gsub(".+[|]", "", genes)
mat = data.frame(mat[,-1], row.names=genes)
require(Seurat)
require(data.table)
# I need to find a small dataset
# 25K
mat <- fread("https://cells.ucsc.edu/human-forebraindev/sc-rna-seq/exprMatrix.tsv.gz")
meta <- data.frame(fread("https://cells.ucsc.edu/human-forebraindev/sc-rna-seq/meta.tsv"))
genes = mat[,1][[1]]
genes = gsub(".+[|]", "", genes)
mat = data.frame(mat[,-1], row.names=genes)
?gsub
mat = data.frame(mat[,-1], row.names=genes)
genes = gsub(".+[|]", "", genes)
# set up the environment
library(Seurat)
library(dplyr)
library(Matrix)
library(ggplot2)
DAsubtypes <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/Macosko_Data/DAsubgroups_processed.Rds")
?FindAllMarkers
View(DAsubtypes)
Idents(DAsubtypes) <- "CellSubtypes"
View(DAsubtypes)
View(DAsubtypes)
Idents(DAsubtypes) <- "Cell_Subtype"
View(DAsubtypes)
Idents(DAsubtypes) <- "Cell_Subtype"
DA.sub.markers <- FindAllMarkers(DAsubtypes, only.pos = TRUE)
