library("flowCore")
# installations
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("flowCore")
outpath <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/PaperFigures/"
input_path <- paste("/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/PaperFigures/","All9MOannaote.12072022.Rds")
input <- readRDS(input_path)
df <- transpose(as.data.frame(GetAssayData(input,slot = 'scale.data')))
# clear global environment
#rm(list=ls())
# loading the appropriate libraries
### for anova test:
library(Seurat)
library(dplyr)
library(ggplot2)
library(data.table) #for transpose()
library(reshape2)#used to rename melted df
library(readr)
library(multcompView)
# are these 2 used?
library(scProportionTest) ### for prop test
devtools::install_github("rpolicastro/scProportionTest")
install.packages("devtools")
devtools::install_github("rpolicastro/scProportionTest")
df <- transpose(as.data.frame(GetAssayData(input,slot = 'scale.data')))
AB <- c("CD24","CD56","CD29","CD15","CD184","CD133","CD71","CD44","GLAST","AQP4","HepaCAM", "CD140a","O4")
# I think the data should be in the way it appears in the input df, which
# AB <- c("AQP4", "CD24", "CD44","CD184","CD15","HepaCAM","CD29","CD56", "O4","CD140a","CD133","GLAST","CD71")
colnames(df) <- AB
colnames(df) <- AB
# add the cluster labels and the sample IDs
Sample.input <- as.data.frame(input@meta.data$Batch)
cell.types <- input@meta.data$cell.types
df.2 <- cbind(df, label = cell.types)
df.2 <- cbind(df.2, Sample=Sample.input)
names(df.2)[names(df.2) == "input@meta.data$Batch"] <- "Sample"
#add new columns batch, genotype, experiment day and age based on Batch (the old column)
# this could also be added from the meta data in the seurat object
#batch
df.2[which(grepl("0317A", df.2$Sample)), "batch"] <- "A" #batch A (0317A = A)
df.2[which(grepl("0317B|0306", df.2$Sample)), "batch"] <- "B" #batch B (0317B ir 0306 = B)
#genotype
df.2[which(grepl("3450", df.2$Sample)), "genotype"] <- "3450" # genotype 3450
df.2[which(grepl("AIW002", df.2$Sample)), "genotype"] <- "AIW002" # genotype AIW002
df.2[which(grepl("AJG001C", df.2$Sample)), "genotype"] <- "AJG001C" # genotype AJG001C
#experiment date
df.2[which(grepl("0306", df.2$Sample)), "exdate"] <- "0306" # experiment date 0306
df.2[which(grepl("0317", df.2$Sample)), "exdate"] <- "0317" # experiment date 0317
#age
df.2[which(grepl("0306", df.2$Sample)), "age"] <- "273" # age 273, same as ex date 0306
df.2[which(grepl("0317B", df.2$Sample)), "age"] <- "284" # age 284
df.2[which(grepl("0317A", df.2$Sample)), "age"] <- "263" # age 263
#make a df with 9 entries (9 samples)
#take the mean of each sample (for categorical, there should only be 1 value)
df.3 <- c()
for (i in unique(df.2$Sample)) {
for (j in AB) {df.3 <- c(df.3, mean(df.2[which(df.2$Sample == i), j]))}
df.3 <- c(df.3, i)
for (j in iv) {df.3 <- c(df.3, unique(df.2[which(df.2$Sample == i), j]))}
}
iv <- c('batch', 'genotype', 'exdate', 'age')
#make a df with 9 entries (9 samples)
#take the mean of each sample (for categorical, there should only be 1 value)
df.3 <- c()
for (i in unique(df.2$Sample)) {
for (j in AB) {df.3 <- c(df.3, mean(df.2[which(df.2$Sample == i), j]))}
df.3 <- c(df.3, i)
for (j in iv) {df.3 <- c(df.3, unique(df.2[which(df.2$Sample == i), j]))}
}
df.3 <- matrix(lapply(as.list(df.3), type.convert, as.is=TRUE), ncol = length(c(AB,'Sample', iv)), byrow = TRUE)
colnames(df.3) <- c(AB,'Sample', iv)
melt_df.3 <- melt(df.3, measure.vars = AB, variable.name = 'antibody', value.name = 'AB.mean.expression') # variable = AB name, value = AB mean expression/sample
#### create a df with the mean for each cell type for each of the 9 samples
melt.df2 <- melt(df.2, measure.vars = AB, variable.name = 'antibody')
### I do want the other variables to be added back
df.group <- melt.df2 %>% group_by(label, Sample, antibody, batch, genotype, exdate, age
) %>% dplyr::summarize(Mean = mean(value, na.rm=TRUE))
#function
twanova <- function(A,  #one of independent variables, i.e. one of c('batch', 'genotype', 'exdate', 'age')
B, #antibody or label
dv, #one of dependent variable, antibody mean value here
df, #input dataframe
group, #group to loop through and to use as sample, antibody or label.
output_path = NULL) { #if output_path is given, save stats lists
# If B=antibody, group=label; if B=label, group=antibody
#lists to store stats
anv.l <- list() #store anova
tk.l <- list() #store tukey
tk.l.useful <- list() #store useful comparison of tukey in interaction
tk.l.sig <- list() #store significant outcome (p<0.05) within useful tukey comparison in interaction
for (i in unique(unlist(df[, group]))){
# run 2 way anova with interaction effect
# subset the cell type
df.group.sub <- df[which(df[, group]== i), ]
df.group.sub <- as.data.frame(df.group.sub)
res.aov2 <- aov(df.group.sub[, dv] ~ df.group.sub[, B] * df.group.sub[, A]) #diff
anv.l[[i]] <- summary(res.aov2)
# now the posthoc tests
tukey.results <- TukeyHSD(res.aov2)
tukey.df <- as.data.frame(tukey.results$`df.group.sub[, B]:df.group.sub[, A]`) #diff
# save all results
tk.l[[i]] <- tukey.results
rowl <- c() #row numbers of comparisons that are useful
for (j in 1:nrow(tukey.df)) {
if (length(intersect(strsplit(strsplit(rownames(tukey.df)[j], split = "-")[[1]], split = ":")[[1]],
strsplit(strsplit(rownames(tukey.df)[j], split = "-")[[1]], split = ":")[[2]])) != 0) {
rowl <- c(rowl, j)
}
}
tk.l.useful[[i]] <- tukey.df[rowl, ]
# filter for interactions that are significant
tk.l.sig[[i]] <- tukey.df[rowl, ] %>% filter(`p adj`<= 0.05)
}
# save results
if(!is.null(output_path)) {
saveRDS(anv.l, paste(output_path,"anova.", A, ".", B, ".RDS", sep=''))
saveRDS(tk.l, paste(output_path,"tukey.", A, ".", B, ".RDS", sep=''))
saveRDS(tk.l.useful, paste(output_path,"tukey.sig.useful.", A, ".", B, ".RDS", sep='')) #only filter within interaction
saveRDS(tk.l.sig, paste(output_path,"tukey.sig.", A, ".", B, ".RDS", sep='')) #only filter within interaction, that right?
}
return(list(anv.l = anv.l, tk.l = tk.l, tk.l.useful = tk.l.useful, tk.l.sig = tk.l.sig))
}
View(df)
View(df.2)
View(df.2)
# eventually load library
# for now run function from file 'stats_from_workbook.r'
#parameters
A <- 'batch'
B <- 'label'
dv <- 'Mean'
df <- df.group
group <- 'antibody' #label or antibody, if B is antibody, then group is label, if B is label, then group is antibody
#test
test <- twanova(A, B, dv, df, group, output_path)
# eventually load library
# for now run function from file 'stats_from_workbook.r'
output_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/PaperFigures/"
#parameters
A <- 'batch'
B <- 'label'
dv <- 'Mean'
df <- df.group
group <- 'antibody' #label or antibody, if B is antibody, then group is label, if B is label, then group is antibody
#test
test <- twanova(A, B, dv, df, group, output_path)
View(test)
useful <- test$tk.l.useful
View(useful)
useful.CD24 <- useful$CD24
View(useful.CD24)
View(df.group)
View(test)
anv.l <- test$anv.l
View(anv.l)
anv.24 <- anv.l$CD24
View(anv.24)
anv.24
tk.l <- test$tk.l
tk.24 <- tk.l$CD24
tk.24
A <- 'Genotype'
B <- 'label' # lable is cell types
dv <- 'Mean'
df <- df.group
group <- 'label' #label or antibody, if B is antibody, then group is label, if B is label, then group is antibody
#test
test <- twanova(A, B, dv, df, group, output_path)
View(df.group)
A <- 'Genotype'
B <- 'antibody' #  is cell types
dv <- 'Mean'
df <- df.group
group <- 'label' #label or antibody, if B is antibody, then group is label, if B is label, then group is antibody
#test
test <- twanova(A, B, dv, df, group, output_path)
A <- 'genotype'
B <- 'antibody' #  is cell types
dv <- 'Mean'
df <- df.group
group <- 'label' #label or antibody, if B is antibody, then group is label, if B is label, then group is antibody
#test
test <- twanova(A, B, dv, df, group, output_path)
View(test)
useful <- test$tk.l.useful
View(useful)
useful.glia <- useful$`Glia Lineage`
useful.glia
View(useful)
View(useful.glia)
anv.l <- test$anv.l
anv.cell <- anv.l$`Neurons 1`
View(anv.cell)
View(anv.cell)
anv.cell[[1]]
View(anv.l)
View(anv.l[["Glia Lineage"]][[1]])
tk.l <- test$tk.l
tk.l <- test$tk.l
tk.cell <- tk.l$`Neurons 1`
tk.cell
View(tk.cell)
View(tk.cell)
View(tk.cell)
View(tk.cell)
tk.cell.df <- as.data.frame(tk.cell)
tk.cell$`df.group.sub[, B]`
tk.cell$`df.group.sub[, A]`
tk.cell$`df.group.sub[, B]:df.group.sub[, A]`
tk.A.df <- as.data.frame(tk.cell$`df.group.sub[, A]`)
View(tk.A.df)
tk.int.df <- as.data.frame(tk.cell$`df.group.sub[, B]:df.group.sub[, A]`)
View(tk.int.df)
View(tk.int.df)
tk.filt <- strsplit(rownames(df.t)[j], split = "-")
df.t <- tk.int.df
# need to split row names
tk.filt <- strsplit(rownames(df.t)[j], split = "-")
View(tk.filt)
tk.int.df
tk.A.df
View(tk.A.df)
View(tk.int.df)
class(tk.int.df)
class(tk.int.df)
tk.cell
iv <- c('batch', 'genotype', 'exdate', 'age')
df.3 <- data.frame(matrix(ncol = 18))
colnames(df.3) <- c(AB,'Sample', 'batch', 'genotype', 'exdate', 'age')
count <- 0
#make a df with 9 entries (9 samples)
#take the mean of each sample (for categorical, there should only be 1 value)
for (i in unique(df.2$Sample)) {
count <- count+1
for (j in AB) {df.3[count, j] <- mean(df.2[which(df.2$Sample == i), j])}
df.3[count, 'Sample'] <- i
for (j in iv){df.3[count, j] <- unique(df.2[which(df.2$Sample == i), j])}
}
melt_df.3 <- melt(df.3, measure.vars = AB, variable.name = 'antibody', value.name = 'AB.mean.expression') # variable = AB name, value = AB mean expression/sample
#### create a df with the mean for each cell type for each of the 9 samples
melt.df2 <- melt(df.2, measure.vars = AB, variable.name = 'antibody')
df.group <- melt.df2 %>% group_by(label, Sample, antibody) %>%
dplyr::summarize(Mean = mean(value, na.rm=TRUE))
### I do want the other variables to be added back
#batch
df.group[which(grepl("0317A", df.group$Sample)), "batch"] <- "A" #batch A (0317A = A)
df.group[which(grepl("0317B|0306", df.group$Sample)), "batch"] <- "B" #batch B (0317B ir 0306 = B)
#genotype
df.group[which(grepl("3450", df.group$Sample)), "genotype"] <- "3450" # genotype 3450
df.group[which(grepl("AIW002", df.group$Sample)), "genotype"] <- "AIW002" # genotype AIW002
df.group[which(grepl("AJG001C", df.group$Sample)), "genotype"] <- "AJG001C" # genotype AJG001C
#experiment date
df.group[which(grepl("0306", df.group$Sample)), "exdate"] <- "0306" # experiment date 0306
df.group[which(grepl("0317", df.group$Sample)), "exdate"] <- "0317" # experiment date 0317
#age
df.group[which(grepl("0306", df.group$Sample)), "age"] <- "273" # age 273, same as ex date 0306
df.group[which(grepl("0317B",df.group$Sample)), "age"] <- "284" # age 284
df.group[which(grepl("0317A", df.group$Sample)), "age"] <- "263" # age 263
head(df.group)
library(readr)
library(multcompView)
res.aov2 <- aov(Mean ~ genotype * antibody, data = df.group)
summary(res.aov2)
# input which variable to do the invividual test on
TukeyHSD(res.aov2, which = "antibody")
### this compares the AB with each other and is not helpful
# now this plots the interaction each AB @ a specific genotype
TukeyHSD(res.aov2)
tukey.results <- TukeyHSD(res.aov2)
tk.cell <- tk.l$`Radial Glia 1`
tk.A.df <- as.data.frame(tk.cell$`df.group.sub[, A]`)
tk.int.df <- as.data.frame(tk.cell$`df.group.sub[, B]:df.group.sub[, A]`)
View(test)
View(test)
anv.l <- test$anv.l
anv.cell <- anv.l$`Neurons 1`
anv.cell[[1]]
usefull <- test$tk.l.useful
View(test)
twanova <- function(A,  #one of independent variables, i.e. one of c('batch', 'genotype', 'exdate', 'age')
B, #antibody or label
dv, #one of dependent variable, antibody mean value here
df, #input dataframe
group, #group to loop through and to use as sample, antibody or label.
output_path = NULL) { #if output_path is given, save stats lists
# If B=antibody, group=label; if B=label, group=antibody
#lists to store stats
anv.l <- c() #store anova
tk.l <- vector( "list" , 4) #store tukey
tk.l.useful <- vector( "list" , 4) #store useful comparison of tukey in interaction
tk.l.sig <- c() #store significant outcome (p<0.05) within useful tukey comparison in interaction
# i <- "Glia Lineage"
for (i in unique(unlist(df[, group]))){
# run 2 way anova with interaction effect
# subset the cell type
df.group.sub <- df[which(df[, group]== i), ]
df.group.sub <- as.data.frame(df.group.sub)
res.aov2 <- aov(df.group.sub[, dv] ~ df.group.sub[, B] * df.group.sub[, A]) #diff
anv.l <- c(anv.l,
i, B, summary(res.aov2)[[1]][["Pr(>F)"]][1],
i, A, summary(res.aov2)[[1]][["Pr(>F)"]][2],
i, paste(B,':', A, sep=''), summary(res.aov2)[[1]][["Pr(>F)"]][3]
)
# now the posthoc tests
tukey.results <- TukeyHSD(res.aov2)
for (j in 1:length(tukey.results)) {
itrt = switch(j, B, A, paste(B,':', A, sep=''))
tk.l[[1]] <- c(tk.l[[1]], rep(i, nrow(tukey.results[[j]])))
tk.l[[2]] <- c(tk.l[[2]], rep(itrt, nrow(tukey.results[[j]])))
tk.l[[3]] <- c(tk.l[[3]], rownames(tukey.results[[j]]))
tk.l[[4]] <- c(tk.l[[4]], unname(tukey.results[[j]][, 'p adj']))
}
length(tukey.results)
nrow(tukey.results[[]])
#variable to the left of ":" is always B
rowl <- c() #row numbers of comparisons that are useful, only same B is useful
for (j in 1:nrow(tukey.results[[3]])) {
split_rowname <- strsplit(strsplit(rownames(tukey.results[[3]])[j], split = "-")[[1]], split = ":")
if (split_rowname[[1]][1] == split_rowname[[2]][1]) {
# print(rownames(tukey.results[[3]])[j])
rowl <- c(rowl, j)
}
}
for (j in 1:2) {
itrt = switch(j, B, A)
tk.l.useful[[1]] <- c(tk.l.useful[[1]], rep(i, nrow(tukey.results[[j]])))
tk.l.useful[[2]] <- c(tk.l.useful[[2]], rep(itrt, nrow(tukey.results[[j]])))
tk.l.useful[[3]] <- c(tk.l.useful[[3]], rownames(tukey.results[[j]]))
tk.l.useful[[4]] <- c(tk.l.useful[[4]], unname(tukey.results[[j]][, 'p adj']))
}
tk.l.useful[[1]] <- c(tk.l.useful[[1]], rep(i, length(rowl)))
tk.l.useful[[2]] <- c(tk.l.useful[[2]], rep(paste(B,':', A, sep=''), length(rowl)))
tk.l.useful[[3]] <- c(tk.l.useful[[3]], rownames(tukey.results[[3]][rowl, ]))
tk.l.useful[[4]] <- c(tk.l.useful[[4]], unname(tukey.results[[3]][rowl, 'p adj']))
}
# # filter for interactions that are significant
# tk.l.sig[[i]] <- tukey.df[rowl, ] %>% filter(`p adj`<= 0.05)
anv <- as.data.frame(matrix(anv.l, ncol = 3, byrow=TRUE))
colnames(anv) <- c('group', 'subgroup', 'p.val')
tk <- data.frame(group = tk.l[[1]],
subgroup = tk.l[[2]],
comparison = tk.l[[3]],
p.val = tk.l[[4]])
tk.useful <- data.frame(group = tk.l.useful[[1]],
subgroup = tk.l.useful[[2]],
comparison = tk.l.useful[[3]],
p.val = tk.l.useful[[4]])
tk.sig <- tk.useful %>% filter(`p.val`<= 0.05)
# save results
if(!is.null(output_path)) {
saveRDS(anv, paste(output_path,"anova.", A, ".", B, ".RDS", sep=''))
saveRDS(tk, paste(output_path,"tukey.", A, ".", B, ".RDS", sep=''))
saveRDS(tk.useful, paste(output_path,"tukey.sig.useful.", A, ".", B, ".RDS", sep=''))
saveRDS(tk.sig, paste(output_path,"tukey.sig.", A, ".", B, ".RDS", sep=''))
write.csv(anv, paste(output_path,"anova.", A, ".", B, ".csv", sep=''), row.names = FALSE)
write.csv(tk, paste(output_path,"tukey.", A, ".", B, ".csv", sep=''), row.names = FALSE)
write.csv(tk.useful, paste(output_path,"tukey.sig.useful.", A, ".", B, ".csv", sep=''), row.names = FALSE)
write.csv(tk.sig, paste(output_path,"tukey.sig.", A, ".", B, ".csv", sep=''), row.names = FALSE)
}
return(list(anv = anv, tk = tk, tk.useful = tk.useful, tk.sig = tk.sig))
}
A <- 'genotype'
B <- 'antibody'
dv <- 'Mean'
df <- df.group
group <- 'label' #label or antibody, if B is antibody, then group is label, if B is label, then group is antibody
#test
new.test <- twanova(A, B, dv, df, group, output_path)
View(new.test)
anv.df <- as.data.frame(new.test$anv)
View(anv.df)
write.csv(anv.df,paste(output_path,"ANOVAgenotype.csv"))
anv.df.test <- new.test$anv
View(anv.df.test)
head(anv.df.test)
tk.df <- new.test$tk
View(tk.df)
tk.useful <- new.test$tk.useful
View(tk.useful)
anv.df <- new.test$anv
write.csv(anv.df,paste(output_path,"ANOVAgenotype.csv"))
tk.df <- new.test$tk
write.csv(tk.df,paste(output_path,"TukeyTestsgenotype.csv"))
tk.useful <- new.test$tk.useful
tk.sig.df <- new.test$tk.sig
write.csv(tk.sig.df,paste(output_path,"TukeyTestSiggenotype.csv"))
output_path
#function
twanova <- function(A,  #one of independent variables, i.e. one of c('batch', 'genotype', 'exdate', 'age')
B, #antibody or label
dv, #one of dependent variable, antibody mean value here
df, #input dataframe
group, #group to loop through and to use as sample, antibody or label.
output_path = NULL) { #if output_path is given, save stats lists
# If B=antibody, group=label; if B=label, group=antibody
#lists to store stats
anv.l <- c() #store anova
tk.l <- vector( "list" , 4) #store tukey
tk.l.useful <- vector( "list" , 4) #store useful comparison of tukey in interaction
tk.l.sig <- c() #store significant outcome (p<0.05) within useful tukey comparison in interaction
# i <- "Glia Lineage"
for (i in unique(unlist(df[, group]))){
# run 2 way anova with interaction effect
# subset the cell type
df.group.sub <- df[which(df[, group]== i), ]
df.group.sub <- as.data.frame(df.group.sub)
res.aov2 <- aov(df.group.sub[, dv] ~ df.group.sub[, B] * df.group.sub[, A]) #diff
anv.l <- c(anv.l,
i, B, summary(res.aov2)[[1]][["Pr(>F)"]][1],
i, A, summary(res.aov2)[[1]][["Pr(>F)"]][2],
i, paste(B,':', A, sep=''), summary(res.aov2)[[1]][["Pr(>F)"]][3]
)
# now the posthoc tests
tukey.results <- TukeyHSD(res.aov2)
for (j in 1:length(tukey.results)) {
itrt = switch(j, B, A, paste(B,':', A, sep=''))
tk.l[[1]] <- c(tk.l[[1]], rep(i, nrow(tukey.results[[j]])))
tk.l[[2]] <- c(tk.l[[2]], rep(itrt, nrow(tukey.results[[j]])))
tk.l[[3]] <- c(tk.l[[3]], rownames(tukey.results[[j]]))
tk.l[[4]] <- c(tk.l[[4]], unname(tukey.results[[j]][, 'p adj']))
}
length(tukey.results)
nrow(tukey.results[[]])
#variable to the left of ":" is always B
rowl <- c() #row numbers of comparisons that are useful, only same B is useful
for (j in 1:nrow(tukey.results[[3]])) {
split_rowname <- strsplit(strsplit(rownames(tukey.results[[3]])[j], split = "-")[[1]], split = ":")
if (split_rowname[[1]][1] == split_rowname[[2]][1]) {
# print(rownames(tukey.results[[3]])[j])
rowl <- c(rowl, j)
}
}
for (j in 1:2) {
itrt = switch(j, B, A)
tk.l.useful[[1]] <- c(tk.l.useful[[1]], rep(i, nrow(tukey.results[[j]])))
tk.l.useful[[2]] <- c(tk.l.useful[[2]], rep(itrt, nrow(tukey.results[[j]])))
tk.l.useful[[3]] <- c(tk.l.useful[[3]], rownames(tukey.results[[j]]))
tk.l.useful[[4]] <- c(tk.l.useful[[4]], unname(tukey.results[[j]][, 'p adj']))
}
tk.l.useful[[1]] <- c(tk.l.useful[[1]], rep(i, length(rowl)))
tk.l.useful[[2]] <- c(tk.l.useful[[2]], rep(paste(B,':', A, sep=''), length(rowl)))
tk.l.useful[[3]] <- c(tk.l.useful[[3]], rownames(tukey.results[[3]][rowl, ]))
tk.l.useful[[4]] <- c(tk.l.useful[[4]], unname(tukey.results[[3]][rowl, 'p adj']))
}
# # filter for interactions that are significant
# tk.l.sig[[i]] <- tukey.df[rowl, ] %>% filter(`p adj`<= 0.05)
anv <- as.data.frame(matrix(anv.l, ncol = 3, byrow=TRUE))
colnames(anv) <- c('group', 'subgroup', 'p.val')
tk <- data.frame(group = tk.l[[1]],
subgroup = tk.l[[2]],
comparison = tk.l[[3]],
p.val = tk.l[[4]])
tk.useful <- data.frame(group = tk.l.useful[[1]],
subgroup = tk.l.useful[[2]],
comparison = tk.l.useful[[3]],
p.val = tk.l.useful[[4]])
tk.sig <- tk.useful %>% filter(`p.val`<= 0.05)
# save results
if(!is.null(output_path)) {
saveRDS(anv, paste(output_path,"anova.", A, ".", B, ".RDS", sep=''))
saveRDS(tk, paste(output_path,"tukey.", A, ".", B, ".RDS", sep=''))
saveRDS(tk.useful, paste(output_path,"tukey.sig.useful.", A, ".", B, ".RDS", sep=''))
saveRDS(tk.sig, paste(output_path,"tukey.sig.", A, ".", B, ".RDS", sep=''))
write.csv(anv, paste(output_path,"anova.", A, ".", B, ".csv", sep=''), row.names = FALSE)
write.csv(tk, paste(output_path,"tukey.", A, ".", B, ".csv", sep=''), row.names = FALSE)
write.csv(tk.sig, paste(output_path,"tukey.sig.useful.", A, ".", B, ".csv", sep=''), row.names = FALSE)
write.csv(tk.useful, paste(output_path,"tukey.sig.", A, ".", B, ".csv", sep=''), row.names = FALSE)
}
return(list(anv = anv, tk = tk, tk.useful = tk.useful, tk.sig = tk.sig))
}
#parameters
A <- 'genotype'
B <- 'antibody'
dv <- 'Mean'
df <- df.group
group <- 'label' #label or antibody, if B is antibody, then group is label, if B is label, then group is antibody
#test
test <- twanova(A, B, dv, df, group, output_path)
A <- 'genotype'
B <- 'antibody'
dv <- 'Mean'
df <- df.group
group <- 'label' #label or antibody, if B is antibody, then group is label, if B is label, then group is antibody
#test
geneotype.stats <- twanova(A, B, dv, df, group, output_path)
View(df.group)
A <- 'age'
B <- 'antibody'
dv <- 'Mean'
df <- df.group
group <- 'label' #label or antibody, if B is antibody, then group is label, if B is label, then group is antibody
#test
age.stats <- twanova(A, B, dv, df, group, output_path)
output_path
View(df.group)
output_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/PaperFigures/Statists"
A <- 'batch'
B <- 'antibody'
dv <- 'Mean'
df <- df.group
group <- 'label' #label or antibody, if B is antibody, then group is label, if B is label, then group is antibody
#test
batch.stats <- twanova(A, B, dv, df, group, output_path)
View(df.group)
A <- 'exdate'
B <- 'antibody'
dv <- 'Mean'
df <- df.group
group <- 'label' #label or antibody, if B is antibody, then group is label, if B is label, then group is antibody
#test
exdate.stats <- twanova(A, B, dv, df, group, output_path)
