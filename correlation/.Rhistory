Idents(seu) <- "HTO_maxID"
# look at expression
# Hashtag1 and 2
RidgePlot(seu, assay = "HTO", features = rownames(seu[["HTO"]])[1:2], ncol = 2)
# Hashtag 3 and 4
RidgePlot(seu, assay = "HTO", features = rownames(seu[["HTO"]])[3:4], ncol = 2)
# Hashtag 5 and 6 (the ones from the first experiment)
RidgePlot(seu, assay = "HTO", features = rownames(seu[["HTO"]])[5:6], ncol = 2)
?RidgePlot
RidgePlot(seu, assay = "HTO", features = rownames(seu[["HTO"]])[5:6], ncol = 2)
?RidgePlot
Idents(seu) <- "HTO_maxID"
# look at expression
RidgePlot(seu, features = "HTO")
Idents(seu) <- "HTO_maxID"
# look at expression
RidgePlot(seu, assay = "HTO", features = rownames(seu[["HTO"]])[1:2]), group.by = "HTO_maxID")
Idents(seu) <- "HTO_maxID"
# look at expression
RidgePlot(seu, assay = "HTO", features = rownames(seu[["HTO"]])[1:2], group.by = "HTO_maxID")
#DotPlot(seu, )
View(seu)
# must set assay to HTO
DefaultAssay(seu) <- "HTO"
# normalize HTO data
seu<- NormalizeData(seu)
# find features in HTO data
seu <- FindVariableFeatures(seu, selection.method = "mean.var.plot")
seu <- ScaleData(seu, features = VariableFeatures(seu))
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.99)
table(seu@meta.data$HTO_classification.global)
# Doublet Negative  Singlet
#   202     4757     3044
# not great - too many negative
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.999)
table(seu@meta.data$HTO_classification.global)
# Doublet Negative  Singlet
#     123     5379     2501
# worse
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.98)
table(seu@meta.data$HTO_classification.global)
#  Doublet Negative  Singlet
#   252     4512     3239
# a little better
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.97)
table(seu@meta.data$HTO_classification.global)
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.90)
table(seu@meta.data$HTO_classification.global)
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.88)
table(seu@meta.data$HTO_classification.global)
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.87)
table(seu@meta.data$HTO_classification.global)
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.85)
table(seu@meta.data$HTO_classification.global)
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.84)
table(seu@meta.data$HTO_classification.global)
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.82)
table(seu@meta.data$HTO_classification.global)
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.80)
table(seu@meta.data$HTO_classification.global)
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.795)
table(seu@meta.data$HTO_classification.global)
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.79)
table(seu@meta.data$HTO_classification.global)
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.78)
table(seu@meta.data$HTO_classification.global)
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.77)
table(seu@meta.data$HTO_classification.global)
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.70)
table(seu@meta.data$HTO_classification.global)
# most singlets recovered
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.80)
table(seu@meta.data$HTO_classification.global)
# look more at the hashtags
# shows the pairings of doublets
table(seu@meta.data$HTO_classification)
# shows the cell counts per ID
table(seu@meta.data$hash.ID)
# save this info
cell.counts <- table(seu@meta.data$hash.ID)
# output path - have this as an input for the function
output <- "/Users/rhalenathomas/Documents/Data/scRNAseq/Darkgenome/Dec2021_6cellines/Analysis/"
samplename <- "Sample1"
write.csv(cell.counts, paste(output,samplename,"HTOcountsdemult.csv"))
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.99)
table(seu@meta.data$HTO_classification.global)
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.999)
table(seu@meta.data$HTO_classification.global)
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.9999)
table(seu@meta.data$HTO_classification.global)
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.995)
table(seu@meta.data$HTO_classification.global)
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.9995)
table(seu@meta.data$HTO_classification.global)
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.9996)
table(seu@meta.data$HTO_classification.global)
seu <- HTODemux(seu, assay = "HTO", positive.quantile = 0.99955)
table(seu@meta.data$HTO_classification.global)
table(seu@meta.data$HTO_classification)
# shows the cell counts per ID
table(seu@meta.data$hash.ID)
# save this info
cell.counts <- table(seu@meta.data$hash.ID)
# output path - have this as an input for the function
output <- "/Users/rhalenathomas/Documents/Data/scRNAseq/Darkgenome/Dec2021_6cellines/Analysis/"
samplename <- "Sample1"
write.csv(cell.counts, paste(output,samplename,"HTOcountsdemult.csv"))
Idents(seu) <- "HTO_maxID"
# look at expression
RidgePlot(seu, assay = "HTO", features = rownames(seu[["HTO"]])[1:2], group.by = "HTO_maxID")
#DotPlot(seu, )
Idents(seu) <- "HTO_maxID"
# look at expression
RidgePlot(seu, assay = "HTO", features = rownames(seu[["HTO"]])[1:6], group.by = "HTO_maxID", ncol =2)
#DotPlot(seu, )
FeatureScatter(seu,feature1 = "B0251-TotalSeqB", feature2 = "B0252-TotalSeqB")
View(seu)
Idents(seu) <- "hash.ID"
FeatureScatter(seu,feature1 = "B0251-TotalSeqB", feature2 = "B0252-TotalSeqB")
Idents(seu) <- "HTO_classification.global"
VlnPlot(seu, features = "nCount_RNA", pt.size = 0.1, log = TRUE)
VlnPlot(seu, features = "nCount_RNA", pt.size = 0.01, log = TRUE)
png(paste(output,samplename,"nCounts_demult_groups.png",sep=""))
VlnPlot(seu, features = "nCount_RNA", pt.size = 0.01, log = TRUE)
dev.off()
HTOHeatmap(seu, assay = "HTO")
DoHeatmap(seu, group.by = "hash.ID")
DoHeatmap(seu)
DoHeatmap(seu, features = rownames(seu[["HTO"]])[1:6])
DoHeatmap(seu, features = rownames(seu[["HTO"]])[1:6], group.by = "hash.ID")
png(paste(output,samplename,"HeatmapHashID.png",sep=""))
DoHeatmap(seu, features = rownames(seu[["HTO"]])[1:6], group.by = "hash.ID")
dev.off()
DotPlot(seu, group.by = "hash.ID", features = rownames(seu[["HTO"]])[1:6])
DotPlot(seu, group.by = "hash.ID", features = rownames(seu[["HTO"]])[1:6]) + theme(axis.text.x = element_text(angle = 90))
png(paste(output,samplename,"DotPlotHashID.png",sep=""))
DotPlot(seu, group.by = "hash.ID", features = rownames(seu[["HTO"]])[1:6]) + theme(axis.text.x = element_text(angle = 90))
dev.off()
# keep the other object
seu2 <- seu
seu <- MULTIseqDemux(seu, assay = "HTO", quantile = 0.16, autoThresh = TRUE, maxiter = 5, qrange = seq(from = 0.14, to = 0.18, by = 0.005))
# check results
table(seu$MULTI_ID)
seu <- MULTIseqDemux(seu, assay = "HTO", quantile = 0.7, autoThresh = TRUE, maxiter = 5)
table(seu$MULTI_ID)
# keep the other object
#seu2 <- seu
seu <- MULTIseqDemux(seu, assay = "HTO", quantile = 0.9, autoThresh = TRUE, maxiter = 5)
#qrange = seq(from = 0.14, to = 0.18, by = 0.005
# check results
table(seu$MULTI_ID)
# keep the other object
#seu2 <- seu
seu <- MULTIseqDemux(seu, assay = "HTO", quantile = 0.99, autoThresh = TRUE, maxiter = 5)
#qrange = seq(from = 0.14, to = 0.18, by = 0.005
# check results
table(seu$MULTI_ID)
seu <- MULTIseqDemux(seu, assay = "HTO",qrange = seq(from = 0.1, to = 0.999, by = 0.1), maxiter = 5)
table(seu$MULTI_ID)
seu <- MULTIseqDemux(seu, assay = "HTO", quantile = 0.99, autoThresh = TRUE, maxiter = 5)
table(seu$MULTI_ID)
seu <- MULTIseqDemux(seu, assay = "HTO", quantile = 0.9, autoThresh = TRUE, maxiter = 5)
table(seu$MULTI_ID)
# keep the other object
#seu2 <- seu
#seu <- MULTIseqDemux(seu, assay = "HTO", quantile = 0.9, autoThresh = TRUE, maxiter = 5)
table(seu$MULTI_ID)
seu <- MULTIseqDemux(seu, assay = "HTO",quantile = 0.9, autoThresh = FALSE, qrange = seq(from = 0.1, to = 0.99, by = 0.05), maxiter = 5)
#qrange = seq(from = 0.14, to = 0.18, by = 0.005
# check results
table(seu$MULTI_ID)
seu <- MULTIseqDemux(seu, assay = "HTO", quantile = 0.9, autoThresh = TRUE, maxiter = 5)
table(seu$MULTI_ID)
table(seu$MULTI_ID)
# try another condition
seu <- MULTIseqDemux(seu, assay = "HTO", quantile = 0.91, autoThresh = TRUE, maxiter = 5) # better condition than below - use this one
table(seu$MULTI_ID)
# save all the exploration with the MULTIseqDemux plots and the table
write(table(seu$MULTI_ID), paste(output,samplename,"MULTIseqDemuxHTOcounts.csv",sep=""))
Idents(seu) <- "HTO_maxID"
# look at expression
png(paste(output,samplename,"RidgeplotHTOMSD.png",sep=""))
RidgePlot(seu, assay = "HTO", features = rownames(seu[["HTO"]])[1:6], group.by = "HTO_maxID", ncol =2)
dev.off()
# doubles should have more nCount_RNA should be lower in negative and higher in singlets
Idents(seu) <- "HTO_classification.global"
png(paste(output,samplename,"nCounts_demult_groupsMSD.png",sep=""))
VlnPlot(seu, features = "nCount_RNA", pt.size = 0.01, log = TRUE)
dev.off()
png(paste(output,samplename,"HeatmapHashIDMSD.png",sep=""))
DoHeatmap(seu, features = rownames(seu[["HTO"]])[1:6], group.by = "hash.ID")
dev.off()
png(paste(output,samplename,"DotPlotHashIDMSD.png",sep=""))
DotPlot(seu, group.by = "hash.ID", features = rownames(seu[["HTO"]])[1:6]) + theme(axis.text.x = element_text(angle = 90))
dev.off()
View(seu)
View(seu)
RidgePlot(seu, assay = "HTO", features = rownames(seu[["HTO"]])[1:6], group.by = "HTO_maxID", ncol =2)
RidgePlot(seu, assay = "HTO", features = rownames(seu[["HTO"]])[1:6], group.by = "MULTI_ID", ncol =2)
unique(seu@meta.data$MULTI_ID)
table(seu$MULTI_ID)
table(seu$hash.ID)
#unique(seu@meta.data$MULTI_ID)
Idents <- "MULTI_ID"
# note the hash.ID is not the same as the MULTI_ID
# new labels need to be in the same order
# there might be a way to match original name with the new name
HTO.ids <- c("AIW002","SNCA-A53T","GBA-KO","Parkin-KO","PINK1-KO","SNCA-KO","Doublet","Negative")
names(HTO.ids) <- levels(seu)
seu <- RenameIdents(seu, HTO.ids)
# save the labels to meta data
seu[["CellLines"]] <- Idents(seu)
Idents <- "MULTI_ID"
HTO.ids <- c("AIW002","SNCA-A53T","GBA-KO","Parkin-KO","PINK1-KO","SNCA-KO","Doublet","Negative")
names(HTO.ids) <- levels(seu)
seu <- RenameIdents(seu, HTO.ids)
View(seu)
Idents <- "MULTI_ID"
# note the hash.ID is not the same as the MULTI_ID
# new labels need to be in the same order
# there might be a way to match original name with the new name
HTO.ids <- c("AIW002","SNCA-A53T","GBA-KO","Parkin-KO","PINK1-KO","SNCA-KO","Doublet","Negative")
names(HTO.ids) <- levels(seu)
seu <- RenameIdents(seu, HTO.ids)
View(seu)
table(seu$MULTI_ID)
table(seu$HTO_maxID)
table(seu$MULTI_classification)
table(seu$MULTI_ID)
View(seu)
Idents <- "MULTI_ID"
# note the hash.ID is not the same as the MULTI_ID
# new labels need to be in the same order
# there might be a way to match original name with the new name
HTO.ids <- c("AIW002","SNCA-A53T","GBA-KO","Parkin-KO","PINK1-KO","SNCA-KO","Doublet","Negative")
?RenameIdents
head(seu$HTO_maxID)
head(seu$MULTI_ID)
unique(seu@meta.data$MULTI_ID)
multi.names <- unique(seu@meta.data$MULTI_ID)
multi.names
table(seu$MULTI_ID)
seu <- RenameIdents(object = seu, old.ident.name = old.names, new.ident.name = new.names)
old.names <- c("B0251-TotalSeqB","B0252-TotalSeqB","B0253-TotalSeqB","B0254-TotalSeqB","B0255-TotalSeqB","B0256-TotalSeqB","Doublet","Negative")
new.names <- c("AIW002","SNCA-A53T","GBA-KO","Parkin-KO","PINK1-KO","SNCA-KO","Doublet","Negative")
seu <- RenameIdents(object = seu, old.ident.name = old.names, new.ident.name = new.names)
?RenameIdents
Idents <- "MULTI_ID"
seu <- RenameIdents(object = seu, old.ident.name = "B0254-TotalSeqB", new.ident.name = "Parkin-KO")
table(seu$CellLines)
table(seu$MULTI_ID)
Idents(seu) <- "MULTI_ID"
cluster.ids <- c("B0251-TotalSeqB","B0252-TotalSeqB","B0253-TotalSeqB","B0254-TotalSeqB","B0255-TotalSeqB","B0256-TotalSeqB","Doublet","Negative")
names(cluster.ids) <- levels(seu)
seu <- RenameIdents(seu, cluster.ids)
# save the labels to meta data
seu[["Lables"]] <- Idents(seu)
View(seu)
tabel(seu$CellLines)
table(seu$CellLines)
table(seu$Labels)
table(seu$Lables)
Idents(seu) <- "MULTI_ID"
cluster.ids <- c("AIW002","SNCA-A53T","GBA-KO","Parkin-KO","PINK1-KO","SNCA-KO","Doublet","Negative")
names(cluster.ids) <- levels(seu)
seu <- RenameIdents(seu, cluster.ids)
# save the labels to meta data
seu[["Lables"]] <- Idents(seu)
# for some reason it has worked here
table(seu$Lables)
write(table(seu$Lables), paste(output,samplename,"MULTIseqDemuxCelltypeCounts.csv",sep=""))
table(seu$Lables)
View(seu2)
saveRDS(seu, paste(output, "DemultSample1.Rds"))
# change to RNA
DefaultAssay(seu) <- "RNA"
seu <- NormalizeData(seu)
seu <- ScaleData(seu)
seu <- FindVariableFeatures(seu, selection.method = "vst", nfeatures = 2500)
seu <- RunPCA(seu)  # should use variable ft by default
DimPlot(seu, reduction = "pca")
ElbowPlot(seu)
VlnPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), cols = 2)
VlnPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"))
View(seu)
View(seu)
# by cell line
VlnPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"))
# all together
Idents <- "orig.ident"
VlnPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"))
Idents <- "orig.ident"
View(seu)
Idents(seu) <- "orig.ident"
VlnPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"))
?VlnPlot
VlnPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), cols = 2)
VlnPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), ncol = 2)
VlnPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), ncol = 2, log = TRUE)
VlnPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), ncol = 2, log = FALSE, y.max = 4)
VlnPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), ncol = 2, log = FALSE, y.max = 4, pt.size = 0.01)
png(paste(output,"VlnALDH1A1.allcells.png"))
VlnPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), ncol = 2, log = FALSE, y.max = 4, pt.size = 0.01)
dev.off()
png(paste(output,"VlnALDH1A1.allcells.png"), height = 600, width = 400)
VlnPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), ncol = 2, log = FALSE, y.max = 4, pt.size = 0.01)
dev.off()
Idents(seu) <- "orig.ident"
png(paste(output,"VlnALDH1A1.allcells.png"), height = 1200, width = 1000)
VlnPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), ncol = 2, log = FALSE, y.max = 5, pt.size = 0.001)
dev.off()
DotPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"))
VlnPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), ncol = 2, log = FALSE, pt.size = 0.001, slot = "scale.data")
VlnPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), ncol = 2, log = TRUE, pt.size = 0.001, slot = "scale.data")
Idents(seu) <- "orig.ident"
png(paste(output,"VlnALDH1A1.allcells.png"), height = 600, width = 500)
VlnPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), ncol = 2, log = TRUE, pt.size = 0.001, slot = "scale.data")
dev.off()
DotPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"))
DotPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), slot = "scale.data")
DoHeatmap(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"))
RidgePlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"))
?RidgePlot
RidgePlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), slot = "scale.data", ncol = 2)
RidgePlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), slot = "scale.data", ncol = 2, y.max = 5)
RidgePlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), slot = "scale.data", ncol = 2, y.max = 1)
RidgePlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), slot = "scale.data", ncol = 2, y.max = 20)
RidgePlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), slot = "scale.data", ncol = 2, y.max = 20,group.by = "Lables")
DoHeatmap(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH")slot = "scale.data", group_by = "Labels")
DoHeatmap(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), slot = "scale.data", group_by = "Labels")
DoHeatmap()
?DoHeatmap
DoHeatmap(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), slot = "scale.data", group.by = "Labels")
DoHeatmap(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), slot = "scale.data", group.by = "Lables")
DotPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), slot = "scale.data", group.by = "Lables")
DotPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), group.by = "Lables")
DotPlot(seu, features = c("ALDH1A1","TH"), group.by = "Lables")
png(paste(output,"DotPlotDH1A1.allcells.png"), height = 600, width = 800)
DotPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), group.by = "Lables")
dev.off()
squrt(8004)
sqrt(8004)
?FindNeighbors
# sqrt 8004 is 89 us for kn
# from elbow plot 12 PC looks good
seu <- FindNeighbors(seu, dims = 1:12, k.param = 89)
seu <- FindClusters(seu, resolution = c(0,0.1, 0.25, 0.5,0.6,1))
?clustree
View(seu)
clustree(seu, prefix = "RNA_snn_res.")
# see the UMAP
DimPlot(seu, reduction = "umap")
# see the UMAP
RunUMAP(seu, dims = 1:12, n.neighbors = 89)
DimPlot(seu, reduction = "umap")
# see the UMAP
seu <- RunUMAP(seu, dims = 1:12, n.neighbors = 89)
DimPlot(seu, reduction = "umap")
DimPlot(seu, reduction = "umap", group.by = "RNA_snn_.res.01")
DimPlot(seu, reduction = "umap", group.by = "RNA_snn.res.01")
DimPlot(seu, reduction = "umap", group.by = "RNA_snn_res.0.1")
DimPlot(seu, reduction = "umap", group.by = "RNA_snn_res.0.25")
DimPlot(seu, reduction = "umap", group.by = "RNA_snn_res.0.5")
DimPlot(seu, reduction = "umap")
# NeuN RBFOX3
neurons <- c("MAP2", "TUJ1","RBFOX3","SYT1","CD24","NCAM1")
DoHeatmap(seu,features = neurons)
DimPlot(seu, reduction = "umap", label = TRUE)
# NeuN RBFOX3
neurons <- c("MAP2", "TUBB3","RBFOX3","SYT1","CD24","NCAM1", "CD200","DRD1")
DoHeatmap(seu,features = neurons)
FeaturePlot()
# NeuN RBFOX3
neurons <- c("MAP2", "TUBB3","RBFOX3","SYT1","CD24","NCAM1", "CD200","TH")
DoHeatmap(seu,features = neurons)
FeaturePlot()
# NeuN RBFOX3
neurons <- c("MAP2", "TUBB3","RBFOX3","SYT1","CD24","NCAM1", "CD200","TH")
DoHeatmap(seu,features = neurons, group.by = "RNA_snn_res.0.25")
#FeaturePlot()
# NeuN RBFOX3
neurons <- c("MAP2", "TUBB3","RBFOX3","SYT1","CD24","NCAM1", "CD200","TH")
DoHeatmap(seu,features = neurons, group.by = "RNA_snn_res.0.5")
#FeaturePlot()
FeaturePlot(seu, features = "TH")
FeaturePlot(seu, features = "RBFOX3")
FeaturePlot(seu, features = "TUBB3")
FeaturePlot(seu, features = "SYT1")
FeaturePlot(seu, features = "PSD95")
FeaturePlot(seu, features = "DLG4")
DimPlot(seu, reduction = "umap", group.by = "Lables")
# NeuN RBFOX3
neurons <- c("MAP2","TUBB3","RBFOX3","SYT1","DLG4", "CD200","TH","ALDH1A1","IFNAR1","IFNAR2")
DoHeatmap(seu,features = neurons, group.by = "RNA_snn_res.0.5")
FeaturePlot(seu, features = "TH")
FeaturePlot(seu, features = "RBFOX3")
FeaturePlot(seu, features = "TUBB3")
FeaturePlot(seu, features = "SYT1")
FeaturePlot(seu, features = "DLG4") # PSD95
?FeaturePlot
FeaturePlot(seu, features = neurons, ncol = 3, slot = 'scale.data',min.cutoff = 'q1', max.cutoff ='99',label.size = 1)+ theme(plot.title = element_text(size = 0.1))
# NeuN RBFOX3
# PSD95 is DLG4
neurons <- c("TUBB3","RBFOX3","SYT1","DLG4", "CD200","TH","ALDH1A1","IFNAR1","IFNAR2","MAP2","GRIN2A","GRIA2")
DoHeatmap(seu,features = neurons, group.by = "RNA_snn_res.0.5")
FeaturePlot(seu, features = neurons, ncol = 3, slot = 'scale.data',min.cutoff = 'q1', max.cutoff ='99',label.size = 1)+ theme(plot.title = element_text(size = 0.1))
FeaturePlot(seu, features = neurons, ncol = 3, slot = 'scale.data',min.cutoff = 'q1', max.cutoff ='98',label.size = 1)+ theme(plot.title = element_text(size = 0.1))
DoHeatmap(seu,features = neurons, group.by = "RNA_snn_res.0.5")
# NeuN RBFOX3
# PSD95 is DLG4
neurons <- c("TUBB3","RBFOX3","SYT1","DLG4", "CD200","TH","ALDH1A1","IFNAR1","IFNAR2","MAP2","GRIN2A","GRIA2")
png(paste(output,"HeatmapRes05neuron.png"), height = 500, width = 600)
DoHeatmap(seu,features = neurons, group.by = "RNA_snn_res.0.5")
dev.off()
png(paste(output,"FeatureNeuronMarkers.png"), height = 2500, width = 2000)
FeaturePlot(seu, features = neurons, ncol = 3, slot = 'scale.data',min.cutoff = 'q1', max.cutoff ='98',label.size = 1)+ theme(plot.title = element_text(size = 0.1))
dev.off()
png(paste(output,"UMAPclustersRes05.png"), height = 800, width = 1000)
DimPlot(seu, reduction = "umap", group.by = "RNA_snn_res.0.5")
dev.off()
png(paste(output,"FeatureNeuronMarkers.png"), height = 2000, width = 2500)
FeaturePlot(seu, features = neurons, ncol = 3, slot = 'scale.data',min.cutoff = 'q1', max.cutoff ='98',label.size = 1)+ theme(plot.title = element_text(size = 0.1))
dev.off()
# all groups of cells
png(paste(output,"HeatmapbyCellLine.png"), height = 500, width = 600)
DoHeatmap(seu,features = neurons, group.by = "Lables")
dev.off()
png(paste(output,"DotPlotbyCellLine.png"), height = 500, width = 600)
DoPlot(seu,features = neurons, group.by = "Lables")
png(paste(output,"DotPlotbyCellLine.png"), height = 500, width = 600)
DotPlot(seu,features = neurons, group.by = "Lables")
dev.off()
png(paste(output,"UMAPcellLines.png"), height = 800, width = 1000)
DimPlot(seu, reduction = "umap", group.by = "Lables")
dev.off()
DoHeatmap(seu,features = neurons, group.by = "Lables")
DotPlot(seu,features = neurons, group.by = "Lables")
png(paste(output,"DotPlotDH1A1.allcells.png"), height = 600, width = 800)
DotPlot(seu, features = c("ALDH1A1","IFNAR1","IFNAR2","TH"), group.by = "Lables")+ theme(axis.text.x = element_text(angle = 90))
dev.off()
png(paste(output,"DotPlotbyCellLine.png"), height = 500, width = 600)
DotPlot(seu,features = neurons, group.by = "Lables")+ theme(axis.text.x = element_text(angle = 90))
dev.off()
DotPlot(seu,features = neurons, group.by = "Lables")+ theme(axis.text.x = element_text(angle = 90))
GOI <- c("PRNK","PINK1","GBA1","SNCA")
png(paste(output,"DotPlotbyCellLineGOI.png"), height = 500, width = 600)
DotPlot(seu,features = GOI, group.by = "Lables")+ theme(axis.text.x = element_text(angle = 90))
dev.off()
GOI <- c("PRKN","PINK1","GBA","SNCA")
png(paste(output,"DotPlotbyCellLineGOI.png"), height = 500, width = 600)
DotPlot(seu,features = GOI, group.by = "Lables")+ theme(axis.text.x = element_text(angle = 90))
dev.off()
DotPlot(seu,features = GOI, group.by = "Lables")+ theme(axis.text.x = element_text(angle = 90))
png(paste(output,"HeatmapbyCellLineGOI.png"), height = 500, width = 600)
DoHeatmap(seu,features = GOI, group.by = "Lables")
dev.off()
DoHeatmap(seu,features = GOI, group.by = "Lables")
GOI <- c("PRKN","PINK1","GBA","SNCA","LRRK2")
DotPlot(seu,features = GOI, group.by = "Lables")+ theme(axis.text.x = element_text(angle = 90))
GOI <- c("SOX1","SOX2","NES","PROM1")
png(paste(output,"DotPlotbyCellLineNeuralStemMarkers.png"), height = 500, width = 600)
DotPlot(seu,features = GOI, group.by = "Lables")+ theme(axis.text.x = element_text(angle = 90))
dev.off()
png(paste(output,"DotPlotbyClusterNeuralStemMarkers.png"), height = 500, width = 600)
DotPlot(seu,features = GOI, group.by = "Lables")+ theme(axis.text.x = element_text(angle = 90))
dev.off()
DotPlot(seu,features = GOI, group.by = "Lables")+ theme(axis.text.x = element_text(angle = 90))
DotPlot(seu,features = GOI, group.by = "Lables")+ theme(axis.text.x = element_text(angle = 90))
png(paste(output,"DotPlotbyClusterNeuralStemMarkers.png"), height = 500, width = 600)
DotPlot(seu,features = GOI, group.by = "RNA_snn_res.0.5")+ theme(axis.text.x = element_text(angle = 90))
dev.off()
DotPlot(seu,features = GOI, group.by = "Lables")+ theme(axis.text.x = element_text(angle = 90))
DotPlot(seu,features = GOI, group.by = "RNA_snn_res.0.5")+ theme(axis.text.x = element_text(angle = 90))
astro <- c("CD44","GFAP","AQP4","S100B","ALDH1L1","VIM")
png(paste(output,"DotPlotbyCellLineGliaMarkers.png"), height = 500, width = 600)
DotPlot(seu,features = astro, group.by = "Lables")+ theme(axis.text.x = element_text(angle = 90))
dev.off()
png(paste(output,"DotPlotbyClusterGliaMarkers.png"), height = 500, width = 600)
DotPlot(seu,features = astro, group.by = "RNA_snn_res.0.5")+ theme(axis.text.x = element_text(angle = 90))
dev.off()
DotPlot(seu,features = GOI, group.by = "Lables")+ theme(axis.text.x = element_text(angle = 90))
DotPlot(seu,features = GOI, group.by = "RNA_snn_res.0.5")+ theme(axis.text.x = element_text(angle = 90))
DotPlot(seu,features = astro, group.by = "RNA_snn_res.0.5")+ theme(axis.text.x = element_text(angle = 90))
DotPlot(seu,features = GOI, group.by = "Lables")+ theme(axis.text.x = element_text(angle = 90))
DotPlot(seu,features = GOI, group.by = "RNA_snn_res.0.5")+ theme(axis.text.x = element_text(angle = 90))
DotPlot(seu,features = astro, group.by = "Lables")+ theme(axis.text.x = element_text(angle = 90))
DotPlot(seu,features = astro, group.by = "RNA_snn_res.0.5")+ theme(axis.text.x = element_text(angle = 90))
stats_list <- readRDS(paste(output_path,input_name,clust_method,'statslist.Rds',sep=""))
output_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outsjan20-9000cells/Figure3/cluster_parameters/Pheno/"
input_name <- "FlowAlignTrans"  # this will be the different processing types
# cluster type for file name
clust_method <- "Pheno"
stats_list <- readRDS(paste(output_path,input_name,clust_method,'statslist.Rds',sep=""))
pdf(paste(output_path,input_name,clust_method,'statssilhouette.pdf',sep=""),width =4, height = 4)
print(plot(kn, type='b', stats_list[[2]][kn], xlab='k-neigbours', ylab='Average Silhouette Scores', frame=TRUE))
kn = c(25,50,75,100,125,150,175,200,225,250,300,350,400,450,500)
pdf(paste(output_path,input_name,clust_method,'statssilhouette.pdf',sep=""),width =4, height = 4)
print(plot(kn, type='b', stats_list[[2]][kn], xlab='k-neigbours', ylab='Average Silhouette Scores', frame=TRUE))
dev.off()
#Calinski-Harabasz index:
# the highest value is the optimal number of clusters
pdf(paste(output_path,input_name,clust_method,'statsCalinskiHara.pdf',sep=""),width =4, height = 4)
print(plot(kn, type='b', stats_list[[3]][kn], xlab='k-neigbours', ylab='Calinski-Harabasz index', frame=TRUE))
dev.off()
#Davies–Bouldin index: minimum score is zero
#the lowest value is the optimal number of clusters
pdf(paste(output_path,input_name,clust_method,'statsDavies.pdf',sep=""),width =4, height = 4)
print(plot(kn, type='b', stats_list[[4]][kn], xlab='k-neigbours', ylab='Davies–Bouldin index', frame=TRUE))
dev.off()
plot(kn, type='b', stats_list[[2]][kn], xlab='k-neigbours', ylab='Average Silhouette Scores', frame=TRUE)
View(stats_list)
plot(kn, type='b', stats_list[[3]][kn], xlab='k-neigbours', ylab='Calinski-Harabasz index', frame=TRUE)
