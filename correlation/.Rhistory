pdf(paste(output_path,input_name,clust_method,"kn",i,'Clustree.pdf',sep=""),width =15, height = 10)
print(clustree(seu, prefix ='RNA_snn_res.'))
dev.off()
# save seurat object
seu_name = paste("SeuratObject",i,".Rds",sep="")
saveRDS(seu, paste(output_path,input_name,clust_method,seu_name,sep=""))
# make clustree plot
# save all stats outputs for each kn
}
# save the stats
stats_list <- list(si,ch,db,nc)
saveRDS(stats_list,paste(output_path,input_name,clust_method,'statslist.Rds',sep=""))
############################## Plot outputs ########################################
#Shuming: this could also be simplified later by making a general plotting function
#silhouette score: ranges from -1  to 1
#-1: bad clusters  0: neutral, indifferent  1: good clusters
pdf(paste(output_path,input_name,clust_method,"Silhouetteplot.pdf",sep=""), width = 4, height = 4)
si_new <- cbind(kn = rownames(si), si)
melted <- melt(si_new,  id.vars = 'kn', variable.name = 'resolutions')
ggplot(melted, aes(kn, value)) +
geom_line(aes(colour = resolutions, group = resolutions)) +
labs(title = "Silhouette Scores", x = "kn", y = "Average Silhouette Scores") +
theme(plot.title = element_text(hjust = 0.5))
dev.off()
write.csv(si_new,paste(output_path,input_name,clust_method,"SilhouetteStats.csv",sep=""))
# #Calinski-Harabasz index:
# # the highest value is the optimal number of clusters
pdf(paste(output_path,input_name,clust_method,"CHIplot.pdf",sep=""), width = 4, height = 4)
ch_new <- cbind(kn = rownames(ch), ch)
melted <- melt(ch_new,  id.vars = 'kn', variable.name = 'resolutions')
ggplot(melted, aes(kn, value)) +
geom_line(aes(colour = resolutions, group = resolutions)) +
labs(title = "Calinski-Harabasz Index", x = "kn", y = "Calinski-Harabasz Index") +
theme(plot.title = element_text(hjust = 0.5))
dev.off()
write.csv(ch_new,paste(output_path,input_name,clust_method,"CHIStats.csv",sep=""))
# #Davies–Bouldin index: minimum score is zero
# #the lowest value is the optimal number of clusters
pdf(paste(output_path,input_name,clust_method,"DBplot.pdf",sep=""), width = 4, height = 4)
db_new <- cbind(kn = rownames(db), db)
melted <- melt(db_new,  id.vars = 'kn', variable.name = 'resolutions')
ggplot(melted, aes(kn, value)) +
geom_line(aes(colour = resolutions, group = resolutions)) +
labs(title = "Davies–Bouldin Index", x = "kn", y = "Davies–Bouldin Index") +
theme(plot.title = element_text(hjust = 0.5))
dev.off()
# @ shuming make a plot by the number of clusters on x axis
write.csv(db_new,paste(output_path,input_name,clust_method,"DBStats.csv",sep=""))
stats_list <- readRDS("/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outsjan20-9000cells/Figure3/cluster_parameters/FlowSOM/FlowAlignTransFlowSOMstatslist.Rds")
View(stats_list)
output_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outsjan20-9000cells/Figure3/cluster_parameters/FlowSOM/"
input_name = "FlowAlignTrans"
clust_method = "FlowSOM"
output_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outsjan20-9000cells/Figure3/cluster_parameters/FlowSOM/"
input_name = "FlowAlignTrans"
clust_method = "FlowSOM"
#silhouette score:
#-1: bad clusters  0: neutral, indifferent  1: good clusters
pdf(paste(output_path,input_name,clust_method,'statssilhouette.pdf',sep=""),width =4, height = 4)
print(plot(krange, type='b', stats_list[[2]][krange], xlab='k max', ylab='Average Silhouette Scores', frame=TRUE))
output_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outsjan20-9000cells/Figure3/cluster_parameters/FlowSOM/"
input_name = "FlowAlignTrans"
clust_method = "FlowSOM"
krange = c( 5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90)
#silhouette score:
#-1: bad clusters  0: neutral, indifferent  1: good clusters
pdf(paste(output_path,input_name,clust_method,'statssilhouette.pdf',sep=""),width =4, height = 4)
print(plot(krange, type='b', stats_list[[2]][krange], xlab='k max', ylab='Average Silhouette Scores', frame=TRUE))
dev.off()
#Calinski-Harabasz index:
# the highest value is the optimal number of clusters
pdf(paste(output_path,input_name,clust_method,'statsCalinskiHara.pdf',sep=""),width =4, height = 4)
print(plot(krange, type='b', stats_list[[3]][krange], xlab='k max', ylab='Calinski-Harabasz index', frame=TRUE))
dev.off()
#Davies–Bouldin index: minimum score is zero
#the lowest value is the optimal number of clusters
pdf(paste(output_path,input_name,clust_method,'statsDavies.pdf',sep=""),width =4, height = 4)
print(plot(krange, type='b', stats_list[[4]][krange], xlab='k max', ylab='Davies–Bouldin index', frame=TRUE))
dev.off()
plot(stats_list[[1]][krange] type='b', stats_list[[4]][krange], xlab='k max', ylab='Davies–Bouldin index', frame=TRUE)
plot(stats_list[[1]][krange], type='b', stats_list[[4]][krange], xlab='k max', ylab='Davies–Bouldin index', frame=TRUE)
plot(stats_list[[1]][krange], type='b', stats_list[[4]][krange], xlab='number of clusters', ylab='Davies–Bouldin index', frame=TRUE)
plot(stats_list[[1]][krange], type='b', stats_list[[3]][krange], xlab='number of clusters', ylab='Calinski-Harabasz index', frame=TRUE)
plot(tats_list[[1]][krange], type='b', stats_list[[2]][krange], xlab='number of clusters', ylab='Average Silhouette Scores', frame=TRUE)
plot(stats_list[[1]][krange], type='b', stats_list[[4]][krange], xlab='number of clusters', ylab='Davies–Bouldin index', frame=TRUE)
plot(stats_list[[1]][krange], type='b', stats_list[[3]][krange], xlab='number of clusters', ylab='Calinski-Harabasz index', frame=TRUE)
plot(stats_list[[1]][krange], type='b', stats_list[[2]][krange], xlab='number of clusters', ylab='Average Silhouette Scores', frame=TRUE)
# flowsom clustering
# parameter tuning, statistic and visualizations for manual annotation
# @Shuming: make this whole script into a function.
# input option:  input_path, output_path, input_name, cluster_method, kn, resolutions
# input_name and cluster_method are for file names to keep track of the output
# kn and resolution needs to take a vector
# an option to turn off or on save plots would be helpful too.
# add plot with x axis as the number of clusters, kn by colour intensity, res by shape or different colour
# values as dots, y axis statistic
# need to get the number of clusters at each kn/res combination
# load libraries
library(clusterSim)
library(FlowSOM)
library(flowCore)
library(cluster)
library(fpc)
library(clv)
library(Seurat)
library(dplyr)
library(ggplot2)
library(clustree)
library(reshape2) #for plotting multiple lines (resolutions) on the same graph
############# set up the data object for clustering ############################
# info to change for each comparison
# define the input pathway
# input pathway
# input pathway
input_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outsjan20-9000cells/prepro_outsaligned_transformed_flowset.csv"
# output pathway
output_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outsjan20-9000cells/Figure3/cluster_parameters/align_newparm/"
# add input description to output files
input_name <- "AlignTrans"  # this will be the different processing types
# cluster type for file name
clust_method <- "Louvain"
# read in the dataframe
df <- read.csv(input_path)
# print info to log
print(dim(df)) # this is specific df has 73578 cells
# the preprocessing output csv needs to be cleaned - it contains live dead, FSC, SSC and the sample column
print(colnames(df))
# create a df with just the expression
# need a way to automate this selection
# I only want the expression values
df2 <- df %>% select(c("AQP4", "CD24", "CD44","CD184","CD15","HepaCAM","CD29","CD56", "O4","CD140a","CD133","GLAST","CD71"))
# the order of the DF is set by the order the columns are written above
# create a matrix for later
m <- as.matrix(df2)
# create the seurat object for visualization
tm <- t(df2)
rownames(tm) <- colnames(df2)
colnames(tm) <- rownames(df2)
seu <- CreateSeuratObject(tm) # create a seurat object
# add the meta data back in for sample groups
seu <- AddMetaData(object=seu, metadata=df$Batch, col.name = 'Batch')
# this doesn't work for making levels
# create the vector for the antibodies names for feature plotting later
AB <- colnames(df2)
# add to scale data slot
seu <- ScaleData(seu)
# check the data
pdf(paste(output_path,input_name,clust_method,"Heatmap_batch.pdf",sep=""),width =8, height = 6)
print(DoHeatmap(seu, group.by = "Batch", features = AB))
dev.off()
# create the UMAP
seu <- RunPCA(seu, features = AB, npcs = 12, approx = FALSE)
############################## explore parameters and calculate statistics ###########################
############################# define pararmater range and set up list for stats ########################################
#shuming: im getting NaN for all clusters with res = 0.01
#those clusters seem to have level 0?
kn = c(200,250,300,350)
resolutions = c(0.01,0.02,0.3,0.04,0.05)
# not in the aligned transformed the number of clusters is very high at low k and higher
# more clusters are being formed in all methods
#create 3 df for stats, can be simplified later
si <- data.frame(matrix(ncol = length(resolutions), nrow = length(kn)))
colnames(si) <- resolutions
rownames(si) <- kn
ch <- data.frame(matrix(ncol = length(resolutions), nrow = length(kn)))
colnames(ch) <- resolutions
rownames(ch) <- kn
db <- data.frame(matrix(ncol = length(resolutions), nrow = length(kn)))
colnames(db) <- resolutions
rownames(db) <- kn
# track number of clusters
nc <- data.frame(matrix(ncol = length(resolutions), nrow = length(kn)))
colnames(db) <- resolutions
rownames(db) <- kn
#subsampling for silhouette score, n=1000, can make n bigger if needed
row_n <- sample(1:nrow(m), 1000)
dis <- dist(m[row_n,])
# In the loop
# save a data object for each kn - will only keep temporarily
# the clusters will write over with each new kn
for (i in kn){
seu <- FindNeighbors(seu, dims = 1:12, k.param = i)
seu <- RunUMAP(seu, dims = 1:12, n.neighbors = i)
# save feature plots of this UMAP
# file name
UMAP_name = paste("UMAPfeatures_kn",i,".pdf",sep="")
# save feature plots UMAP
pdf(paste(output_path,input_name,clust_method,UMAP_name,sep=""))
print(FeaturePlot(seu, features = AB,slot = 'scale.data',min.cutoff = 'q1', max.cutoff ='99',label.size = 1)+ theme(plot.title = element_text(size = 0.1)))
dev.off()
# look at batches
UMAP_name = paste("UMAPbatches_kn",i,".pdf",sep="")
pdf(paste(output_path,input_name,clust_method,UMAP_name,sep=""))
print(DimPlot(seu,group.by = 'Batch',label.size = 1))
dev.off()
for (j in resolutions) {
seu <- FindClusters(seu, resolution = j)
louvainCluster <- seu@meta.data$seurat_clusters
numb.clusters = unique(seu@meta.data$seurat_clusters)
#shuming: get an error whenever i run stats on level 0 clusters (mentioned in
#line 94) this line skips the rest of the loop when that happens, you might
#want to move stats to the end of the inner loop so you don't skip the plots
# make plots
# UMAP
UMAP_name = paste("UMAPclusters_kn",i,"_res_",j,".pdf",sep="")
print(UMAP_name) #testing
pdf(paste(output_path,input_name,clust_method,UMAP_name,sep=""))
# save UMAP grouped
print(DimPlot(seu,reduction = "umap", repel = TRUE, label = TRUE)) # will automatically group by active ident
dev.off()
# heatmap
heatmap_name = paste("Heatmapclusters_kn",i,"_res_",j,".pdf",sep="")
#testing
pdf(paste(output_path,input_name,clust_method,heatmap_name,sep=""))
print(DoHeatmap(seu, features = AB))
dev.off()
# this should add the number of clusters into a list - it didn't seem to work, something like this should work
nc[as.character(i), as.character(j)] <- length(unique(louvainCluster))
if (length(unique(louvainCluster))==1) next
#silhouette score:
si[as.character(i), as.character(j)] <- mean(silhouette(as.numeric(louvainCluster[row_n]),dis)[, 3])
length(as.numeric(dis))
silhouette(as.numeric(louvainCluster[row_n]),dis)
# @shuming - what is the point of the next line
as.numeric(louvainCluster[row_n])
#Calinski-Harabasz index:
ch[as.character(i), as.character(j)] <- calinhara(m,louvainCluster,cn=i)
# Davies–Bouldin index:
db[as.character(i), as.character(j)] <- index.DB(df2, as.numeric(louvainCluster))$DB
# save stats for each resolution
# write.csv(stats_list, paste(output_path,list_name,sep=""))
}
# run clustree
pdf(paste(output_path,input_name,clust_method,"kn",i,'Clustree.pdf',sep=""),width =15, height = 10)
print(clustree(seu, prefix ='RNA_snn_res.'))
dev.off()
# save seurat object
seu_name = paste("SeuratObject",i,".Rds",sep="")
saveRDS(seu, paste(output_path,input_name,clust_method,seu_name,sep=""))
# make clustree plot
# save all stats outputs for each kn
}
# save the stats
stats_list <- list(si,ch,db,nc)
saveRDS(stats_list,paste(output_path,input_name,clust_method,'statslist.Rds',sep=""))
############################## Plot outputs ########################################
#Shuming: this could also be simplified later by making a general plotting function
#silhouette score: ranges from -1  to 1
#-1: bad clusters  0: neutral, indifferent  1: good clusters
pdf(paste(output_path,input_name,clust_method,"Silhouetteplot.pdf",sep=""), width = 4, height = 4)
si_new <- cbind(kn = rownames(si), si)
melted <- melt(si_new,  id.vars = 'kn', variable.name = 'resolutions')
ggplot(melted, aes(kn, value)) +
geom_line(aes(colour = resolutions, group = resolutions)) +
labs(title = "Silhouette Scores", x = "kn", y = "Average Silhouette Scores") +
theme(plot.title = element_text(hjust = 0.5))
dev.off()
write.csv(si_new,paste(output_path,input_name,clust_method,"SilhouetteStats.csv",sep=""))
# #Calinski-Harabasz index:
# # the highest value is the optimal number of clusters
pdf(paste(output_path,input_name,clust_method,"CHIplot.pdf",sep=""), width = 4, height = 4)
ch_new <- cbind(kn = rownames(ch), ch)
melted <- melt(ch_new,  id.vars = 'kn', variable.name = 'resolutions')
ggplot(melted, aes(kn, value)) +
geom_line(aes(colour = resolutions, group = resolutions)) +
labs(title = "Calinski-Harabasz Index", x = "kn", y = "Calinski-Harabasz Index") +
theme(plot.title = element_text(hjust = 0.5))
dev.off()
write.csv(ch_new,paste(output_path,input_name,clust_method,"CHIStats.csv",sep=""))
# #Davies–Bouldin index: minimum score is zero
# #the lowest value is the optimal number of clusters
pdf(paste(output_path,input_name,clust_method,"DBplot.pdf",sep=""), width = 4, height = 4)
db_new <- cbind(kn = rownames(db), db)
melted <- melt(db_new,  id.vars = 'kn', variable.name = 'resolutions')
ggplot(melted, aes(kn, value)) +
geom_line(aes(colour = resolutions, group = resolutions)) +
labs(title = "Davies–Bouldin Index", x = "kn", y = "Davies–Bouldin Index") +
theme(plot.title = element_text(hjust = 0.5))
dev.off()
# @ shuming make a plot by the number of clusters on x axis
write.csv(db_new,paste(output_path,input_name,clust_method,"DBStats.csv",sep=""))
DotPlot(seu, features = AB, group.by = 'seurat_clusters')
DotPlot(seu, features = AB, group.by = 'seurat_clusters') + +RotatedAxis()+coord_flip()+theme(axis.text.x=element_text(size=7),axis.text.y=element_text(size=7))
AB <- c("CD24","CD56","CD71","CD29","CD15", "CD184","CD133", "GLAST","CD44","AQP4","HepaCAM","CD140a", "O4" )
# make dotplot
DotPlot(seu, features = AB, group.by = 'seurat_clusters') + +RotatedAxis()+coord_flip()+theme(axis.text.x=element_text(size=7),axis.text.y=element_text(size=7))
# make dotplot
DotPlot(seu, features = AB, group.by = 'seurat_clusters') + RotatedAxis()+coord_flip()+theme(axis.text.x=element_text(size=7),axis.text.y=element_text(size=7))
# make dotplot
DotPlot(seu, features = AB, group.by = 'seurat_clusters', cols = c("blue","red")) + RotatedAxis()+coord_flip()+theme(axis.text.x=element_text(size=7),axis.text.y=element_text(size=7))
# read in the seurat objects
seu <- readRDS("/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outsjan20-9000cells/Figure3/cluster_parameters/retro-louv-moreparm/retrotransLouvainSeuratObject20.Rds")
# Feature list
# "AQP4"    "CD24"    "CD44"    "CD184"   "CD15"    "HepaCAM" "CD29"    "CD56"    "O4"      "CD140a"
# "CD133"   "GLAST"   "CD71"
AB <- c("CD24","CD56","CD71","CD29","CD15", "CD184","CD133", "GLAST","CD44","AQP4","HepaCAM","CD140a", "O4" )
# make dotplot
DotPlot(seu, features = AB, group.by = 'seurat_clusters', cols = c("blue","red")) + RotatedAxis()+coord_flip()+theme(axis.text.x=element_text(size=7),axis.text.y=element_text(size=7))
View(nc)
View(df2)
View(seu)
# make dotplot
DotPlot(seu, features = AB, group.by = 'seurat_clusters', cols = c("blue","red"), slot = 'scale.data') + RotatedAxis()+coord_flip()+theme(axis.text.x=element_text(size=7),axis.text.y=element_text(size=7))
?DotPlot
# make dotplot
DotPlot(seu, features = AB, group.by = 'RNA_snn_res.05', cols = c("blue","red"), slot = 'scale.data') + RotatedAxis()+coord_flip()+theme(axis.text.x=element_text(size=7),axis.text.y=element_text(size=7))
# make dotplot
DotPlot(seu, features = AB, group.by = 'RNA_snn_res.05', cols = c("blue","red")) + RotatedAxis()+coord_flip()+theme(axis.text.x=element_text(size=7),axis.text.y=element_text(size=7))
# make dotplot
DotPlot(seu, features = AB, group.by = 'RNA_snn_res.0.05', cols = c("blue","red")) + RotatedAxis()+coord_flip()+theme(axis.text.x=element_text(size=7),axis.text.y=element_text(size=7))
library(Seurat)
# make dotplot
DotPlot(seu, features = AB, group.by = 'RNA_snn_res.0.05', cols = c("blue","red")) + RotatedAxis()+coord_flip()+theme(axis.text.x=element_text(size=7),axis.text.y=element_text(size=7))
# read in the seurat objects
seu <- readRDS("/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outsjan20-9000cells/Figure3/cluster_parameters/retro-louv-moreparm/retrotransLouvainSeuratObject60.Rds")
# Feature list
# "AQP4"    "CD24"    "CD44"    "CD184"   "CD15"    "HepaCAM" "CD29"    "CD56"    "O4"      "CD140a"
# "CD133"   "GLAST"   "CD71"
AB <- c("CD24","CD56","CD71","CD29","CD15", "CD184","CD133", "GLAST","CD44","AQP4","HepaCAM","CD140a", "O4" )
# make dotplot
DotPlot(seu, features = AB, group.by = 'RNA_snn_res.0.05', cols = c("blue","red")) + RotatedAxis()+coord_flip()+theme(axis.text.x=element_text(size=7),axis.text.y=element_text(size=7))
# make dotplot
DotPlot(seu, features = AB, group.by = 'RNA_snn_res.0.5', cols = c("blue","red")) + RotatedAxis()+coord_flip()+theme(axis.text.x=element_text(size=7),axis.text.y=element_text(size=7))
library(clusterSim)
library(FlowSOM)
library(flowCore)
library(cluster)
library(fpc)
library(clv)
library(Seurat)
library(dplyr)
library(ggplot2)
library(clustree)
library(reshape2)
seu <- readRDS("/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outsjan20-9000cells/Figure3/cluster_parameters/retro-louv-moreparm/retrotransLouvainSeuratObject20.Rds")
View(seu)
AB <- c("CD24","CD56","CD71","CD29","CD15", "CD184","CD133", "GLAST","CD44","AQP4","HepaCAM","CD140a", "O4" )
# make dotplot
DotPlot(seu, features = AB, group.by = 'RNA_snn_res.0.5', cols = c("blue","red")) + RotatedAxis()+coord_flip()+theme(axis.text.x=element_text(size=7),axis.text.y=element_text(size=7))
View(seu)
# make dotplot
DotPlot(seu, features = AB, group.by = 'RNA_snn_res.0.5', cols = c("blue","red"), scale = FALSE) + RotatedAxis()+coord_flip()+theme(axis.text.x=element_text(size=7),axis.text.y=element_text(size=7))
# it worked when I had the an object already loaded
# make dotplot
DotPlot(seu, features = AB, group.by = 'RNA_snn_res.0.5', cols = c("blue","red"), scale = TRUE) + RotatedAxis()+coord_flip()+theme(axis.text.x=element_text(size=7),axis.text.y=element_text(size=7))
# it worked when I had the an object already loaded
# make dotplot
DotPlot(seu, features = AB, group.by = 'RNA_snn_res.0.5', cols = c("blue","red"), scale = TRUE, col.min =0) + RotatedAxis()+coord_flip()+theme(axis.text.x=element_text(size=7),axis.text.y=element_text(size=7))
# it worked when I had the an object already loaded
?DoHeatmap
DoHeatmap(seu, raster = FALSE)
DoHeatmap(seu, raster = FALSE, features = AB)
DoHeatmap(seu, raster = FALSE, features = AB, combine = FALSE)
# make dotplot
DotPlot(seu, features = AB, group.by = 'RNA_snn_res.0.5', cols = c("blue","red"), scale = TRUE, col.min =0) + RotatedAxis()
# it worked when I had the an object already loaded
# make dotplot
DotPlot(seu, features = AB, group.by = 'RNA_snn_res.0.5', scale = TRUE, col.min =0) + RotatedAxis()
# it worked when I had the an object already loaded
RidgePlot(seu, features = AB)
?RidgePlot
Idents <- "RNA_snn_res.0.05"
RidgePlot(seu, features = AB, ncol = 2, slot = 'scale.data')
Idents <- "RNA_snn_res.0.05"
RidgePlot(seu, features = c("CD24","CD56"), ncol = 2, slot = 'scale.data')
Idents <- "RNA_snn_res.0.05"
RidgePlot(seu, features = c("CD24","CD56"), ncol = 2, slot = 'scale.data')
RidgePlot(seu, features = c("CD29","CD15"), ncol = 2, slot = 'scale.data')
Idents <- "RNA_snn_res.0.05"
RidgePlot(seu, features = c("CD24","CD56"), ncol = 2, slot = 'scale.data')
RidgePlot(seu, features = c("CD29","CD15"), ncol = 2, slot = 'scale.data')
RidgePlot(seu, features = c("O4","CD184"), ncol = 2, slot = 'scale.data')
VlnPlot(seu, features = c("CD24","CD56"), ncol = 2, slot = 'scale.data')
VlnPlot(seu, features = c("CD29","CD15"), ncol = 2, slot = 'scale.data')
VlnPlot(seu, features = c("O4","CD184"), ncol = 2, slot = 'scale.data')
?VlnPlot
VlnPlot(seu, features = c("CD24","CD56"), ncol = 2, slot = 'scale.data',pt.size = 0.01)
VlnPlot(seu, features = c("CD29","CD15"), ncol = 2, slot = 'scale.data',pt.size = 0.01)
VlnPlot(seu, features = c("O4","CD184"), ncol = 2, slot = 'scale.data',pt.size = 0.01)
VlnPlot(seu, features = c("CD24","CD56"), ncol = 2, slot = 'scale.data',pt.size = 0.001)
VlnPlot(seu, features = c("CD29","CD15"), ncol = 2, slot = 'scale.data',pt.size = 0.001)
VlnPlot(seu, features = c("O4","CD140a"), ncol = 2, slot = 'scale.data',pt.size = 0.001)
VlnPlot(seu, features = c("CD133","CD184"), ncol = 2, slot = 'scale.data',pt.size = 0.001)
VlnPlot(seu, features = c("CD24","CD56","CD71"), ncol = 3, slot = 'scale.data',pt.size = 0.001)
VlnPlot(seu, features = c("CD29","CD15","CD184"), ncol = 3, slot = 'scale.data',pt.size = 0.001)
VlnPlot(seu, features = c("O4","CD140a","CD133"), ncol = 3, slot = 'scale.data',pt.size = 0.001)
VlnPlot(seu, features = c("CD44","GLAST","AQP4","HepaCAM"), ncol = 2, slot = 'scale.data',pt.size = 0.001)
VlnPlot(seu, features = c("CD24","CD56","CD71"), ncol = 3, slot = 'scale.data',pt.size = 0)
VlnPlot(seu, features = c("CD29","CD15","CD184"), ncol = 3, slot = 'scale.data',pt.size = 0)
VlnPlot(seu, features = c("O4","CD140a","CD133"), ncol = 3, slot = 'scale.data',pt.size = 0)
VlnPlot(seu, features = c("CD44","GLAST","AQP4","HepaCAM"), ncol = 2, slot = 'scale.data',pt.size = 0.001)
VlnPlot(seu, features = c("CD24","CD56","CD71"), ncol = 3, slot = 'scale.data',pt.size = 0)
VlnPlot(seu, features = c("CD29","CD15","CD184"), ncol = 3, slot = 'scale.data',pt.size = 0)
VlnPlot(seu, features = c("O4","CD140a","CD133"), ncol = 3, slot = 'scale.data',pt.size = 0)
VlnPlot(seu, features = c("CD44","GLAST","AQP4","HepaCAM"), ncol = 2, slot = 'scale.data',pt.size = 0)
# make dotplot
DotPlot(seu, features = AB, group.by = 'RNA_snn_res.0.5', scale = TRUE, col.min =0) + RotatedAxis()
# it worked when I had the an object already loaded
# make dotplot
DotPlot(seu, features = AB, group.by = 'RNA_snn_res.0.5', scale = TRUE)
# it worked when I had the an object already loaded
# make dotplot
DotPlot(seu, features = AB, group.by = 'RNA_snn_res.0.05', scale = TRUE)
# it worked when I had the an object already loaded
# make dotplot
DotPlot(seu, features = AB, group.by = 'RNA_snn_res.0.05', scale = TRUE) +theme(RotatedAxis())
df <- AverageExpression(seu, features = AB, group.by = res, slot = 'scale.data')
res = 'RNA_snn_res.0.05'
df <- AverageExpression(seu, features = AB, group.by = res, slot = 'scale.data')
View(df)
# get mean expression values per cluster for each marker
res = 'RNA_snn_res.0.05'
seu$mean <- AverageExpression(seu, features = AB, group.by = res, slot = 'scale.data')
df <- as.data.frame(AverageExpression(seu, features = AB, group.by = res, slot = 'scale.data'))
View(df)
df.scale <- as.data.frame(AverageExpression(seu, features = AB, group.by = res, slot = 'scale.data'))
df <- as.data.frame(AverageExpression(seu, features = AB, group.by = res, slot = 'data'))
View(df.scale)
View(df)
View(seu)
View(df.scale)
ggplot(df.scale, aes(x = 'Marker', y= 'Cluster')) +
geom_raster(aes(fill='Expression')) +
scale_fill_gradient(low="grey90", high="red") +
labs(x="letters", y="LETTERS", title="Matrix") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=0, vjust=0.3),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11))
ggplot(df.scale) + geom_raster()
heatmap(df.scale)
head(df.scale)
heatmap(as.matrix(df.scale))
Idents <- "RNA_snn_res.0.05"
RidgePlot(seu, features = c("CD24","CD56"), ncol = 2, slot = 'scale.data')
RidgePlot(seu, features = c("CD29","CD15"), ncol = 2, slot = 'scale.data')
RidgePlot(seu, features = c("O4","CD184"), ncol = 2, slot = 'scale.data')
View(df.scale)
View(df.scale)
View(df.scale)
View(seu)
Idents(seu) <- "RNA_snn_res.0.05"
RidgePlot(seu, features = c("CD24","CD56"), ncol = 2, slot = 'scale.data')
RidgePlot(seu, features = c("CD29","CD15"), ncol = 2, slot = 'scale.data')
RidgePlot(seu, features = c("O4","CD184"), ncol = 2, slot = 'scale.data')
Idents(seu) <- "RNA_snn_res.0.2"
RidgePlot(seu, features = c("CD24","CD56"), ncol = 2, slot = 'scale.data')
RidgePlot(seu, features = c("CD29","CD15"), ncol = 2, slot = 'scale.data')
RidgePlot(seu, features = c("O4","CD184"), ncol = 2, slot = 'scale.data')
VlnPlot(seu, features = c("CD24","CD56","CD71"), ncol = 3, slot = 'scale.data',pt.size = 0)
VlnPlot(seu, features = c("CD29","CD15","CD184"), ncol = 3, slot = 'scale.data',pt.size = 0)
VlnPlot(seu, features = c("O4","CD140a","CD133"), ncol = 3, slot = 'scale.data',pt.size = 0)
VlnPlot(seu, features = c("CD44","GLAST","AQP4","HepaCAM"), ncol = 2, slot = 'scale.data',pt.size = 0)
# get mean expression values per cluster for each marker
res = 'RNA_snn_res.0.2'
df.scale <- as.data.frame(AverageExpression(seu, features = AB, group.by = res, slot = 'scale.data'))
ggplot(df.scale, aes(x = 'Marker', y= 'Cluster')) +
geom_raster(aes(fill='Expression')) +
scale_fill_gradient(low="grey90", high="red") +
labs(x="letters", y="LETTERS", title="Matrix") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=0, vjust=0.3),
axis.text.y=element_text(size=9),
plot.title=element_text(size=11))
# get mean expression values per cluster for each marker
res = 'RNA_snn_res.0.2'
df.scale <- as.data.frame(AverageExpression(seu, features = AB, group.by = res, slot = 'scale.data'))
heatmap(as.matrix(df.scale))
heatmap(as.matrix(df.scale), scale="row")
heatmap(as.matrix(df.scale), scale="column")
heatmap(as.matrix(df.scale), scale="column")
heatmap(as.matrix(df.scale), scale="row")
heatmap(as.matrix(df.scale), scale="column")
heatmap(as.matrix(df.scale), scale="row")
heatmap(as.matrix(df.scale))
DoHeatmap(seu, raster = FALSE, features = AB, combine = FALSE, group.by = "RNA_snn_res.0.2")
View(seu)
# read in the seurat objects
seu <- readRDS("/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outsjan20-9000cells/Figure3/cluster_parameters/retro-louv-moreparm/retrotransLouvainSeuratObject60.Rds")
# Feature list
# "AQP4"    "CD24"    "CD44"    "CD184"   "CD15"    "HepaCAM" "CD29"    "CD56"    "O4"      "CD140a"
# "CD133"   "GLAST"   "CD71"
AB <- c("CD24","CD56","CD71","CD29","CD15", "CD184","CD133", "GLAST","CD44","AQP4","HepaCAM","CD140a", "O4" )
DoUMAP
?DoUMAP
?RunUMAP
DimPlot(seu, reduction = "UMAP", spread = 2, min.dist = 0.1, a = 0.54, b = 0.84)
DoUMAP(seu, reduction = "UMAP", spread = 2, min.dist = 0.1, a = 0.54, b = 0.84)
RunUMAP(seu, reduction = "UMAP", spread = 2, min.dist = 0.1, a = 0.54, b = 0.84)
RunUMAP(seu,spread = 2, min.dist = 0.1, a = 0.54, b = 0.84)
RunUMAP(seu,spread = 2, min.dist = 0.1)
seu <- RunUMAP(seu,spread = 2, min.dist = 0.1)
seu <- RunUMAP(seu,spread = 2, min.dist = 0.1, dims = 1:12)
DimPlot(seu, reduction = "UMAP")
DimPlot(seu, reduction = "umap")
DimPlot(seu, reduction = "umap", label = TRUE)
DimPlot(seu, reduction = "umap", label = TRUE, group.by = 'RNA_snn_res.0.2')
# spread higher values push things apart until to high
# smaller min dist pushes clusters apart
seu <- RunUMAP(seu,spread = 2, min.dist = 0.05, dims = 1:12)
DimPlot(seu, reduction = "umap", label = TRUE, group.by = 'RNA_snn_res.0.2')
?DimPlot
DimPlot(seu, reduction = "umap", label = TRUE, group.by = 'RNA_snn_res.0.2', repel = TRUE)
DimPlot(seu, reduction = "umap", label = TRUE, group.by = 'RNA_snn_res.0.5', repel = TRUE)
DimPlot(seu, reduction = "umap", label = TRUE, group.by = 'RNA_snn_res.0.05', repel = TRUE)
DimPlot(seu, reduction = "umap", label = TRUE, group.by = 'RNA_snn_res.0.35', repel = TRUE)
# spread higher values push things apart until to high
# smaller min dist pushes clusters apart
seu <- RunUMAP(seu,spread = 1, min.dist = 0.05, dims = 1:12)
DimPlot(seu, reduction = "umap", label = TRUE, group.by = 'RNA_snn_res.0.2', repel = TRUE)
DimPlot(seu, reduction = "umap", label = TRUE, group.by = 'RNA_snn_res.0.35', repel = TRUE)
FeaturePlot(seu, features = AB)
FeaturePlot(seu, features = AB, slot = 'scale.data')
FeaturePlot(seu, features = AB, slot = 'scale.data',min.cutoff = 'q1', max.cutoff ='99',label.size = 1)+ theme(plot.title = element_text(size = 0.1))
