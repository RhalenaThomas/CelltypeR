edited.up <- c("CDR1","SYNC","AL078639.1", "AL021368.2", "MT-ND6")
edited.down <- c("ZCCHC12", "ARMCX3", "BEX4", "MARCKSL1")
# good for neurons
ft.list <- c(edited.up,edited.down)
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
DGE.ast <- read.csv("/Users/rhalenathomas/Documents/Data/scRNAseq/AST23_BrainComm/DGE_eachcluster/BrainCommClusters/LFC_thresh0.25/Neurons_AST23_Isogenic.csv")
colnames(DGE.ast)
# filter list to get the top up and down regulated genes
# filter for significant
topup <- DGE.ast %>% filter(p_val_adj <= 0.05)
topup <- topup %>% top_n(n=10, wt = avg_log2FC)
ft.up.a <- as.vector(topup$X)
topdown <- DGE.ast %>% filter(p_val_adj <= 0.05)
topdown <- topdown %>% top_n(n=-10, wt = avg_log2FC)
ft.down.a <- as.vector(topdown$X)
ft.list <- c(ft.up.n, ft.down.n)
ft.list
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
ft.list <- c(edited.up,edited.down)
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
DGE.ast <- read.csv("/Users/rhalenathomas/Documents/Data/scRNAseq/AST23_BrainComm/DGE_eachcluster/BrainCommClusters/LFC_thresh0.25/RGa_Isogenic.csv")
colnames(DGE.ast)
# filter list to get the top up and down regulated genes
# filter for significant
topup <- DGE.ast %>% filter(p_val_adj <= 0.05)
topup <- topup %>% top_n(n=10, wt = avg_log2FC)
ft.up.a <- as.vector(topup$X)
topdown <- DGE.ast %>% filter(p_val_adj <= 0.05)
topdown <- topdown %>% top_n(n=-10, wt = avg_log2FC)
ft.down.a <- as.vector(topdown$X)
ft.list <- c(ft.up.n, ft.down.n)
ft.list
# neurons up "CDR1", "AL021368.2" and down "ZCCHC12", "ARMCX3"
edited.up <- c("CDR1", "AL021368.2")
edited.down <- c("ZCCHC12", "ARMCX3")
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
DGE.ast <- read.csv("/Users/rhalenathomas/Documents/Data/scRNAseq/AST23_BrainComm/DGE_eachcluster/BrainCommClusters/LFC_thresh0.25/Astrocytes2_AST23_Isogenic.csv")
colnames(DGE.ast)
# filter list to get the top up and down regulated genes
# filter for significant
topup <- DGE.ast %>% filter(p_val_adj <= 0.05)
topup <- topup %>% top_n(n=10, wt = avg_log2FC)
ft.up.a <- as.vector(topup$X)
topdown <- DGE.ast %>% filter(p_val_adj <= 0.05)
topdown <- topdown %>% top_n(n=-10, wt = avg_log2FC)
ft.down.a <- as.vector(topdown$X)
ft.list <- c(ft.up.n, ft.down.n)
ft.list
# neurons up "CDR1", "AL021368.2" and down "ZCCHC12", "ARMCX3"
edited.up <- c("CDR1", "AL021368.2")
edited.down <- c("ZCCHC12", "ARMCX3")
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
astro.up <- ("PAX3","CNTNAP4","CYP26B1", "PAX7","NKAIN3","WNT7B","ATP10B","STMN2","RPL27A","C1orf61","DPYSL3","GRIA4","MSTN",
astro.up <- ("PAX3","CNTNAP4","CYP26B1","PAX7","NKAIN3","WNT7B","ATP10B","STMN2","RPL27A","C1orf61","DPYSL3","GRIA4","MSTN", "ATP8A1","ROBO1","HS3ST3A1","ANOS1","AL021368.2","ANKS1B","HS6ST2","ARMCX3","LINC01535","JAG1")
astro.up <- ("PAX3","CNTNAP4","CYP26B1","PAX7","NKAIN3","WNT7B","ATP10B","STMN2","RPL27A","C1orf61","DPYSL3","GRIA4","MSTN", "ATP8A1","ROBO1","HS3ST3A1","ANOS1","AL021368.2","ANKS1B","HS6ST2","ARMCX3","LINC01535","JAG1")
astro.up <- ("PAX3","CNTNAP4","CYP26B1","PAX7","NKAIN3","WNT7B","ATP10B","STMN2","RPL27A","C1orf61","DPYSL3","GRIA4","MSTN", "ATP8A1","ROBO1","HS3ST3A1","ANOS1","AL021368.2","ANKS1B","HS6ST2","ARMCX3","LINC01535","JAG1")
astro.up <- ("PAX3","CNTNAP4","CYP26B1","PAX7","NKAIN3","WNT7B","ATP10B","STMN2","RPL27A","C1orf61","DPYSL3","GRIA4","MSTN", "ATP8A1","ROBO1","HS3ST3A1","ANOS1","AL021368.2","ANKS1B","HS6ST2","ARMCX3","LINC01535","JAG1")
colnames(DGE.ast)
# filter list to get the top up and down regulated genes
# filter for significant
topup <- DGE.ast %>% filter(p_val_adj <= 0.05)
topup <- topup %>% top_n(n=15, wt = avg_log2FC)
ft.up.a <- as.vector(topup$X)
topdown <- DGE.ast %>% filter(p_val_adj <= 0.05)
topdown <- topdown %>% top_n(n=-10, wt = avg_log2FC)
ft.down.a <- as.vector(topdown$X)
ft.list <- c(ft.up.a, ft.down.a)
ft.list
# neurons up "CDR1", "AL021368.2" and down "ZCCHC12", "ARMCX3"
edited.up <- c("CDR1", "AL021368.2")
edited.down <- c("ZCCHC12", "ARMCX3")
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
topup <- DGE.ast %>% filter(p_val_adj <= 0.05)
topup <- topup %>% top_n(n=20, wt = avg_log2FC)
ft.up.a <- as.vector(topup$X)
topdown <- DGE.ast %>% filter(p_val_adj <= 0.05)
topdown <- topdown %>% top_n(n=-10, wt = avg_log2FC)
ft.down.a <- as.vector(topdown$X)
ft.list <- c(ft.up.a)
ft.list
# neurons up "CDR1", "AL021368.2" and down "ZCCHC12", "ARMCX3"
edited.up <- c("CDR1", "AL021368.2")
edited.down <- c("ZCCHC12", "ARMCX3")
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
# neurons up "CDR1", "AL021368.2" and down "ZCCHC12", "ARMCX3"
# astro up "CNTNAP4"
edited.up <- c("CDR1", "AL021368.2","CNTNAP4","SLC17A8")
edited.down <- c("ZCCHC12", "ARMCX3")
ft.list <- c(edited.up, edited.down)
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
topdown <- DGE.ast %>% filter(p_val_adj <= 0.05)
topdown <- topdown %>% top_n(n=-20, wt = avg_log2FC)
ft.down.a <- as.vector(topdown$X)
ft.list <- c(ft.down.a)
ft.list
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
# neurons up "CDR1", "AL021368.2" and down "ZCCHC12", "ARMCX3"
# astro up "CNTNAP4", "SLC17A8" and down "CYCS" "PEBP1"
# RG
edited.up <- c("CDR1", "AL021368.2","CNTNAP4","SLC17A8")
edited.down <- c("ZCCHC12", "ARMCX3","CYCS", "PEBP1")
ft.list <- c(edited.up, edited.down)
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
# neurons up "CDR1", "AL021368.2" and down "ZCCHC12", "ARMCX3"
# astro up "CNTNAP4", "SLC17A8" and down "CYCS" "PEBP1"
# RG
edited.up <- c("CDR1", "AL021368.2","CNTNAP4","SLC17A8")
edited.down <- c("ZCCHC12", "ARMCX3","CYCS", "PEBP1")
ft.list <- c(edited.up, edited.down)
# up and down pairs
paired <- c("CDR1", "AL021368.2","ZCCHC12", "ARMCX3","CNTNAP4","SLC17A8","CYCS", "PEBP1")
ft.list <- paired
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
DGE.rg <- read.csv("/Users/rhalenathomas/Documents/Data/scRNAseq/AST23_BrainComm/DGE_eachcluster/BrainCommClusters/LFC_thresh0.25/RGd1_AST23_Isogenic.csv")
colnames(DGE.rg)
# filter list to get the top up and down regulated genes
# filter for significant
topup <- DGE.rg %>% filter(p_val_adj <= 0.05)
topup <- topup %>% top_n(n=20, wt = avg_log2FC)
ft.up.a <- as.vector(topup$X)
topdown <- DGE.rg %>% filter(p_val_adj <= 0.05)
topdown <- topdown %>% top_n(n=-20, wt = avg_log2FC)
ft.down.a <- as.vector(topdown$X)
ft.list <- c(ft.down.a)
ft.list
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
ft.list <- c(ft.up.a)
ft.list
ft.list <- paired
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
ft.list <- c(ft.up.a)
ft.list
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
paired <- c("CDR1", "AL021368.2","ZCCHC12", "ARMCX3","CNTNAP4","SLC17A8","CYCS", "PEBP1","RPS18","RPS17","KCNJ16", "NRN1")
ft.list <- paired
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
DGE.rg <- read.csv("/Users/rhalenathomas/Documents/Data/scRNAseq/AST23_BrainComm/DGE_eachcluster/BrainCommClusters/LFC_thresh0.25/epithelial_Isogenic.csv")
colnames(DGE.e)
DGE.e <- read.csv("/Users/rhalenathomas/Documents/Data/scRNAseq/AST23_BrainComm/DGE_eachcluster/BrainCommClusters/LFC_thresh0.25/epithelial_Isogenic.csv")
colnames(DGE.e)
# filter list to get the top up and down regulated genes
# filter for significant
topup <- DGE.e %>% filter(p_val_adj <= 0.05)
topup <- topup %>% top_n(n=20, wt = avg_log2FC)
ft.up.a <- as.vector(topup$X)
topdown <- DGE.e %>% filter(p_val_adj <= 0.05)
topdown <- topdown %>% top_n(n=-20, wt = avg_log2FC)
ft.down.a <- as.vector(topdown$X)
ft.list <- c(ft.up.a)
ft.list
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
ft.list <- c(ft.down.a)
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
topdown <- DGE.e %>% filter(p_val_adj <= 0.05)
topdown <- topdown %>% top_n(n=-20, wt = avg_log2FC)
ft.down.a <- as.vector(topdown$X)
ft.list <- c(ft.down.a)
ft.list
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
paired <- c("CDR1", "AL021368.2","ZCCHC12", "ARMCX3","CNTNAP4","SLC17A8","CYCS", "PEBP1","RPS18","RPS17","KCNJ16", "NRN1", "TAOK1",  "C1orf61","ARMCX3","TMBIM6")
ft.list <- paired
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
pdf("/Users/rhalenathomas/Documents/Data/Figures_for_Grant/AST23CONheatmapUpDown4groups.pdf", height = 5, width = 10)
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
dev.off()
pdf("/Users/rhalenathomas/Documents/Data/Figures_for_Grant/AST23CONheatmapUpDown4groups.pdf", height = 8, width = 12)
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
dev.off()
pdf("/Users/rhalenathomas/Documents/Data/Figures_for_Grant/AST23CONheatmapUpDown4groups.pdf", height = 3, width = 5)
DoMultiBarHeatmap(MBO, features= ft.list , group.by='celltypes', additional.group.by = 'orig.ident')
dev.off()
# libraries needed
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
library("tidyverse")
# read in the df
files_to_read <- list.files(path = "/Users/rhalenathomas/Documents/Data/scRNAseq/AST23_BrainComm/DGE_eachcluster/BrainCommClusters/LFC_thresh0.25/EnrichR/GObio", pattern = "\\.tsv$", full.names = T)
all_files <- lapply(files_to_read, function(x) {
read.table(file = x, sep ='\t', header = TRUE)})
# name the df in the list - this will be the full filename with the pathway
names(all_files) <- files_to_read
# set up enviroment
# clear space
# load libraries
rm(list=ls())
library("ggplot2")
library("Seurat")
library("cowplot")
library("clustree")
library(patchwork)
library(dplyr)
library("Matrix")
library(tidyr)
library(stringr)
library("tidyverse")
# read in the df
files_to_read <- list.files(path = "/Users/rhalenathomas/Documents/Data/scRNAseq/AST23_BrainComm/DGE_eachcluster/BrainCommClusters/LFC_thresh0.25/EnrichR/GObio", pattern = "\\.tsv$", full.names = T)
all_files <- lapply(files_to_read, function(x) {
read.table(file = x, sep ='\t', header = TRUE)})
# name the df in the list - this will be the full filename with the pathway
names(all_files) <- files_to_read
files_to_read <- list.files(path = "/Users/rhalenathomas/Documents/Data/scRNAseq/AST23_BrainComm/DGE_eachcluster/BrainCommClusters/LFC_thresh0.25/EnrichR/GObio", pattern = "\\.tsv$", full.names = T)
# read in all files in directory into a list
files_to_read <- list.files(path = "/Users/rhalenathomas/Documents/Data/scRNAseq/AIWtrio120days/DGE_nov19labels/write/GObio/neg", pattern = "\\.tsv$", full.names = T)
all_files <- lapply(files_to_read, function(x) {
read.table(file = x, sep ='\t', header = TRUE)})
# name the df in the list - this will be the full filename with the pathway
names(all_files) <- files_to_read
# clean the names
# This is manual - would be better to parse the name out of the file name but that is complicated for now
# now I moved only the negative reg GO terms - down in control into a folder
# read in the df
files_to_read <- list.files(path = "/Users/rhalenathomas/Documents/Data/scRNAseq/AST23_BrainComm/DGE_eachcluster/BrainCommClusters/LFC_thresh0.25/EnrichR/GObio", pattern = "*.txt", full.names = T)
all_files <- lapply(files_to_read, function(x) {
read.table(file = x, sep ='\t', header = TRUE)})
# name the df in the list - this will be the full filename with the pathway
names(all_files) <- files_to_read
View(all_files)
names(all_files) <- c("Astro","Epi","Neuron","RG")
View(all_files)
print(colnames(all_files["Astro"]))
head(all_files@Astro)
head(all_files[[Astro]])
head(all_files[Astro])
head(all_files[1])
colnames(all_files[1])
print(colnames(all_files[1]))
df <- all_files[1]
colnames(df)
View(df)
df <- all_files[[1]]
colnames(df)
clean.list <- lapply(all_files, function(x) {
x %>% filter(Adjusted.P.value >= 0.05)
return(x)
})
clean.list <- lapply(clean.list, function(x) {
x %>% separate(Overlap, c("GenesIn","GenesTotal"))
})
clean.list <- lapply(clean.list, function(x) {
x$GenesIn <- as.numeric(x$GenesIn)
return(x)
})
clean.list <- lapply(clean.list, function(x) {
x$GenesTotal <- as.numeric(x$GenesTotal)
return(x)
})
# calculate the GeneRatio and the negative log10 P values
clean.list <- lapply(clean.list, function(x) {
x$GeneRatio <- x$GenesIn/x$GenesTotal
return(x)
})
clean.list <- lapply(clean.list, function(x) {
x$Log10Padj <- -log(x$Adjusted.P.value, base = 10)
return(x)
})
# just select the columns I want for later
clean.list <- lapply(clean.list, function(x) {
select(x, Term,Genes,GeneRatio,Log10Padj,Odds.Ratio,GenesIn)
})
# add a column 'Cluster' with the name of each cluster from the vector above
clean.list <- Map(cbind, clean.list, Cluster = cluster.names)
clean.list <- Map(cbind, clean.list, Cluster =  c("Astro","Epi","Neuron","RG"))
View(clean.list)
df.merge <- clean.list %>% reduce(full_join, by = "Term")
print(colnames(df.merge))
# Better to pull out the df name from the group columns in some kind of better way.  I'll need to come back to this
df1 <- select(df.merge, Term, Cluster.x, Genes.x, GeneRatio.x, Log10Padj.x, Odds.Ratio.x, GenesIn.x)
names(df1) <- c("Term","Cluster","Genes","GeneRatio","Log10Padj","Odds.Ratio","GenesIn")
# need add in the cluster name for all rows
# need to think of a better way to do this later
df1$Cluster <- "Astrocytes"
df2 <- select(df.merge, Term, Cluster.y, Genes.y, GeneRatio.y, Log10Padj.y, Odds.Ratio.y, GenesIn.y)
names(df2) <- c("Term","Cluster","Genes","GeneRatio","Log10Padj","Odds.Ratio","GenesIn")
df2$Cluster <- "Epithelial"
df3 <- select(df.merge, Term, Cluster.x.x,Genes.x.x, GeneRatio.x.x, Log10Padj.x.x,Odds.Ratio.x.x,GenesIn.x.x)
names(df3) <- c("Term","Cluster","Genes","GeneRatio","Log10Padj","Odds.Ratio","GenesIn")
df3$Cluster <- "Neurons"
df4 <- select(df.merge, Term, Cluster.y.y, Genes.y.y, GeneRatio.y.y, Log10Padj.y.y, Odds.Ratio.y.y, GenesIn.y.y )
names(df4) <- c("Term","Cluster","Genes","GeneRatio","Log10Padj","Odds.Ratio","GenesIn")
df4$Cluster <- "Radial Glia"
df.cat <- rbind(df1,df2,df3,df4)
# need to remove the nans
df.cat[is.na(df.cat)] = 0
GO.top2 <- df.cat %>% group_by(Cluster) %>% top_n(n=2, wt = GeneRatio)
length(unique(GO.top2$Term))
v.top2.generat <- unique(GO.top2$Term)
df.plot <- df.cat %>% filter(Term %in% v.top2.generat)
colnames(df.plot)
ggplot(data = df.plot, aes(x = Cluster, y = Term, color = Log10Padj, size = GeneRatio)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue")
pdf("/Users/rhalenathomas/Documents/Data/Figures_for_Grant/AST23CON4groupsTop2GObiology.pdf", height = 3, width = 5)
ggplot(data = df.plot, aes(x = Cluster, y = Term, color = Log10Padj, size = GeneRatio)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue")
dev.off()
pdf("/Users/rhalenathomas/Documents/Data/Figures_for_Grant/AST23CON4groupsTop2GObiology.pdf", height = 3, width = 15)
ggplot(data = df.plot, aes(x = Cluster, y = Term, color = Log10Padj, size = GeneRatio)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue")
dev.off()
pdf("/Users/rhalenathomas/Documents/Data/Figures_for_Grant/AST23CON4groupsTop2GObiology.pdf", height = 3, width = 10)
ggplot(data = df.plot, aes(x = Cluster, y = Term, color = Log10Padj, size = GeneRatio)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue")
dev.off()
library(FlowSOM)
library(flowCore)
library(cluster)
library(fpc)
library(clv)
library(Seurat)
rm(list=ls())
fileName <-"/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outsjan20-9000cells/prepro_outsflowset.csv"
# note: current matrix sample ID have cell index # attached.
df <- read.csv(fileName)
head(df)
print(dim(df)) # this is specific df has 73578 cells
# the preprocessing output csv needs to be cleaned - it contains live dead, FSC, SSC and the sample column
df2 <- df %>% select(-c("Live.Dead",FSC,SSC,X,Batch,cell))
fs <- readRDS("/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outsjan20-9000cells/FlowSOMin.rds")
#transpose the csv so that seurat object has the right column and row
# the flow intensity values will be input as RNA expression
tm <- t(df2)
df2 <- df %>% select(-c("Live.Dead",FSC,SSC,X,Batch,cell))
library(FlowSOM)
library(flowCore)
library(cluster)
library(fpc)
library(clv)
library(Seurat)
library(dplyr)
rm(list=ls())
gc()
fileName <-"/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outsjan20-9000cells/prepro_outsflowset.csv"
# note: current matrix sample ID have cell index # attached.
df <- read.csv(fileName)
head(df)
print(dim(df)) # this is specific df has 73578 cells
# the preprocessing output csv needs to be cleaned - it contains live dead, FSC, SSC and the sample column
df2 <- df %>% select(-c("Live.Dead",FSC,SSC,X,Batch,cell))
m <- as.matrix(df2) # flowset takes ina matrix not df
#m <- om[1:3000,] #subset (n=3000), omit this to test the whole file  - I didn't subset here but too 9000 or max cells from each file before
#transpose the csv so that seurat object has the right column and row
# the flow intensity values will be input as RNA expression
tm <- t(df2)
rownames(tm) <- colnames(df2)
colnames(tm) <- rownames(df2)
k <- 10 #change number of cluster here
metaClustering <- (metaClustering_consensus(fs$map$codes,k = k,seed=42)) # flowSOM clustering?
fs <- readRDS("/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outsjan20-9000cells/FlowSOMin.rds")
#transpose the csv so that seurat object has the right column and row
# the flow intensity values will be input as RNA expression
tm <- t(df2)
rownames(tm) <- colnames(df2)
colnames(tm) <- rownames(df2)
k <- 10 #change number of cluster here
metaClustering <- (metaClustering_consensus(fs$map$codes,k = k,seed=42)) # flowSOM clustering?
seu <- CreateSeuratObject(tm) # create a seurat object
# check the seurat object by plotting some features
VlnPlot(seu, features = "AQP4")
View(seu)
DotPlot(seu, features = c("CD56","AQP4"))
DotPlot(seu, features = c("CD56","AQP4","CD24","GLAST"))
print(colnames(df2))
DotPlot(seu, features = c("CD56","AQP4","CD24","GLAST","CD140a","CD29","CD184","CD71","O4","HepaCAM","CD133"))
VlnPlot(seu,features = c("CD56","AQP4"))
install.packages(Seurat)
install.packages("Seurat")
install.packages("Seurat")
library("Seurat")
VlnPlot(seu,features = c("CD56","AQP4"))
seu <- ScaleData(seu)
DotPlot(seu, features = c("CD56","AQP4","CD24","GLAST","CD140a","CD29","CD184","CD71","O4","HepaCAM","CD133"))
seu <- FindVariableFeatures(seu)
seu <-RunPCA(seu,seed.use = 42)
print(seu[["pca"]], dims = 1:2, nfeatures = 5)
print(seu[["pca"]], dims = 1:5, nfeatures = 5)
seu <- RunUMAP(seu,dims = 1:10)
seu <- AddMetaData(object=seu, metadata=metaClustering[fs$map$mapping[,1]], col.name = 'flowSOM')
?DimPlot
View(seu)
DimPlot(seu)
?RunUMAP
allAB <- colnames(df2)
allAB
DotPlot(seu, features = allAB)
seu <- AddMetaData(object=seu, metadata=metaClustering[fs$map$mapping[,1]], col.name = 'flowSOM')
View(seu)
View(seu)
DimPlot(seu, group.by = flowSOM)
DimPlot(seu, group.by = "flowSOM")
DotPlot (seu, features = allAB, group.by = "flowSOM")
DimPlot(seu, group.by = "flowSOM", reduction = "pca") # terrible
seu <- RunPCA(seu, features = allAB)
print(seu[["pca"]], dims = 1:5, nfeatures = 5) # tells you what AB are contributing to the
seu <- RunUMAP(seu,dims = 1:10)
DimPlot(seu, group.by = "flowSOM", reduction = "umap") # from normal PCA used as umap input it is mostly on blob
seu <- RunUMAP(seu,features = allAB)
DimPlot(seu, group.by = "flowSOM", reduction = "umap")
# cluster using Louvain clustering
seu <- FindNeighbors(seu, dims = 1:10)
seu <- FindClusters(pbmc, resolution = c(0.1,0.25,0.5,0.75,1))
# cluster using Louvain clustering
seu <- FindNeighbors(seu, dims = 1:10)
squrt(73578)
sqrt(73578)
# cluster using Louvain clustering
# using the square root of the number of cells for K might work better
#sqrt(73578) = 271.25
seu <- FindNeighbors(seu, dims = 1:10, k = 271)
seu <- FindClusters(seu, resolution = c(0.1,0.25,0.5,0.75,1))
#clustree(seu, prefix = "") + theme(legend.position = "bottom")
View(seu)
clustree(seu, prefix = "RNA_snn_res.") + theme(legend.position = "bottom")
library(clustree)
clustree(seu, prefix = "RNA_snn_res.") + theme(legend.position = "bottom")
# c(0.1,0.25,0.5,0.75,1)
resolutions = c("RNA_snn_res.0.1","RNA_snn_res.0.25")
for res in resolutions{
# c(0.1,0.25,0.5,0.75,1)
resolutions = c("RNA_snn_res.0.1","RNA_snn_res.0.25")
for (res in resolutions){
DimPlot(MBO.combined, reduction = "umap", repel = TRUE, label = TRUE, group.by = res)
}
# c(0.1,0.25,0.5,0.75,1)
resolutions = c("RNA_snn_res.0.1","RNA_snn_res.0.25")
for (res in resolutions){
DimPlot(seu, reduction = "umap", repel = TRUE, label = TRUE, group.by = res)
}
# c(0.1,0.25,0.5,0.75,1)
resolutions = c("RNA_snn_res.0.1","RNA_snn_res.0.25")
for (res in resolutions){
print(DimPlot(seu, reduction = "umap", repel = TRUE, label = TRUE, group.by = res))
}
# c(0.1,0.25,0.5,0.75,1)
resolutions = c("RNA_snn_res.0.1","RNA_snn_res.0.25","RNA_snn_res.0.5","RNA_snn_res.0.75","RNA_snn_res.1")
for (res in resolutions){
print(DimPlot(seu, reduction = "umap", repel = TRUE, label = TRUE, group.by = res))
}
DimPlot(seu, group.by = "RNA_snn_res.0.5", reduction = "umap")
DotPlot(seu, group.by = "RNA_snn_res.0.5", reduction = "umap")
DotPlot(seu, group.by = "RNA_snn_res.0.5")
DotPlot(seu, group.by = "RNA_snn_res.0.5", features = allAB)
?DotPlot
DotPlot(seu, group.by = "RNA_snn_res.0.5", features = allAB, assay = "scale.data") # why is the intensity
DotPlot(seu, group.by = "RNA_snn_res.0.5", features = allAB, scale = TRUE) # why is the intensity
DotPlot(seu, group.by = "RNA_snn_res.0.5", features = allAB, scale = TRUE) # why is the intensity ploted?
# the data must not be working correctly
heatmap(seu, group.by = "RNA_snn_res.0.5", features = allAB)
DotPlot(seu, group.by = "RNA_snn_res.0.5", features = allAB, scale = TRUE) # why is the intensity ploted?
# the data must not be working correctly
heatmap(seu, features = allAB)
heatmap(matrix(1:9,nrow=3))
is.matrix(matrix(1:9,nrow=3))
is.matrix(seu@assays$RNA)
is.matrix(seu@assays$RNA$data$scale.data)
is.matrix(seu@assays$scale.data)
seu@assays$scale.data <-  as.matrix(seu@assays$scale.data)
is.matrix(seu@assays$data)
FeatureScatter(seu, feature1 = "CD56",feature2 = "CD24")
FeatureScatter(seu, feature1 = "CD29",feature2 = "CD184")
seu <- NormalizeData(seu)
FeatureScatter(seu, feature1 = "CD56",feature2 = "CD24")
FeatureScatter(seu, feature1 = "CD29",feature2 = "CD184")
heatmap(seu, features = allAB)
DoHeatmap(seu, features = allAB, group.by = "RNA_snn_res.0.5")
# c(0.1,0.25,0.5,0.75,1)
resolutions = c("RNA_snn_res.0.1","RNA_snn_res.0.25","RNA_snn_res.0.5","RNA_snn_res.0.75","RNA_snn_res.1")
for (res in resolutions){
print(DoHeatmap(seu, features = allAB, group.by = res))
}
# try the dotplot again
# c(0.1,0.25,0.5,0.75,1)
resolutions = c("RNA_snn_res.0.1","RNA_snn_res.0.25","RNA_snn_res.0.5","RNA_snn_res.0.75","RNA_snn_res.1")
for (res in resolutions){
print(DotPlot(seu, features = allAB, group.by = res))
}
?DotPlot
for (res in resolutions){
print(DotPlot(seu, features = allAB, group.by = res, scale.min = 0))
}
for (res in resolutions){
print(DotPlot(seu, features = allAB, group.by = res, cols = c("blue","red")))
}
for (AB in allAB){
print(FeaturePlot(seu, features = AB))
}
FeaturePlot(seu,features = ("CD24","CD56"), blend = TRUE)
FeaturePlot(seu,features = c("CD24","CD56"), blend = TRUE)
FeaturePlot(seu, features = c("CD24","CD56"), blend = TRUE)
FeaturePlot(seu, features = c("CD24","CD56"))
FeaturePlot(seu, features = c("CD24","CD56"), blend = TRUE)
FeaturePlot(seu, features = "CD56", split.by = "RNA_snn_res.1")
FeaturePlot(seu, features = "CD56", split.by = "RNA_snn_res.1", cols = 4)
FeaturePlot(seu, features = "CD56", split.by = "RNA_snn_res.1")
RidgePlot(seu, features = allAB, ncol = 3)
RidgePlot(seu, features = c("CD56","CD24"), ncol = 2)
VlnPlot(seu, features = c("CD56","CD24"), ncol = 2)
FeaturePlot(seu, features = "CD56", split.by = "RNA_snn_res.0.25")
FeaturePlot(seu, features = "CD56", split.by = "RNA_snn_res.0.25", ncol = 3)
saveRDS(seu, "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outsjan20-9000cells/SeuratfromFlowsom.rds")
library(phenograph)
# install
if(!require(devtools)){
install.packages("devtools") # If not already installed
}
devtools::install_github("JinmiaoChenLab/Rphenograph")
