length(down)
down <- rownames(deg.neurons %>% filter(avg_log2FC < -0.5))
length(down)
down
down <- down[17:36]
down
up.down <- c(up,down)
DoHeatmap(sub.neur, group.by = 'orig.ident', features = up.down)
DotPlot(sub.neur, group.by = 'orig.ident', features = up.down) + RotatedAxis()
write.csv(deg.neurons.da, paste(output_path, "DEG.neurons1vsneurons2inDANeurons.csv"))
library(enrichR)
setEnrichrSite("Enrichr") # Human genes
# list of all the databases
dbs <- listEnrichrDbs()
dbs
Neurons1.up <- deg.neurons %>% filter(p_adj_val < 0.05 & avg_log2FC > 0)
View(deg.neurons)
Neurons1.up <- deg.neurons %>% filter(p_val_adj < 0.05 & avg_log2FC > 0)
genes <- rownames(Neuron1.up)
View(Neurons1.up)
genes <- rownames(Neuron1.up)
genes <- rownames(Neurons1.up)
Er <- enrichr(genes, databases = db)
# for neurons
library(enrichR)
setEnrichrSite("Enrichr") # Human genes
# list of all the databases
# libaries with cell types
#dbs <- listEnrichrDbs()
#dbs
db <- c('GO_Cellular_Component_2018','GO_Biological_Process_2018',
'GO_Molecular_Function_2018')
Neurons1.up <- deg.neurons %>% filter(p_val_adj < 0.05 & avg_log2FC > 0)
genes <- rownames(Neurons1.up)
Er <- enrichr(genes, databases = db)
print(plotEnrich(Er[[1]], showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value"))
print(plotEnrich(Er[[2]], showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value"))
print(plotEnrich(Er[[3]], showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value"))
t.GOcell <- Er[[1]] %>% select(Term, Genes, Combined.Score)
print(t.GOcell)
t.GObio <- Er[[2]] %>% select(Term, Genes, Combined.Score)
print(t.GObio)
t.GOmol <- Er[[3]] %>% select(Term, Genes, Combined.Score)
print(t.CellMarker)
t.GOcell <- Er[[1]] %>% select(Term, Genes, Combined.Score)
print(t.GOcell)
t.GObio <- Er[[2]] %>% select(Term, Genes, Combined.Score)
print(t.GObio)
t.GOmol <- Er[[3]] %>% select(Term, Genes, Combined.Score)
print(t.GOmol)
print(plotEnrich(Er[[1]], showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value"))
print(plotEnrich(Er[[2]], showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value"))
print(plotEnrich(Er[[3]], showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value"))
t.GObio <- Er[[2]] %>% select(Term, Genes, Combined.Score)
print(t.GObio)
View(deg.neurons)
original_gene_list <- deg.neurons$avg_log2FC
names(original_gene_list) <- rownames(deg.neurons)
library(clusterProfiler)
library(ClusterProfiler)
library('clusterProfiler')
BiocManager::install("clusterProfiler", version = "3.8")
BiocManager::install("clusterProfiler")
BiocManager::install("pathview")
BiocManager::install("enrichplot")
library(clusterProfiler)
library(enrichplot)
# we use ggplot2 to add x axis labels (ex: ridgeplot)
library(ggplot2)
# need a gene list sorted in decreasing order
# get the log2FC
original_gene_list <- deg.neurons$avg_log2FC
# name the vector - add the gene names
names(original_gene_list) <- rownames(deg.neurons)
gene_list = na.omit(original_gene_list)
gene_list = sort(gene_list, decreasing = TRUE)
# get the gene set enrichment list
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = organism,
pAdjustMethod = "none")
BiocManager::install(organism, character.only = TRUE)
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
library(org.Hs.eg.db)
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "BH")
gene_list
?gseGO
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "BH")
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "ENTREZID",
nPerm = 10000,
minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "BH")
gse <- gseGO(geneList=gene_list,
ont ="ALL",
keyType = "SYMBOL",
nPerm = 10000,
minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "BH")
require(DOSE)
dotplot(gse, showCategory=10, split=".sign") + facet_grid(.~.sign)
View(gse)
dotplot(gse, showCategory=20, split=".sign") + facet_grid(.~.sign)
gse <- gseGO(geneList=gene_list,
ont ="CC",
keyType = "SYMBOL",
minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "BH")
require(DOSE)
dotplot(gse, showCategory=20, split=".sign") + facet_grid(.~.sign)
gse <- gseGO(geneList=gene_list,
ont ="CC",
keyType = "SYMBOL",
minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
require(DOSE)
dotplot(gse, showCategory=20, split=".sign") + facet_grid(.~.sign)
gse <- gseGO(geneList=gene_list,
ont ="BP",
keyType = "SYMBOL",
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "none")
require(DOSE)
dotplot(gse, showCategory=20, split=".sign") + facet_grid(.~.sign)
emapplot(gse, showCategory = 10)
View(gse)
# for neurons
library(enrichR)
setEnrichrSite("Enrichr") # Human genes
# list of all the databases
# libaries with cell types
#dbs <- listEnrichrDbs()
#dbs
db <- c('GO_Cellular_Component_2018','GO_Biological_Process_2018',
'GO_Molecular_Function_2018')
Neurons1.up <- deg.neurons %>% filter(p_val_adj < 0.05 & avg_log2FC > 0)
genes <- rownames(Neurons1.up)
Er <- enrichr(genes, databases = db)
print(plotEnrich(Er[[1]], showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value"))
print(plotEnrich(Er[[2]], showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value"))
print(plotEnrich(Er[[3]], showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value"))
t.GOcell <- Er[[1]] %>% select(Term, Genes, Combined.Score)
View(Neurons1.up)
View(Er)
t.GOcell <- Er[[1]] %>% select(Term, Genes, Combined.Score)
library(dplyr)
t.GOcell <- Er[[1]] %>% select(Term, Genes, Combined.Score)
t.GOcell <- Er[[1]]
t.GOcell
plotEnrich(t.GOcell, showTerms = 10)
View(t.GOcell)
# for neurons
library(enrichR)
setEnrichrSite("Enrichr") # Human genes
# list of all the databases
# libaries with cell types
#dbs <- listEnrichrDbs()
#dbs
db <- c('GO_Cellular_Component_2018','GO_Biological_Process_2018',
'GO_Molecular_Function_2018')
Neurons1.up <- deg.neurons %>% filter(p_val_adj < 0.05 & avg_log2FC > 0)
genes <- rownames(Neurons1.up)
Er <- enrichr(genes, databases = db)
print(plotEnrich(Er[[1]], showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value"))
print(plotEnrich(Er[[2]], showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value"))
print(plotEnrich(Er[[3]], showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value"))
library(dplyr)
t.GOcell.n <- Er[[1]]
t.GObio.n <- Er[[2]]
t.GOmol.n <- Er[[3]]
# synpathetic neurvous sytem dev
# 	FZD3;CTNNB1;SOX11;ASCL1;SOX4
#negative regulation of neuron differentiation (GO:0045665)
# 	EFNB2;ID2;ID1;ID3;HES1;SOX9;CALR;ASCL1
# negative regulation of neurogenesis (GO:0050768)
# ID2;ID1;ID3;PAX6;CALR;ASCL1
# neuronal differentiation
# 	FZD3;ID2;ID1;ID3;CTNNB1;SOX11;OTX2;PAX6;ASCL1;SOX4
# 	ID2;ID1;ID3;SOX11;TCF4;CALR;ASCL1
Neurons2.up <- deg.neurons %>% filter(p_val_adj < 0.05 & avg_log2FC < 0)
genes <- rownames(Neurons2.up)
Er <- enrichr(genes, databases = db)
print(plotEnrich(Er[[1]], showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value"))
print(plotEnrich(Er[[2]], showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value"))
print(plotEnrich(Er[[3]], showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value"))
t.GOcell.d <- Er[[1]] #%>% select(Term, Genes, Combined.Score)
t.GObio.d <- Er[[2]] %>% #select(Term, Genes, Combined.Score)
print(t.GObio)
t.GOmol.d <- Er[[3]] %>% #select(Term, Genes, Combined.Score)
t.GOmol.d <- Er[[3]]
t.GOcell.n
t.GObio.n
t.GObio.d
View(t.GObio.n)
View(t.GOcell)
setEnrichrSite("Enrichr") # Human genes
# list of all the databases
# libaries with cell types
#dbs <- listEnrichrDbs()
#dbs
db <- c('GO_Cellular_Component_2018','GO_Biological_Process_2018',
'GO_Molecular_Function_2018')
Neurons1.up <- deg.neurons %>% filter(p_val_adj < 0.05 & avg_log2FC > 0)
genes <- rownames(Neurons1.up)
Er <- enrichr(genes, databases = db)
print(plotEnrich(Er[[2]], showTerms = 20, numChar = 40, y = "Count", orderBy = "Odds.Ratio"))
print(plotEnrich(Er[[2]], showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value"))
print(plotEnrich(Er[[2]], showTerms = 20, numChar = 40, y = "Count", orderBy = "Combined.Score"))
t.GObio.da1 <- Er[[2]]
Neurons2.up <- deg.neurons %>% filter(p_val_adj < 0.05 & avg_log2FC < 0)
genes <- rownames(Neurons2.up)
Er <- enrichr(genes, databases = db)
print(plotEnrich(Er[[2]], showTerms = 20, numChar = 40, y = "Count", orderBy = "Odds.Ratio"))
print(plotEnrich(Er[[2]], showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value"))
print(plotEnrich(Er[[2]], showTerms = 20, numChar = 40, y = "Count", orderBy = "Combined.Score"))
t.GObio.da2 <- Er[[2]]
plotEnrich(t.GObio.da1, showTerms = 10, numChar = 40, y = "Count", orderBy = "Combined.Score")
plotEnrich(t.GObio.da1, showTerms = 10, numChar = 40, y = "Count", orderBy = "Combined.Score")
plotEnrich(t.GObio.da1, showTerms = 10, numChar = 40, y = "Count", orderBy = "Overlap")
print(plotEnrich(Er[[2]], showTerms = 20, numChar = 40, y = "Count", orderBy = "Odds.Ratio"))
print(plotEnrich(Er[[2]], showTerms = 20, numChar = 40, y = "Count", orderBy = "P.value"))
print(plotEnrich(Er[[2]], showTerms = 20, numChar = 40, y = "Count", orderBy = "Combined.Score"))
Idents(seu.sc) <- 'Cell_Type2'
all.neurons <- subset(seu.sc,idents = c("DANeurons","Neurons") )
regulate.genes <- c("FZD3","CTNNB1","SOX11","ASCL1","SOX4","ID2","ID1","ID3",
"SOX11","TCF4","CALR","CTNNB1","SOX11","OTX2","PAX6")
DotPlot(all.neurons, group.by = "orig.ident", split.by = 'Cell_Subtype_Markers')
DotPlot(all.neurons, group.by = "orig.ident", split.by = 'Cell_Subtype_Markers', features = regulate.genes)
DotPlot(all.neurons, split.by = "orig.ident", group.by = 'Cell_Subtype_Markers', features = regulate.genes)
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes)
regulate.genes <- c("FZD3","CTNNB1","SOX11","ASCL1","SOX4","ID2","ID1","ID3",
"SOX11","TCF4","CALR","CTNNB1","OTX2","PAX6")
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes)
regulate.genes <- c("FZD3","CTNNB1","SOX11","ASCL1","SOX4","ID2","ID1","ID3",
"TCF4","CALR","CTNNB1","OTX2","PAX6")
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes)
regulate.genes <- c("FZD3","CTNNB1","SOX11","ASCL1","SOX4","ID2","ID1","ID3",
"TCF4","CALR","OTX2","PAX6","HES1","SOX9")
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes)
Idents(seu.sc) <- 'orig.ident'
all.neurons <- subset(all.neurons,idents = c("Neurons1","Neurons2") )
Idents(all.neurons) <- 'orig.ident'
all.neurons <- subset(all.neurons,idents = c("Neurons1","Neurons2") )
regulate.genes <- c("FZD3","CTNNB1","SOX11","ASCL1","SOX4","ID2","ID1","ID3",
"TCF4","CALR","OTX2","PAX6","HES1","SOX9")
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes)
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes,
split.by = 'Cell_Type2') + RotatedAxis()
t.GObio.da1
regulate.genes <- c("FZD3","CTNNB1","SOX11","ASCL1","SOX4",
"TCF4","CALR","OTX2","PAX6","EFNB2")
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes,
split.by = 'Cell_Type2') + RotatedAxis()
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes) + RotatedAxis()
up
regulate.genes <- c("FZD3","CTNNB1","SOX11","ASCL1","SOX4",
"TCF4","CALR","OTX2","PAX6","EFNB2",
"CD24","KCNQ1OT1","CCNG2","ASCL1","HES6")
# top up in neurons 1
# "CD24"     "KCNQ1OT1" "CCNG2"    "ASCL1"    "HES6"
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes,
split.by = 'Cell_Type2') + RotatedAxis()
regulate.genes <- c("FZD3","CTNNB1","SOX11","ASCL1","SOX4",
"TCF4","CALR","OTX2","PAX6","EFNB2",
"CD24","KCNQ1OT1","CCNG2","HES6")
# top up in neurons 1
# "CD24"     "KCNQ1OT1" "CCNG2"    "ASCL1"    "HES6"
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes,
split.by = 'Cell_Type2') + RotatedAxis()
# all the expression levels are lower in regular neurons than DA neurons
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes) + RotatedAxis()
t.GObio.da2
regulate.genes <- c("FTH1","FTL","APOE","SAT1","PTN","GABARAP","PTGDS")
down
regulate.genes <- c("FTH1","FTL","APOE","SAT1","PTN","GABARAP","PTGDS","SPARCL1",
"RPL17","MTRNR2L12","MTRNR2L8","SNHG25","SELENOW",
"CRYAB", "PEA15", "ATP1A2", "SELENOK","IGFBP7", "RAB3B")
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes) + RotatedAxis()
regulate.genes <- c("FTH1","FTL","PTN","PTGDS","SPARCL1",
"SELENOW","CRYAB")
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes) + RotatedAxis()
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes,
split.by = 'Cell_Type2') + RotatedAxis()
#
down <- rownames(deg.neurons %>% filter(avg_log2FC < -6))
length(down)
down
regulate.genes <- c("FTH1","FTL","PTN","PTGDS","SPARCL1",
"SELENOW","CRYAB", "MALAT1", "MT-ND2", "MT-CO1", "MT-CO2",
"MT-ATP6", "MT-CO3", "MT-ND3", "MT-CYB")
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes) + RotatedAxis()
regulate.genes <- c("FZD3","ASCL1","SOX4",
"TCF4","CALR","PAX6",
"CD24","KCNQ1OT1","CCNG2","MT-ND2", "MT-CO1", "MT-CO2",
"MT-ATP6", "MT-CO3", "MT-ND3",
"FTH1","FTL",
"CRYAB")
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes) + RotatedAxis()
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes) + RotatedAxis()
DoHeatmap(all.neurons, group.by = 'orig.ident', features = regulate.genes)
DoHeatmap(all.neurons, group.by = 'orig.ident', features = regulate.genes)
regulate.genes <- c("FTH1","FTL","APOE","SAT1","PTN","GABARAP","PTGDS","SPARCL1",
"RPL17","MTRNR2L12","MTRNR2L8","SNHG25","SELENOW",
"CRYAB", "PEA15", "ATP1A2", "SELENOK","IGFBP7", "RAB3B")
DoHeatmap(all.neurons, group.by = 'orig.ident', features = regulate.genes)
regulate.genes <- c("FZD3","ASCL1","SOX4",
"TCF4","CALR","PAX6",
"CD24","KCNQ1OT1","CCNG2","MT-ND2", "MT-CO1", "MT-CO2",
"MT-ATP6", "MT-CO3", "MT-ND3",
"FTH1","FTL",
"CRYAB")
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes) + RotatedAxis()
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes) + RotatedAxis()
pdf(paste(output_path,"DotPlotDEG_N1vsN2.pdf"))
DotPlot(all.neurons, group.by = 'orig.ident', features = regulate.genes) + RotatedAxis()
dev.off()
print(plotEnrich(Er[[2]], showTerms = 20, numChar = 40, y = "Count", orderBy = "Ajusted.P.value"))
plotEnrich(t.GObio.da1, showTerms = 10, numChar = 40, y = "Count", orderBy = "Combined.Score")
plotEnrich(t.GObio.da1, showTerms = 10, numChar = 40, y = "Count", orderBy = "Overlap")
pdf(paste(output_path,"GOresultesNeurons1vs2.pdf"))
plotEnrich(t.GObio.da1, showTerms = 10, numChar = 40, y = "Count", orderBy = "Combined.Score")
plotEnrich(t.GObio.da1, showTerms = 10, numChar = 40, y = "Count", orderBy = "Overlap")
plotEnrich(t.GObio.da2, showTerms = 10, numChar = 40, y = "Count", orderBy = "Combined.Score")
plotEnrich(t.GObio.da2, showTerms = 10, numChar = 40, y = "Count", orderBy = "Overlap")
dev.off()
pdf(paste(output_path,"GOresultesNeurons1vs2.pdf"))
plotEnrich(t.GObio.da1, showTerms = 10, numChar = 40, y = "Count", orderBy = "Combined.Score") +
theme(text = element_text(size=16, colour = "black"))
plotEnrich(t.GObio.da1, showTerms = 10, numChar = 40, y = "Count", orderBy = "Overlap")+
theme(text = element_text(size=16, colour = "black"))
plotEnrich(t.GObio.da2, showTerms = 10, numChar = 40, y = "Count", orderBy = "Combined.Score")+
theme(text = element_text(size=16, colour = "black"))
plotEnrich(t.GObio.da2, showTerms = 10, numChar = 40, y = "Count", orderBy = "Overlap")+
theme(text = element_text(size=16, colour = "black"))
dev.off()
pdf(paste(output_path,"GOresultesNeurons1vs2.pdf"), width = 12, height = 6)
plotEnrich(t.GObio.da1, showTerms = 10, numChar = 40, y = "Count", orderBy = "Combined.Score") +
theme(text = element_text(size=16, colour = "black"))
plotEnrich(t.GObio.da1, showTerms = 10, numChar = 40, y = "Count", orderBy = "Overlap")+
theme(text = element_text(size=16, colour = "black"))
plotEnrich(t.GObio.da2, showTerms = 10, numChar = 40, y = "Count", orderBy = "Combined.Score")+
theme(text = element_text(size=16, colour = "black"))
plotEnrich(t.GObio.da2, showTerms = 10, numChar = 40, y = "Count", orderBy = "Overlap")+
theme(text = element_text(size=16, colour = "black"))
dev.off()
AST23 <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/AST23_BrainComm/MBOclusters_names29072021.rds")
# Midbrain  AIW002 120 days in culture
AIW120 <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/AIWtrio120days/MOintegratedClusterK123res0.8.names_nov16_2021")
# Midbrain AIW002 60 days in culture
AIW60 <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/AIWtrio60days/AWI002ParkinKOPinkKO60days_labels_14052022.rds")
seu.r <- AST23
seu.q <- seu.sc
View(AST23)
colnames(AST23@meta.data)
unique(AST23$cluster_labels)
seu.r <- AST23
seu.q <- seu.sc
anchors <- FindTransferAnchors(reference = seu.r, query = seu.q, dims = 1:25)
print("getting predictions")
predictions <- TransferData(anchorset = anchors, refdata = seu.r$cluster_labels, k.weight = 50)
seu.q <- AddMetaData(seu.q, predictions$predicted.id, col.name = "prediction")
seu.q <- AddMetaData(seu.q, predictions$prediction.score.max, col.name = "prediction.score.max")
seu.q$AST23.pred <- ifelse(seu.q$prediction.score.max > 0.4, seu.q$prediction, "none")
DimPlot(seu.sc, group.by = 'AST23.pred')
DimPlot(seu.q, group.by = 'AST23.pred')
saveRDS((seu.sc,paste(pathway, "CombinedLabeledMarkers14102022.RDS"))
saveRDS(seu.sc,,paste(pathway, "CombinedLabeledMarkers14102022.RDS"))
saveRDS(seu.sc,paste(pathway, "CombinedLabeledMarkers14102022.RDS"))
seu.r <- AIW60
colnames(seu.r@meta.data)
anchors <- FindTransferAnchors(reference = seu.r, query = seu.q, dims = 1:25)
print("getting predictions")
predictions <- TransferData(anchorset = anchors, refdata = seu.r$cluster.ids, k.weight = 50)
seu.q <- AddMetaData(seu.q, predictions$predicted.id, col.name = "prediction")
seu.q <- AddMetaData(seu.q, predictions$prediction.score.max, col.name = "prediction.score.max")
seu.q$AIW60.pred <- ifelse(seu.q$prediction.score.max > 0.4, seu.q$prediction, "none")
DimPlot(seu.q, group.by = 'AIW60.pred')
seu.r <- AIW120
colnames(seu.r@meta.data)
View(seu.r)
unique(seu.r$res08names3)
unique(seu.r$res08names)
unique(seu.r$res08names2)
anchors <- FindTransferAnchors(reference = seu.r, query = seu.q, dims = 1:25)
print("getting predictions")
predictions <- TransferData(anchorset = anchors, refdata = seu.r$res08names2, k.weight = 50)
seu.q <- AddMetaData(seu.q, predictions$predicted.id, col.name = "prediction")
seu.q <- AddMetaData(seu.q, predictions$prediction.score.max, col.name = "prediction.score.max")
seu.q$AIW120.pred <- ifelse(seu.q$prediction.score.max > 0.4, seu.q$prediction, "none")
DimPlot(seu.q, group.by = 'AIW120.pred')
DAsubtypes <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/Macosko_Data/DAsubgroups_processed.Rds")
seu.r <- DAsubtypes
colnames(seu.r@meta.data)
t.lables <- as.data.frame(table(seu.q$AST23.pred, seu.q$Cell_Subtype_Markers))
t.lables$Freq <- as.double(t.lables$Freq)
top.prediction <-as.data.frame(t.lables  %>% group_by(Var1)  %>% top_n(1, Freq))
top.prediction
t.lables <- as.data.frame(table(seu.q$Cell_Subtype_Markers,seu.q$AST23.pred))
t.lables$Freq <- as.double(t.lables$Freq)
top.prediction <-as.data.frame(t.lables  %>% group_by(Var1)  %>% top_n(1, Freq))
top.prediction
View(top.prediction)
t.lables <- as.data.frame(table(seu.q$Cell_Subtype_Markers,seu.q$AST23.pred))
t.lables$Freq <- as.double(t.lables$Freq)
top.prediction <-as.data.frame(t.lables  %>% group_by(Var1)  %>% top_n(3, Freq))
top.prediction
View(top.prediction)
top.prediction <-as.data.frame(t.lables  %>% group_by(Var1)  %>% top_n(1, Freq))
top.prediction
View(top.prediction)
t.lables <- as.data.frame(table(seu.q$Cell_Subtype_Markers,seu.q$AIW120.pred))
t.lables$Freq <- as.double(t.lables$Freq)
top.prediction <-as.data.frame(t.lables  %>% group_by(Var1)  %>% top_n(3, Freq))
top.prediction
View(t.lables)
top.prediction <-as.data.frame(t.lables  %>% group_by(Var1)  %>% top_n(1, Freq))
top.prediction
View(top.prediction)
t.lables <- as.data.frame(table(seu.q$Cell_Subtype_Markers,seu.q$AST23.pred))
t.lables$Freq <- as.double(t.lables$Freq)
top.prediction <-as.data.frame(t.lables  %>% group_by(Var1)  %>% top_n(3, Freq))
top.prediction
top.prediction <-as.data.frame(t.lables  %>% group_by(Var1)  %>% top_n(1, Freq))
top.prediction
View(t.lables)
View(top.prediction)
t.lables <- as.data.frame(table(seu.q$Cell_Subtype_Markers,seu.q$AIW60.pred))
t.lables$Freq <- as.double(t.lables$Freq)
top.prediction <-as.data.frame(t.lables  %>% group_by(Var1)  %>% top_n(3, Freq))
top.prediction
View(top.prediction)
View(t.lables)
top.prediction <-as.data.frame(t.lables  %>% group_by(Var1)  %>% top_n(1, Freq))
top.prediction
View(top.prediction)
View(t.lables)
t.lables <- as.data.frame(table(seu.q$Cell_Subtype_Markers,seu.q$AIW120.pred))
t.lables$Freq <- as.double(t.lables$Freq)
View(t.lables)
seu.r <- AIW120
colnames(seu.r@meta.data)
anchors <- FindTransferAnchors(reference = seu.r, query = seu.q, dims = 1:25)
t.lables <- as.data.frame(table(seu.q$Cell_Subtype_Markers,seu.q$AIW120.pred))
t.lables$Freq <- as.double(t.lables$Freq)
top.prediction <-as.data.frame(t.lables  %>% group_by(Var1)  %>% top_n(3, Freq))
top.prediction
top.prediction <-as.data.frame(t.lables  %>% group_by(Var1)  %>% top_n(1, Freq))
top.prediction
