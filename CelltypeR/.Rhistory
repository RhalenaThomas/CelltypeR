write.csv(cor2, paste(output_path, "AllcellsCor_thesh55.csv"),sep = "")
cor3 <- find_correlation(test = input_df,
reference = df1,
min_corr = 0.05,
min_diff = 0.05)
write.csv(cor3, paste(output_path, "AllcellsCor_thesh05.csv"),sep = "")
#### visualize the correlation results
pdf(paste(output_path, "CorrelationPlots.pdf",sep = ""))
print(plot_corr(cor, threshold = 0.35, min_cells = 400))
print(plot_corr(cor2, threshold = 0.55, min_cells = 400))
print(plot_corr(cor3, threshold = 0.05, min_cells = 400))
dev.off()
#### add the correlation results into the seurat object
# add the correlation predictions to the meta data
seu <- AddMetaData(object=seu, metadata=cor$cell.label, col.name = 'cor.labels3505')
# add the correlation predictions to the meta data
seu <- AddMetaData(object=seu, metadata=cor2$cell.label, col.name = 'cor.labels5505')
# add the correlation predictions to the meta data
seu <- AddMetaData(object=seu, metadata=cor3$cell.label, col.name = 'cor.labels0505')
### visualize the correlation labels
pdf(paste(output_path, "CorrelationPlotsUMAPs.pdf",sep = ""), width = 20, height = 6)
print(DimPlot(seu, group.by = 'cor.labels3505', label = TRUE))
print(DimPlot(seu, group.by = 'cor.labels5505', label = TRUE))
print(DimPlot(seu, group.by = 'cor.labels0505', label = TRUE))
dev.off()
### add the cor labels per cluster - will just label the highest cluster number
cor.ann <- get_annotation(seu, seu.cluster = seu$RNA_snn_res.1,
seu.label = seu$cor.labels3505, top_n = 3,
filter_out = c("Unknown","unknown","Mixed","unassigned","Unassigned"),
Label = "CAM3505")
seu <- annotate(seu,annotations = cor.ann$CAM3505,
to_label = "RNA_snn_res.1",
annotation_name = "CAM35")
cor.ann <- get_annotation(seu, seu.cluster = seu$RNA_snn_res.1,
seu.label = seu$cor.labels5505, top_n = 3,
filter_out = c("Unknown","unknown","Mixed","unassigned","Unassigned"),
Label = "CAM5505")
seu <- annotate(seu,annotations = cor.ann$CAM5505,
to_label = "RNA_snn_res.1",
annotation_name = "CAM55")
cor.ann <- get_annotation(seu, seu.cluster = seu$RNA_snn_res.1,
seu.label = seu$cor.labels0505, top_n = 3,
filter_out = c("Unknown","unknown","Mixed","unassigned","Unassigned"),
Label = "CAM0505")
seu <- annotate(seu,annotations = cor.ann$CAM0505,
to_label = "RNA_snn_res.1",
annotation_name = "CAM05")
View(cor)
View(df1)
View(input_df)
View(df1)
dim(input_df)
input_df <- input_df %>% select(c("CD24","CD56","CD29","CD15",
"CD184","CD133","CD71","CD44",
"GLAST","AQP4","HepaCAM",
"CD140a","O4","Batch"))
dim(input_df)
cor <- find_correlation(test = input_df,
reference = df1,
min_corr = 0.35,
min_diff = 0.05)
write.csv(cor, paste(output_path, "AllcellsCor_thesh35.csv"),sep = "")
write.csv(cor, paste(output_path, "AllcellsCor_thesh35.csv", sep = ""))
View(df1)
print(dim(input_df))
print(colnames(input_df))
head(input_df)
View(input_df)
setwd("~/Documents/Data/FlowCytometry/PhenoID/Analysis/NatMethodJuneSubmission")
setwd("~/Documents/Data/FlowCytometry/PhenoID/Analysis/NatMethodJuneSubmission")
getwd()
setwd("~/Documents/Data/FlowCytometry/PhenoID/Analysis/NatMethodJuneSubmission/")
getwd()
Idents(seu) <- "RNA_snn_res.0.25"
pdf("ExpressionRes025.pdf")
# UMAPs
for (i in AB) {
print(FeaturePlot(seu, features = i, min.cutoff = 'q1', max.cutoff = 'q97', label = TRUE, raster = FALSE))
}
# heatmap
clustnum <- length(levels(seu))-1
print(plotmean(plot_type = 'heatmap',seu = seu, group = 'RNA_snn_res.0.25', markers = AB,
var_names = 0:clustnum, slot = 'scale.data', xlab = "Cluster",
ylab = "Markers"))
dev.off()
Idents(seu) <- "RNA_snn_res.0.5"
pdf("All9MBOExpressionRes05.pdf")
# UMAPs
for (i in AB) {
print(FeaturePlot(seu, features = i, min.cutoff = 'q1', max.cutoff = 'q97',
label = TRUE, raster = FALSE))
}
# heatmap
clustnum <- length(levels(seu))-1
pdf("HeatmapRes05expression.pdf")
print(plotmean(plot_type = 'heatmap',seu = seu, group = 'RNA_snn_res.0.5', markers = AB,
var_names = 0:clustnum, slot = 'scale.data', xlab = "Cluster",
ylab = "Markers"))
dev.off()
Idents(seu) <- "RNA_snn_res.0.5"
pdf("All9MBOExpressionRes05.pdf")
# UMAPs
for (i in AB) {
print(FeaturePlot(seu, features = i, min.cutoff = 'q1', max.cutoff = 'q97',
label = TRUE, raster = FALSE))
}
# heatmap
clustnum <- length(levels(seu))-1
pdf("HeatmapRes05expression.pdf")
print(plotmean(plot_type = 'heatmap',seu = seu, group = 'RNA_snn_res.0.5', markers = AB,
var_names = 0:clustnum, slot = 'scale.data', xlab = "Cluster",
ylab = "Markers"))
dev.off()
View(df1)
View(seu)
write.csv("AllcellsCor_thesh35.csv")
write.csv(cor,"AllcellsCor_thesh35.csv")
write.csv(cor2,"AllcellsCor_thesh55.csv")
write.csv(cor3,"AllcellsCor_thesh05.csv")
pdf("AllCellsCorrelationPlots.pdf")
print(plot_corr(cor, threshold = 0.35, min_cells = 400))
print(plot_corr(cor2, threshold = 0.55, min_cells = 400))
print(plot_corr(cor3, threshold = 0.05, min_cells = 400))
dev.off()
Idents(seu) <- "RNA_snn_res.0.5"
pdf("All9MBOExpressionRes05.pdf")
# UMAPs
for (i in AB) {
print(FeaturePlot(seu, features = i, min.cutoff = 'q1', max.cutoff = 'q97',
label = TRUE, raster = FALSE))
}
# heatmap
clustnum <- length(levels(seu))-1
#pdf("HeatmapRes05expression.pdf")
print(plotmean(plot_type = 'heatmap',seu = seu, group = 'RNA_snn_res.0.5', markers = AB,
var_names = 0:clustnum, slot = 'scale.data', xlab = "Cluster",
ylab = "Markers"))
dev.off()
View(seu)
Idents(seu) <- "RNA_snn_res.1"
pdf("ExpressionRes1.pdf")
# UMAPs
for (i in AB) {
print(FeaturePlot(seu, features = i, min.cutoff = 'q1', max.cutoff = 'q97', label = TRUE, raster = FALSE))
}
# heatmap
clustnum <- length(levels(seu))-1
print(plotmean(plot_type = 'heatmap',seu = seu, group = 'RNA_snn_res.1', markers = AB,
var_names = 0:clustnum, slot = 'scale.data', xlab = "Cluster",
ylab = "Markers"))
dev.off()
View(df1)
Idents(seu) <- "RNA_snn_res.1"
pdf("ExpressionRes1.pdf")
# UMAPs
for (i in AB) {
print(FeaturePlot(seu, features = i, min.cutoff = 'q1', max.cutoff = 'q97', label = TRUE, raster = FALSE))
}
# heatmap
clustnum <- length(levels(seu))-1
print(plotmean(plot_type = 'heatmap',seu = seu, group = 'RNA_snn_res.1', markers = AB,
var_names = 0:clustnum, slot = 'scale.data', xlab = "Cluster",
ylab = "Markers"))
dev.off()
?FeaturePlot
pdf("All9MBO_UMAPfeatures.pdf")
print(FeaturePlot(seu, features = AB, group = 'RNA_snn_res.1', min.cutoff = 'q1',
max.cutoff = 'q97', label = TRUE, raster = FALSE,
ncol = 4))
dev.off()
pdf("All9MBO_UMAPfeatures.pdf")
print(FeaturePlot(seu, features = AB, min.cutoff = 'q1',
max.cutoff = 'q97', label = TRUE, raster = FALSE,
ncol = 4))
dev.off()
View(cor)
View(input_df)
reference_data <- read.csv(reference_path <- "/Users/rhalenathomas/GITHUB/CelltypeR/ExampleOuts/FinalReferenceMatrix.csv")
# the reference matrix need to be in the format cell types as rows and markers as columns
# there is a column X with the cell type names
df1 <- reference_data
rownames(df1) <- df1$X # add row names (these are the markers)
View(df1)
df1 <- df1 %>% select(-"X") # remove the column with the marker names
colnames(df1) <- c("Astrocytes","Endothelial","Epithelial","Neurons",
"NPC","OPC","Oligo","RadialGlia","StemCell")
df.ref <- as.data.frame(t(df1))
View(df.ref)
df.ref$X <- rownames(df.ref)
cor <- find_correlation(test = input_df,
reference = df1,
min_corr = 0.35,
min_diff = 0.05)
write.csv(cor,"AllcellsCor_thesh35.csv")
View(cor)
cor <- find_correlation(test = input_df,
reference = df.ref,
min_corr = 0.35,
min_diff = 0.05)
View(cor)
View(cor2)
View(cor)
View(df.ref)
View(df.ref)
View(input_df)
input_df$X <- input_df$Batch
input_df$X <- rownames(input_df)
dim(input_df)
test <- input_df[1:100,1:15]
cor <- find_correlation(test = test,
reference = df.ref,
min_corr = 0.35,
min_diff = 0.05)
View(cor)
input_df$X <- input_df$Batch
test <- input_df[1:100,1:15]
cor <- find_correlation(test = test,
reference = df.ref,
min_corr = 0.35,
min_diff = 0.05)
View(cor)
df.ref <- as.data.frame(t(df1))
cor <- find_correlation(test = test,
reference = df.ref,
min_corr = 0.35,
min_diff = 0.05)
View(cor)
df.ref$X <- rownames(df.ref)
input_df$X <- rownames(input_df)
dim(input_df)
test <- input_df[1:100,1:15]
input_df <- read.csv(test_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/9MBO/prepro_outs/retrotransformed_flowset.csv")
View(cor)
View(cor)
View(cor)
reference_data <- read.csv(reference_path <- "/Users/rhalenathomas/GITHUB/CelltypeR/ExampleOuts/FinalReferenceMatrix.csv")
# the reference matrix need to be in the format cell types as rows and markers as columns
# there is a column X with the cell type names
df1 <- reference_data
rownames(df1) <- df1$X # add row names (these are the markers)
df1 <- df1 %>% select(-"X") # remove the column with the marker names
colnames(df1) <- c("Astrocytes","Endothelial","Epithelial","Neurons",
"NPC","OPC","Oligo","RadialGlia","StemCell")
df.ref <- as.data.frame(t(df1))
df.ref$X <- rownames(df.ref)
test <- input_df[1:100]
View(test)
cor <- find_correlation(test = test,
reference = df.ref,
min_corr = 0.35,
min_diff = 0.05)
View(cor)
View(input_df)
View(test)
test <- input_df[1:100]
dim(input_df)
test <- input_df[1:100, 1:19]
cor <- find_correlation(test = test,
reference = df.ref,
min_corr = 0.35,
min_diff = 0.05)
View(cor)
cor <- find_correlation(test = input_df,
reference = df.ref,
min_corr = 0.35,
min_diff = 0.05)
View(cor)
write.csv(cor,"AllcellsCor_thesh35.csv")
cor2 <- find_correlation(test = input_df,
reference = df.ref,
min_corr = 0.55,
min_diff = 0.05)
write.csv(cor2,"AllcellsCor_thesh55.csv")
for (i in AB) {
print(FeaturePlot(seu, features = i, min.cutoff = 'q1', max.cutoff = 'q97', label = TRUE, raster = FALSE))
}
3+5
for (i in AB) {
print(FeaturePlot(seu, features = i, min.cutoff = 'q1', max.cutoff = 'q97', label = TRUE, raster = FALSE))
}
DimPlot(seu)
View(seu)
getwd()
colnames(seu@meta.data)
DimPlot(seu, group.by = "RNA_snn_res.0.5", label = TRUE)
version(data.table)
packageVersion(data.table)
library(data.table)
package_version("data.table")
packageVersion("data.table")
setwd("~/GITHUB/CelltypeR/CelltypeR")
setwd("~/GITHUB/CelltypeR/CelltypeR")
getwd
getwd()
devtools::build()
devtools::build()
devtools::build()
getwd()
devtools::build()
getwd()
setwd("/Users/rhalenathomas/GITHUB/CelltypeR/CelltypeR")
roxygen2::roxygenise()
devtools::build()
devtools::install()
input_path <- "/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/FlowDataFiles/9MBO/"
# 1.a Read in FlowJo Files
# In Figure 3 downsample to 9000 where possible
# Here downsample to 1000 to speed up computation
flowset <- fsc_to_fs(input_path, downsample = 1000)
# down sample can be a number, 'none' or 'min'
# look at file names and rename with shorter sample names
library(flowWorkspace)  # this library has the function "sampleNames"
sampleNames(flowset)
sampleNames(flowset) <- sampleNames(flowset) <- c("3450_0306","AIW002_0306","AJG001C_0306","3450_0317A","AIW002_0317A","AJG001C_0317A","3450_0317B","AIW002_0317B","AJG001C_0317B")
sampleNames(flowset)
# if we want to save the flowset object now we can
# this would be read back in with flowset
# we can decided what level of processing to choose with the argument 'processing'
# biexp only applies a biexponential transformation
# align applies biexp transform and then aligns peaks
# retro (default), transforms, aligns and then reverse transforms
plotdensity_flowset(flowset)
flowset_biexp <- harmonize(flowset, processing = 'biexp')
# we need to view the biex transform to see which measurements have two peaks
plotdensity_flowset(flowset_biexp)
flowset_align <- harmonize(flowset, processing = 'align',
two_peaks = c(7:20),
one_peak = c(1:6,21), threshold = 0.01)
flowset_retro <- harmonize(flowset, processing = 'retro',
two_peaks = c(7:20),
one_peak = c(1:6,21), threshold = 0.01)
# now create the data frame from the flowset object using the CelltypeR function flowset_to_csv
df <- flowset_to_csv(flowset_retro)
packageVersion(reshape2)
package.version(reshape2)
package_version(reshape2)
package_version(reshape2)
packageVersion("reshape2")
devtools::build()
roxygen2::roxygenise()
document()
library(roxygen2)
document()
reoxygenise()
roxygenise()
devtools::build()
devtools::install()
?plotmean
# the function make_seu will take in the df of expression and Antibody/Marker list as a vector and create a seurat object. Values are scaled. Marker expression will be in the "RNA" slot. PCA is calculated using the AB vector as the features
# make sure to always keep the same antibody order or your labels will not be correct
# antibody features in order to appear on the plots
AB <- c("CD24","CD56","CD29","CD15","CD184","CD133","CD71","CD44","GLAST","AQP4","HepaCAM", "CD140a","O4")
# create the seurat object
seu <- make_seu(df, AB_vector = AB)
?make_seu
devtools::build()
devtools::install()
getwd()
?make_seu
library("CelltypeR")
4+5
?DimPlot
seu <- make_seu(df, AB_vector = AB)
View(df)
setwd("~/Documents/Data/FlowCytometry/Ghislaine/Analysis")
library(Seurat)
library(dplyr)
library(ggplot2)
library(CelltypeR)
AB <- c("TH","CD24","CD56","CD29","CD15","CD184","CD133","SSEA4","CD44","CD140a")
seu <- readRDS("seuratObjectSNCA_AST23.RDS")
print(DimPlot(seu, group.by = "Celltypes", label = TRUE, raster = FALSE, cols = clust.colours, repel = TRUE))
print(DimPlot(seu, group.by = "Celltypes", label = TRUE, raster = FALSE, repel = TRUE))
var.names <- c("Sample","Genotype","Celltypes")
df.for.stats <- Prep_for_stats(seu, marker_list = AB, variables = var.names,
marker_name = 'Marker')
print(colnames(seu@meta.data))
var.names <- c("Sample","Celltypes")
df.for.stats <- Prep_for_stats(seu, marker_list = AB, variables = var.names,
marker_name = 'Marker')
print(head(df.for.stats))
colnames(df.for.stats) <- c("Genotype","Celltype","Marker","value")
print(head(df.for.stats))
test.stats1 <- run_stats(input_df= df.for.stats,
group_cols = c("Genotype", "CellType"),
value_col = "value",
stat_type = "ANOVA", id1 = 'Genotype',
id2 = NULL, use_means = TRUE,
loop_by = "CellType")
print(head(df.for.stats))
colnames(df.for.stats) <- c("Genotype","CellType","Marker","value")
test.stats1 <- run_stats(input_df= df.for.stats,
group_cols = c("Genotype", "CellType"),
value_col = "value",
stat_type = "ANOVA", id1 = 'Genotype',
id2 = NULL, use_means = TRUE,
loop_by = "CellType")
print(head(df.for.stats))
test.stats1 <- run_stats(input_df= df.for.stats,
group_cols = c("Genotype", "CellType"),
value_col = "value",
stat_type = "ANOVA", id1 = 'Genotype',
id2 = NULL, use_means = TRUE,
loop_by = "CellType")
test.stats1 <- run_stats(input_df= df.for.stats,
group_cols = c("Genotype", "CellType"),
value_col = "value",
stat_type = "ANOVA", id1 = 'Genotype',
id2 = NULL, use_means = TRUE,
loop_by = "Celltypes")
View(test.stats1)
test.stats1 <- run_stats(input_df= df.for.stats,
group_cols = c("Genotype", "CellType"),
value_col = "value",
stat_type = "ANOVA2", id1 = 'Genotype',
id2 = NULL, use_means = FALSE,
loop_by = "CellType")
test.stats1 <- run_stats(input_df= df.for.stats,
group_cols = c("Genotype", "CellType"),
value_col = "value",
stat_type = "ANOVA", id1 = 'Genotype',
id2 = NULL, use_means = FALSE,
loop_by = "CellType")
View(test.stats1)
var.names <- c("Sample","Celltypes")
df.for.stats <- Prep_for_stats(seu, marker_list = AB, variables = var.names,
marker_name = 'Marker')
print(head(df.for.stats))
test.stats1 <- run_stats(input_df= df.for.stats,
group_cols = c("Genotype", "CellType"),
value_col = "value",
stat_type = "ANOVA2", id1 = 'Sample',
id2 = 'Celltypes', use_means = FALSE,
loop_by = "none")
Idents(seu) <- "Genotype"
table(seu$Genotype)
seu <- AddMetaData(seu, metadata = seu$Sample, col.name = "Genotype")
seu$Genotype <- factor(seu$Genotype, levels = c("SNCA-triplication","Isogenic-Control","SNCA-KO"))
DimPlot(seu, group.by = "Celltypes", label = TRUE, raster = FALSE, cols = clust.colours, repel = TRUE, split.by = "Genotype")
clust.colours <- c("chocolate2",# Astrocytes 1
"darkorange", # Astrocytes 2
#"orange", #Astro
"pink", # RG1
"deeppink",# RG1a
"plum1", #RG2
"lightpink3",# RG stemlike
#"blue", # epi-endo
"mediumpurple1",# neurons 1
"purple",# Neurons2
"mediumpurple3", # Neurons1 and 2
#"grey", # Neurons2 and oligo
#"darkgrey",
"plum3", # NPC
"mistyrose2", # Glia-lineage
"steelblue3",# epithelial
"deepskyblue", # endothelial
#"tomato3",# stem like
"mediumslateblue", # Neural lineage
"seagreen3",#Oligo
"olivedrab4", # OPC
"darkseagreen3",#OPC like
"burlywood3" #extra
)
clust.colours <- c("chocolate2",# Astrocytes 1
"darkorange", # Astrocytes 2
#"orange", #Astro
"pink", # RG1
"deeppink",# RG1a
"plum1", #RG2
"lightpink3",# RG stemlike
#"blue", # epi-endo
"mediumpurple1",# neurons 1
"purple",# Neurons2
"mediumpurple3", # Neurons1 and 2
#"grey", # Neurons2 and oligo
#"darkgrey",
"plum3", # NPC
"mistyrose2", # Glia-lineage
"steelblue3",# epithelial
"deepskyblue", # endothelial
#"tomato3",# stem like
"mediumslateblue", # Neural lineage
"seagreen3",#Oligo
"olivedrab4", # OPC
"darkseagreen3",#OPC like
"burlywood3" #extra
)
cell.order <- c("Astro1","Astro2","RG1a-Astro1","RG1a","RG2","RG3",
"Neurons1","DA-Neurons1","DA-NPC",
"DA-NPC-RGa1","NPC-RG","NPC","OPC-NPC",
"OPC", "OPC-like",
"TH-high","Stem-like" #25-28
)
DimPlot(seu, group.by = "Celltypes", label = TRUE, raster = FALSE, cols = clust.colours, repel = TRUE)
seu <- AddMetaData(seu, metadata = seu$Sample, col.name = "Genotype")
seu$Genotype <- factor(seu$Genotype, levels = c("SNCA-triplication","Isogenic-Control","SNCA-KO"))
DimPlot(seu, group.by = "Celltypes", label = TRUE, raster = FALSE, cols = clust.colours, repel = TRUE, split.by = "Genotype")
Idents(seu) <- "Genotype"
table(seu$Genotype)
seu.sub <- subset(seu, downsample = 17535)
table(seu.sub$Genotype)
Idents(seu.sub) <- "Celltypes"
FeaturePlot(seu.sub, split.by = "Genotype", label = TRUE, raster = FALSE)
Idents(seu.sub) <- "Celltypes"
FeaturePlot(seu.sub, split.by = "Genotype", label = TRUE, raster = FALSE, features = "TH")
Idents(seu.sub) <- "Celltypes"
FeaturePlot(seu.sub, split.by = "Genotype", label = TRUE, raster = FALSE, features = "TH")
Idents(seu.sub) <- "Celltypes"
FeaturePlot(seu.sub, split.by = "Genotype", label = TRUE, raster = FALSE, features = "TH", slot = 'scale.data')
?FeaturePlot
Idents(seu.sub) <- "Celltypes"
FeaturePlot(seu.sub, split.by = "Genotype", label = TRUE, raster = FALSE, features = "TH", min.cutoff = 'q1', max.cutoff = 'q97')
