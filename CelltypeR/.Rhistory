ylim(0, 1) +
facet_wrap(~ as.factor(cell.label)) +
ylab("Correlation Coefficient") +
xlab("")
p2
#pdf(paste(fig_outs,"CAMcorpairs_thresh35.pdf",sep=""))
#p2
#dev.off()
# Define the threshold number of pairs
df <- cor3 # threshold 0.35
threshold <- 150
# Filter the double-labeled cells
double.cells <- df[grep("-", df$cell.label),]
label_counts <- table(double.cells$cell.label)
filters_labels <- names(label_counts[label_counts >= threshold])
# Filter the double-labeled cells based on the filtered labels
filtered_double.cells <- double.cells[double.cells$cell.label %in% filters_labels, ]
# Melt the filtered double-labeled cells for plotting
df.melt.filtered <- melt(filtered_double.cells)
# Plot the filtered double-labeled cells
p2 <- ggplot(df.melt.filtered, aes(x = variable, y = value, colour = variable, group = X))+
geom_line(show.legend = FALSE, size = 0.1, color = "black") +
geom_point() +
scale_color_manual(values = c("#4E84C4", "#52854C","purple","orange")) +
ylim(0.1, 0.8) +
facet_wrap(~ as.factor(cell.label)) +
ylab("Correlation Coefficient") +
xlab("")
p2
pdf(paste(fig_outs,"CAMcorpairs_thresh35.pdf",sep=""))
p2
dev.off()
seu <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/Ex2_48well/Parse48_analysisMaria.RDS")
View(seu)
unique(seu$sample)
Idents(seu) <- "sample"
library(Seurat)
library(tidyverse)
Idents(seu) <- "sample"
levels(seu)
library(CelltypeR)
samples <- levels(seu)
samples
new_vector <- ifelse(grepl("NPC", samples), "NPC",
ifelse(grepl("Final", samples), "Neurons2weeks",
ifelse(grepl("^M", samples), "MotorNeurons", "Other")))
# Print the new vector
print(new_vector)
# using celltypeR function
# add the culture type NPC, DA neurons 2weeks, Motor neurons
new_vector <- ifelse(grepl("NPC", samples), "NPC",
ifelse(grepl("Final", samples), "Neurons2weeks",
ifelse(grepl("^M", samples), "MotorNeurons", "Other")))
# Print the new vector
print(new_vector)
integrated_seurat <- annotate(integrated_seurat, annotations = new_vector, to_label = "sample",annotation_name = "CultureType")
seu <- annotate(seu, annotations = new_vector, to_label = "sample",annotation_name = "CultureType")
DimPlot(seu)
# Create a new vector with line names
new_line_vector <- gsub("^(NPC|Final|POOL_)", "", samples)
# Print the new vector with line names
print(new_line_vector)
# Print the new vector
print(new_vector)
# Create a new vector with line names
new_line_vector <- gsub("^(NPC|Final|POOL_)", "", samples)
# Print the new vector with line names
print(new_line_vector)
# Create a new vector with line names
new_line_vector <- gsub("^(NPC|Final)", "", samples)
# Print the new vector with line names
print(new_line_vector)
# Create a new vector with line names
new_line_vector <- gsub("^(NPC|Final)", "", samples)
new_line_vector <- gsub("3123$", "3123-iso", new_line_vector)
new_line_vector[new_line_vector == "P65P"] <- "3123-isoP65P"
new_line_vector[new_line_vector == "Q65Q"] <- "3123-isoQ65Q"
# Print the new vector with line names
print(new_line_vector)
table(seu$sample, seu$CultureType)
DimPlot(seu)
# check with sample names
table(seu$sample, seu$CultureType)
new_line_vector[new_line_vector == "2AIW002-02"] <- "AIW002-02"
print(new_line_vector)
seu <- annotate(seu, annotations = new_vector, to_label = "sample",annotation_name = "Line")
DimPlot(seu)
# check
table(seu$sample, seu$Line)
seu <- annotate(seu, annotations = new_line_vector, to_label = "sample",annotation_name = "Line")
DimPlot(seu)
# check
table(seu$sample, seu$Line)
DimPlot(seu)
DimPlot(seu)
Idents(seu) <- "Line"
Line <- levels(seu)
Line
# add disease status
# Create the lookup table for Line to DiseaseStatus mapping
line_to_disease <- c("3448" = "HC",
"TD22" = "HC",
"AIW001-02" = "HC",
"AIW002-02" = "HC",
"2965" = "PD",
"3383" = "PD",
"3575" = "PD",
"TD06" = "PD",
"TD07" = "PD",
"3123" = "PD",
"3567" = "PD",
"3595" = "PD",
"3940" = "PD",
"3567-iso" = "PD-iso",
"3940R-iso" = "PD-iso",
"TD06-iso" = "PD-iso",
"3940N-iso" = "PD-iso",
"3123-isoQ65Q" = "PD-iso",
"3123-isoP65P" = "PD-iso",
"3383-iso" = "PD-iso",
"3575-iso" = "PD-iso",
"3595-iso" = "PD-iso")
# Assuming "Line" is your starting character vector
Idents(seu) <- "Line"
Line <- levels(seu)
# Create a new vector of disease statuses using the lookup table
disease_status_vector <- ifelse(Line %in% names(line_to_disease),
line_to_disease[Line],
"other")
# Print the new vector of disease statuses
print(disease_status_vector)
seu <- annotate(seu, annotations = new_line_vector, to_label = "Line",annotation_name = "DiseaseStatus")
# check
table(seu$Line, seu$DiseaseStatus)
seu <- annotate(seu, annotations = disease_status_vector, to_label = "Line",annotation_name = "DiseaseStatus")
# check
table(seu$Line, seu$DiseaseStatus)
# add disease status
# Create the lookup table for Line to DiseaseStatus mapping
line_to_disease <- c("3448" = "HC",
"TD22" = "HC",
"AIW001-02" = "HC",
"AIW002-02" = "HC",
"2965" = "PD",
"3383" = "PD",
"3575" = "PD",
"TD06" = "PD",
"TD07" = "PD",
"3123" = "PD",
"3567" = "PD",
"3595" = "PD",
"3940" = "PD",
"3567-iso" = "PD-iso",
"3940R-iso" = "PD-iso",
"TD06-iso" = "PD-iso",
"3940N-iso" = "PD-iso",
"3123-isoQ65Q" = "PD-iso",
"3123-isoP65P" = "PD-iso",
"3123-iso" = "PD-iso",
"3383-iso" = "PD-iso",
"3575-iso" = "PD-iso",
"3595-iso" = "PD-iso")
# Assuming "Line" is your starting character vector
Idents(seu) <- "Line"
Line <- levels(seu)
# Create a new vector of disease statuses using the lookup table
disease_status_vector <- ifelse(Line %in% names(line_to_disease),
line_to_disease[Line],
"other")
# Print the new vector of disease statuses
print(disease_status_vector)
seu <- annotate(seu, annotations = disease_status_vector, to_label = "Line",annotation_name = "DiseaseStatus")
# check
table(seu$Line, seu$DiseaseStatus)
table(sample)
table(seu$sample,seu$CultureType)
cellcounts <- table(seu$sample,seu$CultureType)
cellcounts <- as.data.frame(table(seu$sample,seu$CultureType))
View(cellcounts)
cellcounts <- as.data.frame(table(seu$sample)
cellcounts <- as.data.frame(table(seu$sample))
View(cellcounts)
cellcounts <- as.data.frame(table(seu$Line,seu$CultureType))
View(cellcounts)
cellcounts <- as.data.frame(table(seu$Line,seu$CultureType,seu$DiseaseStatus))
table(seu$Line,seu$CultureType,seu$DiseaseStatus)
View(cellcounts)
write.csv(cellcounts,"cellcounts_sample.csv")
View(cellcounts)
# Convert long_df to the wide format
wide_df <- pivot_wider(cellcounts,
id_cols = c(Var1, Var2),
values_from = Freq)
wide_df <- pivot_wider(cellcounts,
id_cols = c("Var1", "Var2"),
values_from = "Freq")
?pivot_wider
wide_df <- pivot_wider(cellcounts,
id_cols = c(Var1),
values_from = Freq)
View(cellcounts)
wide_df <- pivot_wider(cellcounts,
id_cols = c("Var1"),
values_from = "Freq")
wide_df <- pivot_wider(long_df,
id_cols = c(Var1, Var2),
names_from = Var3,
values_from = Freq)
wide_df <- pivot_wider(cellcounts,
id_cols = c(Var1, Var2),
names_from = Var3,
values_from = Freq)
View(wide_df)
wide_df <- pivot_wider(cellcounts,
id_cols = Var1,
names_from = c(Var3,Var2),
values_from = Freq)
View(cellcounts)
View(wide_df)
wide_df <- pivot_wider(cellcounts,
id_cols = Var1,
names_from = Var2,
values_from = Freq)
View(wide_df)
cellcounts <- as.data.frame(table(seu$Line,seu$CultureType))
table(seu$Line,seu$CultureType,seu$DiseaseStatus)
# Convert long_df to the wide format
wide_df <- pivot_wider(cellcounts,
id_cols = Var1,
names_from = Var2,
values_from = Freq)
write.csv(wide_df,"cellcounts_sample.csv")
unique(seu$CultureType)
Idents(seu) <- "CultureType"
unique(seu$CultureType)
Idents(seu) <- "CultureType"
seu.n <- subset(seu, idents = c("NPC","Neurons2weeks"))
unique(seu$sample)
Idents(seu) <- "sample"
samples_to_remove <- c("M1","M2","M3","M4","M5","M6","M7","M8",
"POOL_1NPC", "POOL_2NPC",  "POOL_3NPC", "POOL_4Final" )
seu.n <- subset(seu, idents = -sample_to_remove)
seu.n <- subset(seu, idents = -samples_to_remove)
seu.n <- subset(seu, idents = !samples_to_remove)
?subset
DimPlot(seu, group.by = "DiseaseStatus")
unique(seu$sample)
Idents(seu) <- "DiseaseStatus"
seu.n <- subset(seu, idents = c("HC","PD","PD-iso"))
View(seu.n)
dim(seu.n)
dim(seu.n)
dim(seu)
dimplot(seu.n)
DimPlot(seu.n)
seu.n <- RunPCA(seu.n, npcs = 20, verbose = FALSE)
seu.n <- RunUMAP(seu.n, reduction = "pca", dims = 1:20, n.neighbors = 81)
DimPlot(seu.n)
# make a list of seurat objects by our cell type variable
sublist <- SplitObject(seu.n, split.by = "sample")
saveRDS(seu, "/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/Ex2_48well/Parse48_allSamples.RDS")
saveRDS(seu.n, "/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/Ex2_48well/ParseNCADDsamples.RDS")
sublist <- SplitObject(seu.n, split.by = "sample")
DimPlot(seu.n, group.by = "CultureType")
DimPlot(seu.n, group.by = "Line")
seu.n <- NormalizeData(seu.n)
library(Seurat)
library(tidyverse)
#library(CelltypeR)
seu.n <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/Ex2_48well/ParseNCADDsamples.RDS")
seu.n <- NormalizeData(seu.n)
seu.n <- FindVariableFeatures(seu.n)
seu.n <- FindClusters(seu.n, resolution = c(0.3,0.6))
seu.n <- RunPCA(seu.n, npcs = 20, verbose = FALSE)
seu.n <- RunPCA(seu.n, npcs = 20, verbose = FALSE)
seu.n <- RunUMAP(seu.n, reduction = "pca", dims = 1:20, n.neighbors = 81)
DimPlot(seu.n)
DimPlot(seu.n, group.by = "Line")
seu.n <- FindClusters(seu.n, resolution = c(0.3,0.6))
seu.n <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/Ex2_48well/ParseNCADDsamples.RDS")
seu.n <- NormalizeData(seu.n)
seu.n <- FindVariableFeatures(seu.n)
seu.n <- FindNeighbors(seu.n, dims = 1:20, k.param = 81)
seu.n <- FindClusters(seu.n, resolution = 0.3)
DimPlot(seu.n)
#seu.n$CultureType
Idents(seu.n) <- "CultureType"
neurons <- subset(seu.n, idents = "Neurons2weeks")
seu <- neurons
seu <- RunPCA(seu, npcs = 20, verbose = FALSE)
seu <- RunUMAP(seu, reduction = "pca", dims = 1:20, n.neighbors = 81)
DimPlot(seu)
DimPlot(seu, group.by = "CultureType")
DimPlot(seu, group.by = "Line")
seu <- FindVariableFeatures(seu.n)
seu <- FindNeighbors(seu, dims = 1:20, k.param = 81)
seu <- FindClusters(seu, resolution = 0.3)
DimPlot(seu)
DimPlot(seu, group.by = "CultureType")
DimPlot(seu, group.by = "Line")
dim(seu.n)
dim(neurons)
dim(seu.n)
dim(neurons)
dim(seu)
seu <- neurons
seu <- RunPCA(seu, npcs = 20, verbose = FALSE)
seu <- RunUMAP(seu, reduction = "pca", dims = 1:20, n.neighbors = 81)
seu <- FindVariableFeatures(seu.n)
seu <- FindNeighbors(seu, dims = 1:20, k.param = 81)
seu <- FindClusters(seu, resolution = 0.3)
DimPlot(seu)
DimPlot(seu, group.by = "CultureType")
DimPlot(seu, group.by = "Line")
dim(seu.n)
dim(neurons)
dim(seu)
seu <- neurons
seu <- RunPCA(seu, npcs = 20, verbose = FALSE)
seu <- RunUMAP(seu, reduction = "pca", dims = 1:20, n.neighbors = 81)
seu <- FindVariableFeatures(seu)
seu <- FindNeighbors(seu, dims = 1:20, k.param = 81)
seu <- FindClusters(seu, resolution = 0.3)
DimPlot(seu)
DimPlot(seu, group.by = "CultureType")
DimPlot(seu, group.by = "Line")
dim(seu.n)
dim(neurons)
dim(seu)
neurons <- seu
DimPlot(seu)
DimPlot(seu, group.by = "CultureType")
DimPlot(seu, group.by = "Line")
Idents(seu.n) <- "CultureType"
NPC <- subset(seu.n, idents = "NPC")
seu <- NPC
seu <- RunPCA(seu, npcs = 20, verbose = FALSE)
seu <- RunUMAP(seu, reduction = "pca", dims = 1:20, n.neighbors = 81)
seu <- FindVariableFeatures(seu)
seu <- FindNeighbors(seu, dims = 1:20, k.param = 81)
seu <- FindClusters(seu, resolution = 0.3)
DimPlot(seu)
DimPlot(seu, group.by = "CultureType")
DimPlot(seu, group.by = "Line")
NPC <- seu
DimPlot(NPC, group.by = "DiseaseStatus")
View(NPC)
table(NPC$Line)
Idents(NPC) <- "Line"
levels(NPC)
# make a list of seurat objects by our cell type variable
sublist <- SplitObject(NPC, split.by = "Line")
# normalize and find variable features
for (i in 1:length(sublist)){
sublist[[i]] <- NormalizeData(sublist[[i]], verbose = FALSE)
sublist[[i]] <- FindVariableFeatures(sublist[[i]], selection.method = "vst")
}
# Create an empty Seurat object to store the integrated data
# Take the first Seurat object from the list as the starting point
integrated_seurat <- subset(sublist[[1]])
# Iterate over the list of Seurat objects
for (i in 1:length(sublist)) {
# Rename the 'orig.ident' metadata inside the seurat object to match the object name in the list
sublist[[i]]$orig.ident <- names(sublist)[i]
}
sample.list <- sublist
for (i in 1:length(sample.list)) {
# Normalize and scale the data
sample.list[[i]] <- NormalizeData(sample.list[[i]], verbose = FALSE)
sample.list[[i]] <- ScaleData(sample.list[[i]], verbose = FALSE)
# Find variable features
sample.list[[i]] <- FindVariableFeatures(sample.list[[i]], selection.method = "vst")
# Get the variable features
variable_features <- VariableFeatures(sample.list[[i]])
# Run PCA with the variable features
sample.list[[i]] <- RunPCA(sample.list[[i]], verbose = FALSE, npcs = 30, features = variable_features)
}
int.anchors <- FindIntegrationAnchors(object.list = sample.list, dims = 1:30, reduction = "rpca")
integrated_seurat <- IntegrateData(anchorset = int.anchors,  dims = 1:30)
#
# must set the k weight to the lowest cell count
# in the parse sample we have over 1530 cells in the smallest count so we don't have to change the k from the 100 default
DimPlot(integrated_seurat)
DimPlot(seu.n)
#seu.n$CultureType
DimPlot(seu.n, group.by = "CultureType")
DimPlot(seu.n, group.by = "RNA_snn_res.0.3")
#seu.n$RNA_snn_res.0.3
DimPlot(seu.n, group.by = "CultureType")
View(integrated_seurat)
sublist <- SplitObject(NPC, split.by = "Line")
saveRDS(neurons, "/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/Ex2_48well/ParseNCADDsamplesNeurons.RDS")
saveRDS(NPC, "/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/Ex2_48well/ParseNCADDsamplesNPC.RDS")
table(NPC$DiseaseStatus,NPC$Line)
library(Seurat)
library(tidyverse)
#library(CelltypeR)
NPC <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/Ex2_48well/ParseNCADDsamplesNPC.RDS")
sublist <- SplitObject(NPC, split.by = "Line")
# normalize and find variable features
for (i in 1:length(sublist)){
sublist[[i]] <- NormalizeData(sublist[[i]], verbose = FALSE)
sublist[[i]] <- FindVariableFeatures(sublist[[i]], selection.method = "vst")
}
View(sublist)
integrated_seurat <- subset(sublist[[1]])
# Iterate over the list of Seurat objects
for (i in 1:length(sublist)) {
# Rename the 'orig.ident' metadata inside the seurat object to match the object name in the list
sublist[[i]]$orig.ident <- names(sublist)[i]
}
sample.list <- sublist
for (i in 1:length(sample.list)) {
# Normalize and scale the data
sample.list[[i]] <- NormalizeData(sample.list[[i]], verbose = FALSE)
sample.list[[i]] <- ScaleData(sample.list[[i]], verbose = FALSE)
# Find variable features
sample.list[[i]] <- FindVariableFeatures(sample.list[[i]], selection.method = "vst")
# Get the variable features
variable_features <- VariableFeatures(sample.list[[i]])
# Run PCA with the variable features
sample.list[[i]] <- RunPCA(sample.list[[i]], verbose = FALSE, npcs = 30, features = variable_features)
}
int.anchors <- FindIntegrationAnchors(object.list = sample.list, dims = 1:30, reduction = "rpca")
integrated_seurat <- IntegrateData(anchorset = int.anchors,  dims = 1:30)
saveRDS(int.anchors,"/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/Ex2_48well/NPCint.ancharors.RDS")
saveRDS(integrated_seurat,"/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/Ex2_48well/NPC_integrate_seurat.RDS")
library(Seurat)
library(tidyverse)
#library(CelltypeR)
integrated_seurat <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/Ex2_48well/NPC_integrate_seurat.RDS")
int.anchors <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/Ex2_48well/NPCint.ancharors.RDS")
integrated_seurat <- IntegrateData(anchorset = int.anchors,  dims = 1:30)
integrated_seurat <- IntegrateData(anchorset = int.anchors,  dims = 1:20)
View(int.anchors)
View(integrated_seurat)
?IntegrateData
NPCex1 <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/NPCex1.RDS")
NPCex2 <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/NPCex2.RDS")
library(Seurat)
library(tidyverse)
seu <- merge(NPCex1, NPCex1)
saveRDS(NPCex2,"/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/NPCex1_ex2.RDS")
saveRDS(seu,"/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/NPCex1_ex2.RDS")
saveRDS(seu,"/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/NPCex1_ex2.RDS")
rm(NPCex1,NPCex2)
unique(seu$orig.ident)
NPCex1 <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/NPCex1.RDS")
NPCex2 <- readRDS("/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/NPCex2.RDS")
seu <- merge(NPCex1, NPCex2)
rm(seu)
seu <- merge(NPCex1, NPCex2)
unique(seu$orig.ident)
View(seu)
#saveRDS(NPCex1,"/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/NPCex1.RDS")
#saveRDS(NPCex2,"/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/NPCex2.RDS")
saveRDS(seu,"/Users/rhalenathomas/Documents/Data/scRNAseq/ParseExample/NPCex1_ex2.RDS")
DefaultAssay(seu) <- "integrated"
seu <- ScaleData(seu, verbose = FALSE)
# in the merge data set we sill need features for the PCA input
#seu <- FindVariableFeatures(seu, selection.method = "vst")
seu <- RunPCA(seu, npcs = 30, verbose = FALSE)
seu <- FindVariableFeatures(seu, selection.method = "vst")
?FindVariableFeatures
seu <- FindVariableFeatures(seu, selection.method = "vst", nfeatures = 1000)
?RunPCA
seu <- RunPCA(seu, npcs = 30, verbose = FALSE, features = colnames(seu@assays$integrated))
int_genes <- seu@assays$integrated
View(int_genes)
rm(int_genes)
View(seu)
seu@assays[["integrated"]]@meta.features
int_genes <- rownames(seu@assays[["integrated"]]@meta.features)
seu <- RunPCA(seu, npcs = 30, verbose = FALSE, features = int_genes, colnames(seu@assays$integrated))
seu <- RunPCA(seu, npcs = 30, verbose = FALSE, features = int_genes)
seu <- RunUMAP(seu, reduction = "pca", dims = 1:30)
DimPlot(seu, group.by = "orig.ident")
seurat_list <- SplitObject(seu, split.by = "orig.ident")
# Find integration anchors
int.anchors <- FindIntegrationAnchors(object.list = seurat_list, dims = 1:25,
anchor.features = 1000)
View(NPCex1)
var.genes <- seu@assays$RNA@var.features
var.genes <- NPCex1@assays$RNA@var.features
seu <- merge(NPCex1, NPCex2)
rm(seu, seurat_list)
library(doParallel)
# Get the number of available cores
num_cores <- detectCores()
# Register a parallel backend with the number of cores you want to use
registerDoParallel(cores = num_cores)
install.packages("CelltypeR", dependencies = TRUE)
# Rebuild documentation
devtools::document()
setwd("/Users/rhalenathomas/GITHUB/CelltypeR/CelltypeR/")
# Rebuild documentation
devtools::document()
setwd("/Users/rhalenathomas/GITHUB/CelltypeR/CelltypeR/")
# Rebuild documentation
devtools::document()
getwd()
installed.packages()[installed.packages()[,"Priority"]=="base"]
pack <- installed.packages()[installed.packages()[,"Priority"]=="base"]
pack_clean <- na.omit(pack)
print(pack_clean)
pack <- available.packages()
pack["ggplot2","Depends"]
pack["stats","Depends"]
pack <- available.packages()
pack["doParallel","Depends"]
pack <- available.packages()
pack["stats","Depends"]
