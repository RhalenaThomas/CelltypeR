label.size = 8, repel = TRUE) # + theme(legend.position = "none")
cell.freq <- table(seu$cor.labels05)
# Filter cell labels with at least 500 cells
selected_labels <- names(cell.freq[cell.freq >= 50])
df.meta <- as.data.frame(seu$cor.labels05)
# Create a new column 'cell.label.ft' with labels over 500 cells, and 'NA' for others
df.meta$cell.label.ft <- df.meta$`seu$cor.labels05`
df.meta$cell.label.ft <- ifelse(df.meta$cell.label.ft %in% selected_labels, df.meta$cell.label.ft, NA)
seu <- AddMetaData(object=seu, metadata= df.meta$cell.label.ft, col.name = 'cor.labels05ft')
unique(seu$cor.labels05ft)
DimPlot(seu, group.by = 'cor.labels05ft', label = TRUE,
label.size = 8, repel = TRUE) # + theme(legend.position = "none")
cell.freq <- table(seu$cor.labels05)
# Filter cell labels with at least 500 cells
selected_labels <- names(cell.freq[cell.freq >= 80])
df.meta <- as.data.frame(seu$cor.labels05)
# Create a new column 'cell.label.ft' with labels over 500 cells, and 'NA' for others
df.meta$cell.label.ft <- df.meta$`seu$cor.labels05`
df.meta$cell.label.ft <- ifelse(df.meta$cell.label.ft %in% selected_labels, df.meta$cell.label.ft, NA)
seu <- AddMetaData(object=seu, metadata= df.meta$cell.label.ft, col.name = 'cor.labels05ft')
unique(seu$cor.labels05ft)
DimPlot(seu, group.by = 'cor.labels05ft', label = TRUE,
label.size = 6, repel = TRUE) # + theme(legend.position = "none")
cell.freq <- table(seu$cor.labels05)
# Filter cell labels with at least 500 cells
selected_labels <- names(cell.freq[cell.freq >= 70])
df.meta <- as.data.frame(seu$cor.labels05)
# Create a new column 'cell.label.ft' with labels over 500 cells, and 'NA' for others
df.meta$cell.label.ft <- df.meta$`seu$cor.labels05`
df.meta$cell.label.ft <- ifelse(df.meta$cell.label.ft %in% selected_labels, df.meta$cell.label.ft, NA)
seu <- AddMetaData(object=seu, metadata= df.meta$cell.label.ft, col.name = 'cor.labels05ft')
unique(seu$cor.labels05ft)
DimPlot(seu, group.by = 'cor.labels05ft', label = TRUE,
label.size = 6, repel = TRUE) # + theme(legend.position = "none")
cell.freq <- table(seu$cor.labels05)
# Filter cell labels with at least 500 cells
selected_labels <- names(cell.freq[cell.freq >= 60])
df.meta <- as.data.frame(seu$cor.labels05)
# Create a new column 'cell.label.ft' with labels over 500 cells, and 'NA' for others
df.meta$cell.label.ft <- df.meta$`seu$cor.labels05`
df.meta$cell.label.ft <- ifelse(df.meta$cell.label.ft %in% selected_labels, df.meta$cell.label.ft, NA)
seu <- AddMetaData(object=seu, metadata= df.meta$cell.label.ft, col.name = 'cor.labels05ft')
unique(seu$cor.labels05ft)
DimPlot(seu, group.by = 'cor.labels05ft', label = TRUE,
label.size = 6, repel = TRUE) # + theme(legend.position = "none")
pdf("UMPAcorlables0553filtered60cells.pdf", width = 6, height = 4)
DimPlot(seu, group.by = 'cor.labels05ft', label = TRUE,
label.size = 6, repel = TRUE)
dev.off()
DimPlot(seu, group.by = 'cor.labels035ft', label = TRUE,
label.size = 6, repel = TRUE) #+ theme(legend.position = "none")
seu <- AddMetaData(object=seu, metadata= cor3$cell.label, col.name = 'cor.labels035')
#seu <- AddMetaData(object=seu, metadata= cor3$cell.label, col.name = 'cor.labels035')
#DimPlot(seu, group.by = 'cor.labels035', label = TRUE) + theme(legend.position = "none")
# removing the combined cell labels that are low frequency will improve visualization
# Check if the cell type has a frequency less than 500 and assign new label accordingly
# Calculate cell frequencies
cell.freq <- table(seu$cor.labels035)
# Filter cell labels with at least 400 cells
selected_labels <- names(cell.freq[cell.freq >= 300])
df.meta <- as.data.frame(seu$cor.labels035)
# Create a new column 'cell.label.ft' with labels over 500 cells, and 'NA' for others
df.meta$cell.label.ft <- df.meta$`seu$cor.labels035`
df.meta$cell.label.ft <- ifelse(df.meta$cell.label.ft %in% selected_labels, df.meta$cell.label.ft, NA)
seu <- AddMetaData(object=seu, metadata= df.meta$cell.label.ft, col.name = 'cor.labels035ft')
unique(seu$cor.labels035ft)
DimPlot(seu, group.by = 'cor.labels035ft', label = TRUE,
label.size = 6, repel = TRUE) #+ theme(legend.position = "none")
DimPlot(seu, group.by = 'cor.labels035ft', label = TRUE,
label.size = 6, repel = TRUE) + theme(legend.position = "none")
#seu <- AddMetaData(object=seu, metadata= cor3$cell.label, col.name = 'cor.labels035')
#DimPlot(seu, group.by = 'cor.labels035', label = TRUE) + theme(legend.position = "none")
# removing the combined cell labels that are low frequency will improve visualization
# Check if the cell type has a frequency less than 500 and assign new label accordingly
# Calculate cell frequencies
cell.freq <- table(seu$cor.labels035)
# Filter cell labels with at least 400 cells
selected_labels <- names(cell.freq[cell.freq >= 200])
df.meta <- as.data.frame(seu$cor.labels035)
# Create a new column 'cell.label.ft' with labels over 500 cells, and 'NA' for others
df.meta$cell.label.ft <- df.meta$`seu$cor.labels035`
df.meta$cell.label.ft <- ifelse(df.meta$cell.label.ft %in% selected_labels, df.meta$cell.label.ft, NA)
seu <- AddMetaData(object=seu, metadata= df.meta$cell.label.ft, col.name = 'cor.labels035ft')
unique(seu$cor.labels035ft)
DimPlot(seu, group.by = 'cor.labels035ft', label = TRUE,
label.size = 6, repel = TRUE) + theme(legend.position = "none")
table(seu$cor.labels035ft)
#seu <- AddMetaData(object=seu, metadata= cor3$cell.label, col.name = 'cor.labels035')
#DimPlot(seu, group.by = 'cor.labels035', label = TRUE) + theme(legend.position = "none")
# removing the combined cell labels that are low frequency will improve visualization
# Check if the cell type has a frequency less than 500 and assign new label accordingly
# Calculate cell frequencies
cell.freq <- table(seu$cor.labels035)
# Filter cell labels with at least 400 cells
selected_labels <- names(cell.freq[cell.freq >= 350])
df.meta <- as.data.frame(seu$cor.labels035)
# Create a new column 'cell.label.ft' with labels over 500 cells, and 'NA' for others
df.meta$cell.label.ft <- df.meta$`seu$cor.labels035`
df.meta$cell.label.ft <- ifelse(df.meta$cell.label.ft %in% selected_labels, df.meta$cell.label.ft, NA)
seu <- AddMetaData(object=seu, metadata= df.meta$cell.label.ft, col.name = 'cor.labels035ft')
unique(seu$cor.labels035ft)
DimPlot(seu, group.by = 'cor.labels035ft', label = TRUE,
label.size = 6, repel = TRUE) + theme(legend.position = "none")
table(seu$cor.labels035ft)
cell.freq <- table(seu$cor.labels01)
# Filter cell labels with at least 500 cells
selected_labels <- names(cell.freq[cell.freq >= 400])
df.meta <- as.data.frame(seu$cor.labels01)
# Create a new column 'cell.label.ft' with labels over 500 cells, and 'NA' for others
df.meta$cell.label.ft <- df.meta$`seu$cor.labels01`
df.meta$cell.label.ft <- ifelse(df.meta$cell.label.ft %in% selected_labels, df.meta$cell.label.ft, NA)
seu <- AddMetaData(object=seu, metadata= df.meta$cell.label.ft, col.name = 'cor.labels01ft')
unique(seu$cor.labels01ft)
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 6, repel = TRUE) # + theme(legend.position = "none")
### save a plot
pdf("UMPAcorlables01filtered400cells.pdf", width = 6, height = 4)
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 6, repel = TRUE)
dev.off()
table(seu$cor.labels01ft)
table(seu$cor.labels01)
cell.freq <- table(seu$cor.labels01)
# Filter cell labels with at least 500 cells
selected_labels <- names(cell.freq[cell.freq >= 200])
df.meta <- as.data.frame(seu$cor.labels01)
# Create a new column 'cell.label.ft' with labels over 500 cells, and 'NA' for others
df.meta$cell.label.ft <- df.meta$`seu$cor.labels01`
df.meta$cell.label.ft <- ifelse(df.meta$cell.label.ft %in% selected_labels, df.meta$cell.label.ft, NA)
seu <- AddMetaData(object=seu, metadata= df.meta$cell.label.ft, col.name = 'cor.labels01ft')
unique(seu$cor.labels01ft)
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 6, repel = TRUE) # + theme(legend.position = "none")
### save a plot
pdf("UMPAcorlables01filtered400cells.pdf", width = 6, height = 4)
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 6, repel = TRUE)
dev.off()
table(seu$cor.labels01ft)
table(seu$cor.labels01)
cell.freq <- table(seu$cor.labels01)
# Filter cell labels with at least 500 cells
selected_labels <- names(cell.freq[cell.freq >= 300])
df.meta <- as.data.frame(seu$cor.labels01)
# Create a new column 'cell.label.ft' with labels over 500 cells, and 'NA' for others
df.meta$cell.label.ft <- df.meta$`seu$cor.labels01`
df.meta$cell.label.ft <- ifelse(df.meta$cell.label.ft %in% selected_labels, df.meta$cell.label.ft, NA)
seu <- AddMetaData(object=seu, metadata= df.meta$cell.label.ft, col.name = 'cor.labels01ft')
unique(seu$cor.labels01ft)
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 6, repel = TRUE) # + theme(legend.position = "none")
### save a plot
pdf("UMPAcorlables01filtered400cells.pdf", width = 6, height = 4)
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 6, repel = TRUE)
dev.off()
table(seu$cor.labels01ft)
table(seu$cor.labels01)
cell.freq <- table(seu$cor.labels01)
# Filter cell labels with at least 500 cells
selected_labels <- names(cell.freq[cell.freq >= 350])
df.meta <- as.data.frame(seu$cor.labels01)
# Create a new column 'cell.label.ft' with labels over 500 cells, and 'NA' for others
df.meta$cell.label.ft <- df.meta$`seu$cor.labels01`
df.meta$cell.label.ft <- ifelse(df.meta$cell.label.ft %in% selected_labels, df.meta$cell.label.ft, NA)
seu <- AddMetaData(object=seu, metadata= df.meta$cell.label.ft, col.name = 'cor.labels01ft')
unique(seu$cor.labels01ft)
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 6, repel = TRUE) # + theme(legend.position = "none")
### save a plot
pdf("UMPAcorlables01filtered350cells.pdf", width = 6, height = 4)
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 6, repel = TRUE)
dev.off()
table(seu$cor.labels01ft)
table(seu$cor.labels01)
pdf("UMPAcorlables0553filtered60cells.pdf", width = 6.5, height = 4.5)
DimPlot(seu, group.by = 'cor.labels05ft', label = TRUE,
label.size = 4, repel = TRUE)
dev.off()
pdf("UMPAcorlables01filtered350cells.pdf", width = 20, height = 4.5)
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 4, repel = TRUE)
dev.off()
pdf("UMPAcorlables0553filtered60cells.pdf", width = 6.5, height = 4)
DimPlot(seu, group.by = 'cor.labels05ft', label = TRUE,
label.size = 5, repel = TRUE)
dev.off()
pdf("UMPAcorlables01filtered350cells.pdf", width = 15, height = 4)
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 8, repel = TRUE)
dev.off()
pdf("UMPAcorlables01filtered350cells.pdf", width = 12, height = 4)
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 6, repel = TRUE)
dev.off()
?DimPlot
pdf("UMPAcorlables01filtered350cells.pdf", width = 12, height = 4)
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 6, repel = TRUE, alpha = 0.5, max.overlaps = 20)
options(ggrepel.max.overlaps = Inf)
pdf("UMPAcorlables01filtered350cells.pdf", width = 12, height = 4)
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 6, repel = TRUE, alpha = 0.5)
dev.off()
table(seu$cor.labels01ft)
table(seu$cor.labels01)
cell.freq <- table(seu$cor.labels01)
# Filter cell labels with at least 500 cells
selected_labels <- names(cell.freq[cell.freq >= 500])
df.meta <- as.data.frame(seu$cor.labels01)
# Create a new column 'cell.label.ft' with labels over 500 cells, and 'NA' for others
df.meta$cell.label.ft <- df.meta$`seu$cor.labels01`
df.meta$cell.label.ft <- ifelse(df.meta$cell.label.ft %in% selected_labels, df.meta$cell.label.ft, NA)
seu <- AddMetaData(object=seu, metadata= df.meta$cell.label.ft, col.name = 'cor.labels01ft')
unique(seu$cor.labels01ft)
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 6, repel = TRUE) # + theme(legend.position = "none")
### save a plot
# increase overlaps
options(ggrepel.max.overlaps = Inf)
pdf("UMPAcorlables01filtered500cells.pdf", width = 12, height = 4)
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 6, repel = TRUE, alpha = 0.5)
dev.off()
table(seu$cor.labels01ft)
table(seu$cor.labels01)
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 6, repel = TRUE) # + theme(legend.position = "none")
### save a plot
# increase overlaps
#options(ggrepel.max.overlaps = Inf)
pdf("UMPAcorlables01filtered500cells.pdf", width = 10, height = 4)
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 6, repel = TRUE, alpha = 0.5)
dev.off()
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 6, repel = TRUE) # + theme(legend.position = "none")
### save a plot
# increase overlaps
#options(ggrepel.max.overlaps = Inf)
pdf("UMPAcorlables01filtered500cells.pdf", width = 10, height = 5)
DimPlot(seu, group.by = 'cor.labels01ft', label = TRUE,
label.size = 6, repel = TRUE, alpha = 0.5)
dev.off()
seu <- readRDS("/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/2Dcells_surface/Figure2/FigureStuff/Flowset_SelectSeuratlabels.Rds")
setwd("/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/NatMethodJuneSubmission/")
#setwd("/Users/rhalenathomas/Documents/Data/FlowCytometry/PhenoID/Analysis/NatMethodJuneSubmission/")
# plot by batch (cell culture sample)
AB <- c("CD24","CD56","CD29","CD15","CD184","CD133","CD71","CD44","GLAST","AQP4","HepaCAM", "CD140a","O4")
# this is the seurat plotting function with bar colours and scale colours assigned.
hm <- DoHeatmap(seu, group.by = "Batch", features = AB, size= 4,slot = "scale.data", group.colors = c("dodgerblue2","bisque","seagreen3","red3","mediumpurple3"), disp.max = 2, disp.min = -1.5) + scale_fill_gradientn(colors = c("#154c79", "#eeeee4", "#e28743")) +
theme(axis.text.y = element_text(size = 12))
hm
#pdf("Heatmap_2DcellSamples.pdf",width =5.5, height = 4)
#hm
#dev.off()
colnames(seu@meta.data)
DotPlot(seu, group.by = "Batch")
colnames(seu@meta.data)
View(seu)
DotPlot(seu, group.by = "Batch")
colnames(seu@meta.data)
DotPlot(seu, group.by = "Batch", features = AB)
DoHeatmap(seu, group.by = "Batch", features = AB)
View(seu)
input_path <- "/Users/rhalenathomas/GITHUB/CelltypeR/FlowCytometry_Data/2Dcultures"
flowset <- fsc_to_fs(input_path, downsample = "none")
# down sample can be a number, 'none' or 'min'
# look at file names and rename with shorter sample names
library(flowWorkspace)  # this library has the function "sampleNames"
sampleNames(flowset)
# set up environment / load libraries
library(Seurat)
library(dplyr)
library(ggplot2)
library(CelltypeR)
sampleNames(flowset) <- sampleNames(flowset) <- c("Astrocytes1","Neurons","NPC1","Oligodendrocyte-m","Astrocyte2","IPSC","NPC2","Oligodendrocyte-e")
sampleNames(flowset)
plotdensity_flowset(flowset)
flowset_biexp <- harmonize(flowset, processing = 'biexp')
# we need to view the biex transform to see which measurements have two peaks
plotdensity_flowset(flowset_biexp)
flowset_retro <- harmonize(flowset, processing = 'retro',
two_peaks = c(7,9:19),
one_peak = c(1:6,8), threshold = 0.01)
# now create the data frame from the flowset object using the CelltypeR function flowset_to_csv
df <- flowset_to_csv(flowset_retro)
DimPlot(seu, repel = TRUE, label = TRUE, order = cell.order, shuffle = TRUE, split.by = "Batch", group.by = "RNA_snn_res.0.25")
DimPlot(seu, repel = TRUE, label = TRUE, shuffle = TRUE, split.by = "Batch", group.by = "RNA_snn_res.0.25")
View(seu)
seuOld <- seu
markers <- c("CD24","CD56","CD29","CD15","CD184","CD133","CD71","CD44","GLAST","AQP4","HepaCAM", "CD140a","O4")
seu <- make_seu(df, AB_vector = markers)
View(seu)
rm(seu)
seu <- make_seu(df, AB_vector = markers)
?make_seu
seu <- CelltypeR::make_seu(df, AB_vector = markers)
View(df)
write.csv(df, "2Dcells_surfaceflowset.csv")
df <- read.csv("2Dcells_surfaceflowset.csv")
seu <- CelltypeR::make_seu(df, AB_vector = markers)
package_version(Seurat)
packageVersion(Seurat)
library(Seurat)
packageVersion(Seurat)
packageVersion("Seurat")
library(Seurat, version = 4.3.1)
install.packages("Seurat", version = "4.3.1")
library(Seurat)
markers <- c("CD24","CD56","CD29","CD15","CD184","CD133","CD71","CD44","GLAST","AQP4","HepaCAM", "CD140a","O4")
seu <- CelltypeR::make_seu(df, AB_vector = markers)
packageVersion(Seurat)
packageVersion("Seurat")
install.packages("Seurat", version = "4.3.1")
library(Seurat)
library(dplyr)
library(ggplot2)
library(CelltypeR)
packageVersion("Seurat")
libpath()
.libPaths()
specialpathway <- "/Library/Frameworks/R.framework/Versions/4.2/Resources/SeuratV4"
# Add the custom library path to the search path
.libPaths(c(.libPaths(), specialpathway))
# Step 2: Install Seurat 4.3.1 to the custom library path
install.packages("Seurat", version = "4.3.1", lib = specialpathway)
# Step 3: Load Seurat 4.3.1 from the custom library path
library(Seurat, lib.loc = specialpathway)
# Check the version of the loaded Seurat package
packageVersion("Seurat")
install.packages("Seurat", version = "4.3.1", lib = specialpathway)
packageVersion("Seurat")
specialpathway <- "/Library/Frameworks/R.framework/Versions/4.2/Resources/SeuratV4"
# Add the custom library path to the search path
.libPaths(c(.libPaths(), specialpathway))
# Step 2: Install Seurat 4.3.1 to the custom library path
install.packages("Seurat", version = "4.3.1", lib = specialpathway)
# Step 3: Load Seurat 4.3.1 from the custom library path
library(Seurat, lib.loc = specialpathway)
install.packages("Seurat", version = "4.3.1", lib = specialpathway)
packageVersion("Seurat")
.libPaths()
options("repos" = NULL)  # Disable package repository updates
options("pkgType" = "source")  # Use source packages only (to prevent binary updates)
# Prevent Seurat package from being updated automatically
lockBinding("Seurat", env = baseenv())
options("keep.source" = TRUE)  # Keep source packages
# Step 3: Load Seurat 4.3.1 from the custom library path
library(Seurat, lib.loc = specialpathway)
packageVersion("Seurat")
remove.packages("Seurat", lib = "~/Library/Frameworks/R.framework/Versions/4.2/Resources/library")
remove.packages("Seurat", lib = "/Library/Frameworks/R.framework/Versions/4.2/Resources/library/")
library(Seurat, lib.loc = specialpathway)
# Check the version of the loaded Seurat package
packageVersion("Seurat")
# Step 2: Install Seurat 4.3.1 to the custom library path
install.packages("Seurat", version = "4.3.1", lib = specialpathway)
remotes::install_version("Seurat", version = "4.3.1")
remotes::install_version("Seurat", version = "4")
remotes::install_version("Seurat", version = "4.3.0")
install.packages("Seurat", version = "4.3.1", lib = specialpathway)
install.packages("Seurat", version = "4", lib = specialpathway)
# Step 2: Install Seurat 4.3.1 to the custom library path
remotes::install_version("SeuratObject", "4.1.4", repos = c("https://satijalab.r-universe.dev", getOption("repos")))
library(Seurat)
packageVersion("Seurat")
# Check the version of the loaded Seurat package
packageVersion(Seurat)
library(Seurat)
library(Seurat)
packageVersion("Seurat")
installed.packages()["Seurat", ]
seu <- CelltypeR::make_seu(df, AB_vector = markers)
seu <- make_seu(df, AB_vector = markers)
View(seuOld)
make_seu <- function(df, AB_vector){
df2 <- df %>% dplyr::select(all_of(AB_vector))
m <- as.matrix(df2)
tm <- t(df2)
rownames(tm) <- colnames(df2)
colnames(tm) <- rownames(df2)
seu <- CreateSeuratObject(tm)
seu <- AddMetaData(object=seu, metadata=df$Sample, col.name = 'Sample')
seu <- NormalizeData(seu)
seu <- ScaleData(seu)
seu <- RunPCA(seu, features = AB_vector)
}
seu <- make_seu(df, AB_vector = markers)
Idents(seu) <- "Sample"
View(df)
df2 <- df %>% dplyr::select(all_of(AB_vector))
AB_vector = AB
df2 <- df %>% dplyr::select(all_of(AB_vector))
m <- as.matrix(df2)
tm <- t(df2)
rownames(tm) <- colnames(df2)
colnames(tm) <- rownames(df2)
seu <- CreateSeuratObject(tm)
View(df)
seu <- AddMetaData(object=seu, metadata=df$Sample, col.name = 'Sample')
seu <- NormalizeData(seu)
seu <- ScaleData(seu)
seu <- RunPCA(seu, features = AB_vector)
View(seu)
head(df)
seuOld
seu
input_path <- "/Users/rhalenathomas/GITHUB/CelltypeR/FlowCytometry_Data/2Dcultures"
flowset <- fsc_to_fs(input_path, downsample = 10000)
# down sample can be a number, 'none' or 'min'
# look at file names and rename with shorter sample names
library(flowWorkspace)  # this library has the function "sampleNames"
sampleNames(flowset)
sampleNames(flowset) <- sampleNames(flowset) <- c("Astrocytes1","Neurons","NPC1","Oligodendrocyte-m","Astrocyte2","IPSC","NPC2","Oligodendrocyte-e")
sampleNames(flowset)
plotdensity_flowset(flowset)
flowset_biexp <- harmonize(flowset, processing = 'biexp')
# we need to view the biex transform to see which measurements have two peaks
plotdensity_flowset(flowset_biexp)
flowset_retro <- harmonize(flowset, processing = 'retro',
two_peaks = c(7,9:19),
one_peak = c(1:6,8), threshold = 0.01)
# now create the data frame from the flowset object using the CelltypeR function flowset_to_csv
df <- flowset_to_csv(flowset_retro)
write.csv(df, "2Dcells_surfaceflowset.csv")
df <- read.csv("2Dcells_surfaceflowset.csv")
markers <- c("CD24","CD56","CD29","CD15","CD184","CD133","CD71","CD44","GLAST","AQP4","HepaCAM", "CD140a","O4")
seu <- make_seu(df, AB_vector = markers)
rm(seu)
df2 <- df %>% dplyr::select(all_of(AB_vector))
m <- as.matrix(df2)
tm <- t(df2)
rownames(tm) <- colnames(df2)
colnames(tm) <- rownames(df2)
View(tm)
head(tm)
tm[1;4,1:10]
tm[1:4,1:10]
seu <- CreateSeuratObject(tm)
seu <- CreateSeuratObject(counts = tm)
View(seu)
seu
seu
packageVersion(Seurat)
"Seurat"
package_version("Seurat")
package_version(Seurat)
seu@assays$RNA@layers
installed.packages()["Seurat", ]
remove.packages("Seurat", lib = "/Library/Frameworks/R.framework/Versions/4.2/Resources/library/")
remove.packages("Seurat", lib = "/Library/Frameworks/R.framework/Versions/4.2/Resources/library/")
remotes::install_version("SeuratObject", "4.3.1", .libPaths("/Library/Frameworks/R.framework/Versions/4.2/Resources/SeuratV4"))
#
remotes::install_version("Seurat", "4.4.0", repos = c("https://satijalab.r-universe.dev", getOption("repos")))
library(Seurat)
packageVersion("Seurat")
markers <- c("CD24","CD56","CD29","CD15","CD184","CD133","CD71","CD44","GLAST","AQP4","HepaCAM", "CD140a","O4")
seu <- make_seu(df, AB_vector = markers)
seu <- CreateSeuratObject(counts = tm)
View(seu)
rm(seu)
seu <- CreateSeuratObject(counts = tm)
View(seu)
packageVersion("Seurat")
rm(seu)
make_seu <- function(df, AB_vector){
# select the marker values
df2 <- df %>% dplyr::select(all_of(AB_vector))
# convert to matrix
m <- as.matrix(df2)
# transpose
tm <- t(df2)
# add marker names and cell numbers
rownames(tm) <- colnames(df2)
colnames(tm) <- rownames(df2)
# create seurat object
seu <- CreateSeuratObject(counts = tm)
seu <- AddMetaData(object=seu, metadata=df$Sample, col.name = 'Sample')
seu <- NormalizeData(seu)
seu <- ScaleData(seu)
seu <- RunPCA(seu, features = AB_vector)
}
seu <- CreateSeuratObject(tm)
View(seu)
make_seu <- function(df, AB_vector){
# select the marker values
df2 <- df %>% dplyr::select(all_of(AB_vector))
# convert to matrix
m <- as.matrix(df2)
# transpose
tm <- t(df2)
# add marker names and cell numbers
rownames(tm) <- colnames(df2)
colnames(tm) <- rownames(df2)
# create seurat object
seu <- CreateSeuratObject(tm)
seu <- AddMetaData(object=seu, metadata=df$Sample, col.name = 'Sample')
seu <- NormalizeData(seu)
seu <- ScaleData(seu)
seu <- RunPCA(seu, features = AB_vector)
}
seu <- make_seu(df, AB_vector = markers)
View(seu)
rm(seu)
seu <- make_seu(df, AB_vector = markers)
seu <- CreateSeuratObject(tm)
View(seu)
rm(seu)
seu <- CreateSeuratObject(counts = tm)
View(seu)
